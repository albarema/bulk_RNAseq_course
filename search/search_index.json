{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction to bulk RNAseq analysis workshop","text":"<p>This workshop material includes a tutorial on how to approach RNAseq data, starting from your sequencing reads (fastq files). Thus, the workshop only briefly touches upon laboratory protocols, library preparation, and experimental design of RNA sequencing experiments, mainly for the purpose of outlining considerations in the downstream bioinformatic analysis. This workshop is based on the materials developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC), a collection of modified tutorials from the DESeq2, R language vignettes and the nf-core rnaseq pipeline.</p> <p></p> Authors <p>Jose Alejandro  Romero Herrera</p> <p>  Data Scientist </p> <p>Diana  Andrejeva</p> <p>  Data Scientist </p> <p>Henrike  Zschach</p> <p>  Data Scientist </p> <p>Adrija  Kalvisa</p> <p>  Data Scientist </p> <p>Samuele  Soraggi</p> <p>  Data Scientist </p> <p>Jennifer  Bartell</p> <p>  Project Coordinator and Data Scientist </p> <p>Overview</p> <p> Syllabus: </p> <ol> <li>Course introduction  </li> <li>Experimental planning   </li> <li>Data explanation    </li> <li>Read reprocessing and preprocessing pipelines   </li> <li>Analysing RNAseq data   <ol> <li>RNAseq counts   </li> <li>Exploratory analysis    </li> <li>Differential Expression Analysis    </li> <li>Functional analysis </li> </ol> </li> <li>Summarized workflow  </li> </ol> <p> Total Time Estimation: 8 hours</p> <p> Supporting Materials: Workshop slides with theory on bulk RNAseq can be found in this zenodo repository.  </p> <p> Target Audience: PhD, MsC, etc.</p> <p> Level: Beginner</p> <p> License: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)</p> <p> Funding: This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).</p> <p>Course Requirements</p> <ul> <li>Knowledge of R, Rstudio and Rmarkdown. It is recommended that you have at least followed our workshop R basics</li> <li>Basic knowledge of RNAseq technology</li> <li>Basic knowledge of data science and statistics such as PCA, clustering and statistical testing</li> </ul> <p>This workshop material includes a tutorial on how to approach RNAseq data, starting from your sequencing reads (fastq files). Thus, the workshop only briefly touches upon laboratory protocols, library preparation, and experimental design of RNA sequencing experiments, mainly for the purpose of outlining considerations in the downstream bioinformatic analysis. This workshop is based on the materials developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC), a collection of modified tutorials from the DESeq2, R language vignettes and the nf-core rnaseq pipeline.</p> <p>The aim of this repository is to run a comprehensive but introductory workshop on bulk-RNAseq bioinformatic analyses. Each of the modules of this workshop is accompanied by a powerpoint slideshow explaining the steps and the theory behind a typical bioinformatics analysis (ideally with a teacher). Many of the slides are annotated with extra information and/or point to original sources for extra reading material.</p> <p>Goals</p> <p>By the end of this workshop, you should be able to analyse your own bulk RNAseq data:</p> <ul> <li>Preprocess your reads into a count matrix.</li> <li>Normalize your data.</li> <li>Explore your samples with PCAs and heatmaps.</li> <li>Perform Differential Expression Analysis.</li> <li>Annotate your results.</li> </ul>"},{"location":"index.html#introduction-to-bulk-rnaseq-analysis","title":"Introduction to bulk RNAseq analysis","text":""},{"location":"index.html#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Center for Health Data Science, University of Copenhagen.</li> <li>Hugo Tavares, Bioinformatics Training Facility, University of Cambridge.</li> <li>Silvia Raineri, Center for Stem Cell Medicine (reNew), University of Copenhagen.</li> <li>Harvard Chan Bioinformatics Core (HBC), check out their github repo</li> <li>nf-core community</li> </ul>"},{"location":"02_experimental_planning.html","title":"Experimental design considerations","text":""},{"location":"02_experimental_planning.html#experimental-design-considerations","title":"Experimental design considerations","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 30 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Describe the importance of replicates for RNA-seq differential expression experiments.</li> <li>Explain the relationship between the number of biological replicates, sequencing depth and the differentially expressed genes identified.</li> <li>Demonstrate how to design an RNA-seq experiment that avoids confounding and batch effects.</li> </ol> <p>Understanding the steps in the experimental process of RNA extraction and preparation of RNA-Seq libraries is helpful for designing an RNA-Seq experiment, but there are special considerations that should be highlighted that can greatly affect the quality of a differential expression analysis.</p> <p>These important considerations include:</p> <ol> <li>Proper experiment controls</li> <li>Number and type of replicates</li> <li>Issues related to confounding</li> <li>Addressing batch effects</li> </ol> <p>We will go over each of these considerations in detail, discussing best practice and optimal design.</p>"},{"location":"02_experimental_planning.html#controls","title":"Controls","text":"<p>Experimental controls must be used in order to minimize the effect of variables which are not the interest of the study. Thus, it allows the experiment to minimize the changes in all other variables except the one being tested, and help us ensure that there have been no deviations in the environment of the experiment that could end up influencing the outcome of the experiment, besides the variable they are investigating.</p> <p>There are different types of controls, but we will mainly see positive and negative controls:</p> <ul> <li>Negative: The negative control is a variable or group of samples where no response is expected.</li> <li>Positive: A positive control is a variable or group of samples that receives a treatment with a known positive result.</li> </ul> <p>It is very important that you give serious thought about proper controls of your experiment so you can control as many sources of variation as possible. This will greatly strengthen the results of your experiment.</p>"},{"location":"02_experimental_planning.html#replicates","title":"Replicates","text":"<p>Experimental replicates can be performed as technical replicates or biological replicates.</p> <p> </p> <p>Image credit: Klaus B., EMBO J (2015) 34: 2727-2730</p> <ul> <li>Technical replicates: use the same biological sample to repeat the technical or experimental steps in order to accurately measure technical variation and remove it during analysis.</li> <li>Biological replicates use different biological samples of the same condition to measure the biological variation between samples.</li> </ul> <p>In the days of microarrays, technical replicates were considered a necessity; however, with the current RNA-Seq technologies, technical variation is much lower than biological variation and technical replicates are unnecessary.</p> <p>In contrast, biological replicates are absolutely essential for differential expression analysis. For mice or rats, it might be easy to determine what constitutes a different biological sample, but it's a bit more difficult to determine for cell lines. This article gives some great recommendations for cell line replicates.</p> <p>For differential expression analysis, the more biological replicates, the better the estimates of biological variation and the more precise our estimates of the mean expression levels. This leads to more accurate modeling of our data and identification of more differentially expressed genes.</p> <p> </p> <p>Image credit: Liu, Y., et al., Bioinformatics (2014) 30(3): 301--304</p> <p>As the figure above illustrates, biological replicates are of greater importance than sequencing depth, which is the total number of reads sequenced per sample. The figure shows the relationship between sequencing depth and number of replicates on the number of differentially expressed genes identified [1]. Note that an increase in the number of replicates tends to return more DE genes than increasing the sequencing depth. Therefore, generally more replicates are better than higher sequencing depth, with the caveat that higher depth is required for detection of lowly expressed DE genes and for performing isoform-level differential expression.</p> <p>Tip</p> <p>Sample pooling: Try to avoid pooling of individuals/experiments, if possible; however, if absolutely necessary, then each pooled set of samples would count as a single replicate. To ensure similar amounts of variation between replicates, you would want to pool the same number of individuals for each pooled set of samples.</p> <p>For example, if you need at least 3 individuals to get enough material for your <code>control</code> replicate and at least 5 individuals to get enough material for your <code>treatment</code> replicate, you would pool 5 individuals for the <code>control</code> and 5 individuals for the <code>treatment</code> conditions. You would also make sure that the individuals that are pooled in both conditions are similar in sex, age, etc.</p> <p>Replicates are almost always preferred to greater sequencing depth for bulk RNA-Seq. However, guidelines depend on the experiment performed and the desired analysis. Below we list some general guidelines for replicates and sequencing depth to help with experimental planning:</p> <ul> <li> <p>General gene-level differential expression:</p> <ul> <li>ENCODE guidelines suggest 30 million SE reads per sample (stranded).</li> <li>15 million reads per sample is often sufficient, if there are a good number of replicates (&gt;3).</li> <li>Spend money on more biological replicates, if possible.</li> <li>Generally recommended to have read length &gt;= 50 bp</li> </ul> </li> <li> <p>Gene-level differential expression with detection of lowly-expressed genes:</p> <ul> <li>Similarly benefits from replicates more than sequencing depth.</li> <li>Sequence deeper with at least 30-60 million reads depending on level of expression (start with 30 million with a good number of replicates).</li> <li>Generally recommended to have read length &gt;= 50 bp</li> </ul> </li> <li> <p>Isoform-level differential expression:</p> <ul> <li>Of known isoforms, suggested to have a depth of at least 30 million reads per sample and paired-end reads.</li> <li>Of novel isoforms should have more depth (&gt; 60 million reads per sample).</li> <li>Choose biological replicates over paired/deeper sequencing.</li> <li>Generally recommended to have read length &gt;= 50 bp, but longer is better as the reads will be more likely to cross exon junctions</li> <li>Perform careful QC of RNA quality. Be careful to use high quality preparation methods and restrict analysis to high quality RIN # samples.</li> </ul> </li> <li> <p>Other types of RNA analyses (intron retention, small RNA-Seq, etc.):</p> <ul> <li>Different recommendations depending on the analysis.</li> <li>Almost always more biological replicates are better!</li> </ul> </li> </ul> <p>What is coverage?</p> <p>The factor used to estimate the depth of sequencing for genomes is \"coverage\" - how many times do the number of nucleotides sequenced \"cover\" the genome. This metric is not exact for genomes (whole genome sequencing), but it is good enough and is used extensively. However, the metric does not work for transcriptomes because even though you may know what % of the genome has transcriptional activity, the expression of the genes is highly variable.</p>"},{"location":"02_experimental_planning.html#confounding-variables","title":"Confounding variables","text":"<p>A confounded RNA-Seq experiment is one where you cannot distinguish the separate effects of two different sources of variation in the data.</p> <p>For example, we know that sex has large effects on gene expression, and if all of our control mice were female and all of the treatment mice were male, then our treatment effect would be confounded by sex. We could not differentiate the effect of treatment from the effect of sex.</p> <p> </p> <p>To AVOID confounding:</p> <ul> <li>Ensure animals in each condition are all the same sex, age, litter, and batch, if possible.</li> <li>If not possible, then ensure to split the animals equally between conditions</li> </ul> <p> </p>"},{"location":"02_experimental_planning.html#batch-effects","title":"Batch effects","text":"<p>A batch effect appears when variance is introduced into your data as a consequence of technical issues such as sample collection, storage, experimental protocol, etc. Batch effects are problematic for RNA-Seq analyses, since you may see significant differences in expression due solely to the batch effect.</p> <p> </p> <p>Image credit: Hicks SC, et al., bioRxiv (2015)</p> <p>To explore the issues generated by poor batch study design, they are highlighted nicely in this paper.</p>"},{"location":"02_experimental_planning.html#how-to-know-whether-you-have-batches","title":"How to know whether you have batches?","text":"<ul> <li>Were all RNA isolations performed on the same day?</li> <li>Were all library preparations performed on the same day?</li> <li>Did the same person perform the RNA isolation/library preparation for all samples?</li> <li>Did you use the same reagents for all samples?</li> <li>Did you perform the RNA isolation/library preparation in the same location?</li> </ul> <p>If any of the answers is 'No', then you have batches.</p>"},{"location":"02_experimental_planning.html#best-practices-regarding-batches","title":"Best practices regarding batches","text":"<ul> <li>Design the experiment in a way to avoid batches, if possible.</li> <li> <p>If unable to avoid batches:</p> <ul> <li>Do NOT confound your experiment by batch:</li> </ul> </li> </ul> <p> </p> <p>Image credit: Hicks SC, et al., bioRxiv (2015)</p> <ul> <li>DO split replicates of the different sample groups across batches. The more replicates the better (definitely more than 2).</li> </ul> <p> </p> <p>Image credit: Hicks SC, et al., bioRxiv (2015)</p> <ul> <li>DO make a balanced batch design. For example if you can only prepare a subset of samples in the lab on a given day, do not do 90% of samples on day 1 and the remaining 10% on day 2, aim for balance, 50% each day.</li> <li>DO include batch information in your experimental metadata. During the analysis, we can regress out the variation due to batch if not confounded so it doesn't affect our results if we have that information.</li> </ul> <p> </p> <p>Warning on sample preparations</p> <p>The sample preparation of cell line \"biological\" replicates \"should be performed as independently as possible\" (as batches), \"meaning that cell culture media should be prepared freshly for each experiment, different frozen cell stocks and growth factor batches, etc. should be used (read more about it here).\" However, preparation across all conditions should be performed at the same time.</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"03_data_explanation.html","title":"Introduction to the dataset","text":""},{"location":"03_data_explanation.html#dataset-explanation","title":"Dataset explanation","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 5 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Explain the experiment and its objectives.</li> </ol> <p>We will be using the sequencing reads from the RNA-Seq dataset that is part of a larger study described in Kenny PJ et al, Cell Rep 2014.</p> <p>Nonetheless, we have decided to make the dataset and the study a bit more spicy. We have modified our gene annotation file so that we would get some interesting conditions and results! The story goes like this:</p> <p>A mysterious condition named \"Vampirium\" is causing individuals to exhibit aggressive behavior and a strange desire for blood. Local individuals treat the symptoms using a concoction named \"Garlicum\", which seem to return the individuals to a normal status.</p> <p> </p> <p>Scientists suspect that the condition might be related to changes in expression of genes related to blood production and impulse control. Thus, they have taken samples of individuals affected by Vampirum, individuals cured by the Garlicum concoction and healthy individuals used as control samples. With these samples, they have performed bulk RNAseq.</p> <p> </p>"},{"location":"03_data_explanation.html#our-questions","title":"Our questions","text":"<p>We will try to answer these questions:</p> <ul> <li>What patterns of expression can we identify between the Vampirium individuals and controls?</li> <li>What happens to the Vampirium individuals when treated with Garlicum?</li> <li>Are there any genes shared between the two comparisons?</li> </ul> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"04a_preprocessing.html","title":"Read preprocessing theory","text":""},{"location":"04a_preprocessing.html#from-raw-sequence-reads-to-count-matrixthe-rna-seq-workflow","title":"From raw sequence reads to count matrix:the RNA-seq workflow","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 40 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Understand the different steps of the RNA-seq workflow, from RNA extraction to assessing the expression levels of genes.</li> </ol> <p>To perform differential gene expression analysis (DEA), we need to start with a matrix of counts representing the levels of gene expression. It is important to understand how the count matrix is generated, before diving into the statistical analysis.</p> <p>In this lesson we will briefly discuss the RNA-processing pipeline for bulk RNA-seq, and the different steps we take to go from raw sequencing reads to a gene expression count matrix.</p> <p> </p> <p>Typical RNAseq workflow</p>"},{"location":"04a_preprocessing.html#1-rna-extraction-and-library-preparation","title":"1. RNA Extraction and library preparation","text":"<p>Before RNA can be sequenced, it must first be extracted and separated from its cellular environment and prepared into a cDNA library. There are a number of steps involved which are outlined in the figure below, and in parallel there are various quality checks implemented to make sure we have good quality RNA to move forward with. We briefly describe some of these steps below.</p> <p>a. Enriching for RNA. Once the sample has been treated with DNAse to remove any contaminating DNA sequence, the sample undergoes either selection of the mRNA (polyA selection) or depletion of the ribosomal RNA (rRNA).</p> <p>Generally, rRNA represents the majority of the RNA present in a cell, while messenger RNAs represent a small percentage of total RNA, ~2% in humans. Therefore, if we want to study the protein-coding genes, we need to enrich mRNA or deplete the rRNA. For differential gene expression analysis, it is best to enrich for Poly(A)+, unless you are aiming to obtain information about long non-coding RNAs, in which case rRNA depletion is recommended.</p> <p>RNA Quality check: It is essential to check the integrity of the extracted RNA prior to starting the cDNA library prepation. Traditionally, RNA integrity was assessed via gel electrophoresis by visual inspection of the ribosomal RNA bands; but that method is time consuming and imprecise. The Bioanalyzer system from Agilent will rapidly assess RNA integrity and calculate an RNA Integrity Number (RIN), which facilitates the interpretation and reproducibility of RNA quality. RIN, essentially, provides a means by which RNA quality from different samples can be compared to each other in a standardized manner.</p> <p>b. Fragmentation and size selection. The remaining RNA molecules are then fragmented. This is done either via chemical, enzymatic (e.g., RNAses) or physical processes (e.g., chemical/mechanical shearing). These fragments then undergo size selection to retain only those fragments within a size range that Illumina sequencing machines can handle best, i.e., between 150 to 300 bp.</p> <p>Fragment size quality check: After size selection/exclusion the fragment size distribution should be assessed to ensure that it is unimodal and well-defined.</p> <p>c. Reverse transcribe RNA into double-stranded cDNA. Information about which strand a fragment originated from can be preserved by creating stranded libraries. The most commonly used method incorporates deoxy-UTP during the synthesis of the second cDNA strand (for details see Levin et al. (2010)). Once double-stranded cDNA fragments are generated, sequence adapters are ligated to the ends. (Size selection can be performed here instead of at the RNA-level.)</p> <p>d. PCR amplification. If the amount of starting material is low and/or to increase the number of cDNA molecules to an amount sufficient for sequencing, libraries are usually PCR amplified. Run as few amplification cycles as possible to avoid PCR artifacts.</p> <p> </p> <p>Image source: Zeng and Mortavi, 2012</p>"},{"location":"04a_preprocessing.html#2-sequencing-illumina","title":"2. Sequencing (Illumina)","text":"<p>Sequencing of the cDNA libraries will generate reads. Reads correspond to the nucleotide sequences of the ends of each of the cDNA fragments in the library. You will have the choice of sequencing either a single end of the cDNA fragments (single-end reads) or both ends of the fragments (paired-end reads).</p> <p> </p> <ul> <li>SE - Single end dataset =&gt; Only Read1</li> <li>PE - Paired-end dataset =&gt; Read1 + Read2<ul> <li>PE can be 2 separate FastQ files or just one with interleaved pairs</li> </ul> </li> </ul> <p>Generally, single-end sequencing is sufficient unless it is expected that the reads will match multiple locations on the genome (e.g. organisms with many paralogous genes), assemblies are being performed, or for splice isoform differentiation. On the other hand, paired-end sequencing helps resolve structural genome rearrangements e.g. insertions, deletions, or inversions. Furthermore, paired reads improve the alignment/assembly of reads from repetitive regions. The downside of this type of sequencing is that it may be twice as expensive.</p> <p>The scientific community is moving towards paired-end sequencing in general. However, for many purposes, single-end reads are perfectly adequate.</p>"},{"location":"04a_preprocessing.html#sequencing-by-synthesis","title":"Sequencing-by-synthesis","text":"<p>Illumina sequencing technology uses a sequencing-by-synthesis approach. To explore sequencing by synthesis in more depth, please watch this linked video on Illumina's YouTube channel.</p> <p>We have provided a brief explanation of the steps below:</p> <ol> <li>Cluster growth: The DNA fragments in the cDNA library are denatured and hybridized to the glass flowcell (adapter complementarity). Each fragment is then clonally amplified, forming a cluster of double-stranded DNA. This step is necessary to ensure that the sequencing signal will be strong enough to be detected/captured unambiguously for each base of each fragment.    NOTE: Number of clusters ~= Number of reads</li> <li>Sequencing: The sequencing of the fragment ends is based on fluorophore labelled dNTPs with reversible terminator elements. In each sequencing cycle, a base is incorporated into every cluster and excited by a laser.</li> <li>Image acquisition: Each dNTP has a distinct excitatory signal emission which is captured by cameras.</li> <li>Base calling: The Base calling program will then generate the sequence of bases, i.e. reads, for each fragment/cluster by assessing the images captured during the many sequencing cycles. In addition to calling the base in every position, the base caller will also report the certainty with which it was able to make the call (quality information).    NOTE: Number of sequencing cycles = Length of reads</li> </ol> <p> </p>"},{"location":"04a_preprocessing.html#3-quality-control-of-raw-sequencing-data","title":"3. Quality control of raw sequencing data","text":"<p>The raw reads obtained from the sequencer are stored as FASTQ files. The FASTQ file format is the de facto file format for sequence reads generated from next-generation sequencing technologies.</p> <p>Each FASTQ file is a text file which represents sequence readouts for a sample. Each read is represented by 4 lines as shown below:</p> <pre><code>@HWI-ST330:304:H045HADXX:1:1101:1111:61397\nCACTTGTAAGGGCAGGCCCCCTTCACCCTCCCGCTCCTGGGGGANNNNNNNNNNANNNCGAGGCCCTGGGGTAGAGGGNNNNNNNNNNNNNNGATCTTGG\n+\n@?@DDDDDDHHH?GH:?FCBGGB@C?DBEGIIIIAEF;FCGGI##################################################################################################################\n</code></pre> Line Description 1 Always begins with '\\@' and then information about the read 2 The actual DNA sequence, where N means that no base was called (poor quality) 3 Always begins with a '+' and sometimes the same info as in line 1 4 Has a string of characters which represent the quality scores; must have same number of characters as line 2 <p>FastQC is a commonly used software that provides a simple way to do some quality control checks on raw sequence data.</p> <p>The main functions include:</p> <ul> <li>Providing a quick overview to tell you in which areas there may be problems</li> <li>Summary graphs and tables to quickly assess your data</li> <li>Export of results to an HTML based permanent report</li> </ul>"},{"location":"04a_preprocessing.html#quality-metrics","title":"Quality metrics","text":"<p>Here you will find a list of metrics that FASTQC will calculate on your reads:</p> <ol> <li>Phred Quality Scores: Preprocessed reads are evaluated based on Phred quality scores. These scores represent the estimated probability of a base call being incorrect. Higher Phred scores indicate higher base-call accuracy.</li> <li>Sequence Length Distribution: QC tools assess the length distribution of the preprocessed reads. This helps in identifying any biases introduced during preprocessing, such as excessive shortening of reads.</li> <li>Adapter Contamination: Even after preprocessing, it's crucial to confirm that all adapter sequences have been successfully removed. Any remaining adapter contamination can adversely affect downstream analyses.</li> <li>GC Content: Evaluating the GC content of preprocessed reads helps in detecting biases that might have been introduced during library preparation or sequencing.</li> <li>Duplicate Reads: Preprocessed reads should be checked for duplicates. Duplicate reads can arise due to PCR amplification biases during library preparation.</li> <li>K-mer Content: QC tools can analyze the frequency distribution of k-mers (short sequences of length k). Deviations from the expected k-mer distribution may indicate biases or contamination.</li> <li>Overall Sequence Quality: A summary of the overall quality metrics, including mean Phred scores, per-base sequence quality, and sequence duplication levels, provides a comprehensive assessment of data quality.</li> </ol>"},{"location":"04a_preprocessing.html#4-read-filtering-and-trimming","title":"4. Read filtering and trimming","text":"<p>The reads in a FASTQ file may contain errors, low-quality bases and adapter sequences. To extract reliable biological information, it's crucial to preprocess or \"clean\" this data through trimming and filtering.</p> <p>Trimming involves the removal of low-quality bases from the ends of reads. Low-quality bases can arise due to various factors, such as limitations in the sequencing technology or degradation during sample preparation. Trimming helps to improve the overall quality of the data, which is essential for downstream analysis.</p> <p>Additionally, adapter sequences, which are short DNA sequences used in library preparation, can be mistakenly sequenced along with the target DNA. Trimming these adapters is necessary to ensure accurate alignment and subsequent analysis.</p> <p>Filtering is a broader process that involves the removal of reads that do not meet specific quality criteria. For example, reads with an excessive number of low-quality bases or those that are too short may be discarded. This step helps to retain high-confidence data for downstream analysis.</p> <p>Trimming and filtering are crucial steps in NGS data processing because they improve the accuracy and reliability of the data. Without these steps, subsequent analyses like genome assembly, variant calling, and transcript quantification can be severely affected. By reducing noise and removing artifacts, researchers can obtain a clearer and more accurate picture of the biological information encoded in the sequencing data.</p> <p>To trim and filter reads, we can use bioinformatics tools such as like Cutadapt and Trim Galore. They offer powerful and versatile functionalities for trimming and filtering raw sequencing reads, ensuring that only high-quality data is used for subsequent analyses.</p>"},{"location":"04a_preprocessing.html#cutadapt","title":"Cutadapt","text":"<p>Cutadapt is a widely-used and highly flexible tool designed specifically for removing adapter sequences from NGS reads. Adapter sequences can be introduced during library preparation and may subsequently be sequenced along with the target DNA or RNA. Cutadapt employs a sophisticated algorithm to accurately and efficiently identify and trim these adapters.</p> <p>Key features of Cutadapt include:</p> <ol> <li>Adapter Detection and Removal: Cutadapt can detect and remove adapters with high precision, even in cases where the adapter sequence is only partially known.</li> <li>Error-Tolerant Matching: It can perform error-tolerant matching, allowing it to handle cases where adapter sequences might have minor variations or mutations.</li> <li>Quality Trimming: Cutadapt can also perform quality trimming, which involves removing low-quality bases from the ends of reads. This feature helps in improving data quality.</li> <li>Batch Processing: It can process multiple files in a single run, making it efficient for handling large-scale datasets.</li> <li>Format Compatibility: Cutadapt supports various file formats commonly used in NGS, such as FASTQ and SAM.</li> </ol>"},{"location":"04a_preprocessing.html#trim-galore","title":"Trim Galore","text":"<p>Trim Galore is a user-friendly wrapper script that combines the functionalities of Cutadapt with FastQC, to provide a streamlined solution for trimming and quality control of NGS data. It simplifies the preprocessing workflow by automating the process of running Cutadapt and generating quality reports through FastQC.</p>"},{"location":"04a_preprocessing.html#5-quality-control-of-clean-sequencing-data","title":"5. Quality control of clean sequencing data","text":"<p>After preprocessing the reads, we assess again the quality and reliability of the sequencing reads. This QC step is essential to ensure that only high-quality data is used for downstream analyses. We will check that the quality metrics calculated on the raw reads have improved:</p> <ul> <li>Improved Quality: Preprocessed reads typically exhibit higher quality scores and improved base call accuracy compared to raw reads. This is because preprocessing steps like adapter trimming and quality filtering remove low-quality bases and artifacts.</li> <li>Reduced Noise and Artifacts: Preprocessing removes noise, such as adapter sequences, low-quality bases, and sequencing errors. This leads to cleaner data, enhancing the accuracy of downstream analyses.</li> </ul>"},{"location":"04a_preprocessing.html#6-alignment","title":"6. Alignment","text":"<p>After checking that the quality of our reads is adequate, we can proceed to aligning our sequencing reads to a reference genome. By doing this, we can identify variations, quantify gene expression levels and study other genomic features. For the purposes of this workshop, we are mostly interested in the ability to quantify gene expression levels for our differential expression analysis.</p> <p>Alignment is achieved by finding the best matching position in the reference genome for each read. This is a computationally intensive task due to the vast amount of data generated by NGS experiments. Alignment tools utilize various algorithms and techniques to efficiently perform this task, which can be mostly divided in two categories: traditional aligment and pseudoaligment.</p>"},{"location":"04a_preprocessing.html#traditional-alignment-tools","title":"Traditional alignment tools","text":"<p>Traditional alignment consists in the process described above, matching your preprocessed reads to a reference genome. This process involves determining the genomic location from which each read originated. The result of the alignment will be a SAM/BAM file, which will contain information regarding the quality and the genomic position of the aligned read. </p> <p>Below we will highlight some of the most common alignment algorithms:</p>"},{"location":"04a_preprocessing.html#bowtie2","title":"Bowtie2","text":"<p>Bowtie2 is a widely-used, ultra-fast alignment tool designed for aligning short reads (typically from Illumina platforms) to a reference genome. It employs a Burrows-Wheeler transform-based algorithm, which allows it to quickly and accurately align millions of reads. Bowtie is highly efficient, making it a popular choice for large-scale NGS projects.</p>"},{"location":"04a_preprocessing.html#star","title":"STAR","text":"<p>STAR (Spliced Transcripts Alignment to a Reference) is a specialized alignment tool tailored for RNA-Seq data. It is designed to align reads to a reference genome, taking into account the splicing events that occur in eukaryotic genomes. STAR can align both short and long RNA-Seq reads, making it a versatile tool for gene expression analysis and transcriptome mapping.</p>"},{"location":"04a_preprocessing.html#hisat2","title":"HISAT2","text":"<p>HISAT2 (Hierarchical Indexing for Spliced Alignment of Transcripts) is another prominent alignment tool widely used for aligning RNA-Seq reads to a reference genome. It employs a hierarchical indexing approach that enables efficient and accurate alignment, particularly in the presence of spliced alignments. HISAT2 is known for its speed and sensitivity, making it a popular choice for transcriptome analysis. It also offers the advantage of reduced memory usage compared to some other alignment tools, making it suitable for a wide range of computational environments. HISAT2's ability to accurately handle splice junctions makes it a valuable tool for studying alternative splicing events and other complex features of transcriptomes.</p>"},{"location":"04a_preprocessing.html#pseudoalignment","title":"Pseudoalignment","text":"<p>Pseudoalignment is a concept in computational biology and genomics that offers an alternative approach to traditional read alignment. Unlike traditional alignment, which involves finding the exact position of a read within a reference genome, pseudoalignment estimates the likelihood that a read originates from a specific transcript or set of transcripts without explicitly mapping it to the reference genome.</p> <p>Pseudoalignment tools, like Salmon and Kallisto, achieve this by building an index of transcript sequences rather than the entire genome. They use efficient algorithms to quickly determine which transcripts are likely to be the source of a given read. This approach significantly reduces the computational resources required for quantifying gene expression, as it circumvents the need to align every read to the entire genome. By focusing on transcripts, pseudoalignment provides a faster and more memory-efficient solution, making it especially advantageous for large-scale RNA-Seq studies and in situations where rapid quantification of gene expression levels is critical, such as in time-sensitive experiments or in scenarios with limited computational resources.</p> <p>Pseudoalignment is well-suited for studying gene expression in well-annotated genomes, where the transcriptome is relatively well-characterized, although not so great with other under-studied organisms. We will highlight a couple of these algorithms below.</p>"},{"location":"04a_preprocessing.html#salmon","title":"Salmon","text":"<p>Salmon uses a lightweight and rapid algorithm based on the concept of selective alignment. It directly quantifies transcript abundance without explicitly aligning reads to the reference genome. This makes Salmon especially efficient for large-scale RNA-Seq studies, where speed and accuracy are crucial.</p>"},{"location":"04a_preprocessing.html#kallisto","title":"Kallisto","text":"<p>Similar to Salmon, Kallisto employs a pseudoalignment strategy. It quantifies transcript abundance by estimating the compatibility of reads with known transcripts, bypassing the need for full alignment to the genome. This approach makes Kallisto extremely fast, making it an attractive choice for rapid and accurate gene expression quantification.</p>"},{"location":"04a_preprocessing.html#7-quality-control-of-aligned-reads","title":"7. Quality control of aligned reads","text":"<p>After aligning our reads, it is essential to perform some basic quality checks on the sequencing data. However, this step is only possible if you align your reads using a traditional algorithm, since pseudoaligment tools will not create a BAM file that can be checked for quality control.</p>"},{"location":"04a_preprocessing.html#qualimap","title":"Qualimap","text":"<p>A tool called Qualimap explores the features of aligned reads in the context of the genomic region they map to, hence providing an overall view of the data quality (as an HTML file). Various quality metrics assessed by Qualimap include:</p> <ul> <li>DNA or rRNA contamination</li> <li>5'-3' biases</li> <li>Coverage biases</li> </ul>"},{"location":"04a_preprocessing.html#dupradar","title":"dupRadar","text":"<p>The [dupRadar[(https://bioconductor.org/packages/release/bioc/vignettes/dupRadar/inst/doc/dupRadar.html) package provides an assessment of the level of duplication of your reads, allowing you to distinguish PCR amplification artifacts from true biological signals.</p> <p>The number of reads per base assigned to a gene in an ideal RNA-Seq data set is expected to be proportional to the abundance of its transcripts in the sample. For lowly expressed genes we expect read duplication to happen rarely by chance, while for highly expressed genes - depending on the total sequencing depth - we expect read duplication to happen often.</p> <p>A good way to learn if a dataset is following this trend is by relating the normalized number of counts per gene (RPK, as a quantification of the gene expression) and the fraction represented by duplicated reads. For example, the plots below show very well how duplicates should look in a good experiment (left) compared to another experiment with duplication issues(right)</p> <p></p>"},{"location":"04a_preprocessing.html#8-quantify-expression","title":"8. Quantify expression","text":"<p>Once we have explored the quality of our raw reads, we can move on to quantifying expression at the transcript level. The goal of this step is to identify from which transcript each of the reads originated from and the total number of reads associated with each transcript.</p> <p>Quantification from BAM files is the traditional method of estimating gene expression levels. It involves aligning reads to a reference genome using tools like Bowtie, STAR, or HISAT2, and then counting the number of reads that map to each gene or transcript. This process relies on the generation of a BAM (Binary Alignment/Map) file, which records the alignment information for each read. Quantification tools like featureCounts or HTSeq then process the BAM file to count reads that align to each annotated gene.</p> <p>Pseudoaligment tools such as Kallisto and Salmon they perform pseudoalignment and quantification in the same step by quickly mapping reads to a set of reference transcripts. This is done using an indexing strategy that efficiently assigns reads to potential transcript sources. Pseudoquantification is particularly fast and memory-efficient, making it ideal for large-scale transcriptome studies. It provides accurate estimates of transcript abundance, even in the presence of complex transcript structures.</p> <p>In this course, we will use the expression estimates, often referred to as 'pseudocounts', obtained from Salmon as the starting point for the differential gene expression analysis.</p> <p> </p>"},{"location":"04a_preprocessing.html#9-aggregation-of-quality-control-checks","title":"9. Aggregation of quality control checks","text":"<p>Throughout the workflow we have performed various steps of quality checks on our data. You will need to do this for every sample in your dataset, making sure these metrics are consistent across the samples for a given experiment. Outlier samples should be flagged for further investigation and potential removal.</p> <p>Manually tracking these metrics and browsing through multiple HTML reports (FastQC, Qualimap) and log files (Salmon, STAR) for each sample is tedious and prone to errors. MultiQC is a tool which aggregates results from several tools and generates a single HTML report with plots to visualize and compare various QC metrics between the samples. Assessment of the QC metrics may result in the removal of samples before proceeding to the next step, if necessary.</p> <p>Once the QC has been performed on all the samples, we are ready to get started with Differential Gene Expression analysis with DESeq2!</p> <p> </p> <p>This lesson was originally developed by members of the teaching team at the Harvard Chan Bioinformatics Core (Meeta Mistry, Radhika Khetani and Mary Piper) (HBC).</p>"},{"location":"04b_pipelines.html","title":"nf-core pipelines","text":""},{"location":"04b_pipelines.html#automating-your-workflow-nextflow-and-nf-core-pipelines","title":"Automating your workflow: Nextflow and nf-core pipelines","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: X minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Understand what is a pipeline/workflow and the Nextflow language.</li> <li>Learn about existing automated workflows from the bioinformatics community.</li> <li>Learn how to use the nf-core pipeline for bulk RNAseq analysis.</li> </ol>"},{"location":"04b_pipelines.html#workflows-and-pipelines","title":"Workflows and pipelines","text":"<p>A pipeline consists of a chain of processing elements (processes, threads, coroutines, functions, etc.), arranged so that the output of each element is the input of the next; the name is by analogy to a physical pipeline. Narrowly speaking, a pipeline is linear and one-directional, though sometimes the term is applied to more general flows. For example, a primarily one-directional pipeline may have some communication in the other direction, known as a return channel or backchannel, or a pipeline may be fully bi-directional. Flows with one-directional tree and directed acyclic graph topologies behave similarly to (linear) pipelines \u2013 the lack of cycles makes them simple \u2013 and thus may be loosely referred to as \"pipelines\".</p> <p>In our case, a \"preprocessing\" pipeline consists on concatenating all the processes explained in the previous lesson so that we have one continuous workflow from raw sequencing reads to a count matrix. For example, the RNASeq pipeline developed by the nf-core community (see below). </p> <p> nf-core/rnaseq pipeline metro schematic. </p> <p>As you can see in the image above, each process, such as read trimming, QC, alignment, etc, are connected to each other. A workflow created in this way is ideal to reproduce analysis and makes the task of analysing RNAseq data much much easier. </p>"},{"location":"04b_pipelines.html#nextflow-pipelines","title":"Nextflow pipelines","text":"<p>Nextflow is a bioinformatics workflow manager that enables the development of portable and reproducible workflows. It supports deploying workflows on a variety of execution platforms including local, HPC schedulers, AWS Batch, Google Cloud Life Sciences, and Kubernetes. Additionally, it provides support for manage your workflow dependencies through built-in support for Conda, Spack, Docker, Podman, Singularity, Modules, and more.</p> <p>With the rise of big data, techniques to analyse and run experiments on large datasets are increasingly necessary. Parallelization and distributed computing are the best ways to tackle this problem, but the tools commonly available to the bioinformatics community often lack good support for these techniques, or provide a model that fits badly with the specific requirements in the bioinformatics domain and, most of the time, require the knowledge of complex tools or low-level APIs.</p> <p>Nextflow framework is based on the dataflow programming model, which greatly simplifies writing parallel and distributed pipelines without adding unnecessary complexity and letting you concentrate on the flow of data, i.e. the functional logic of the application/algorithm.</p> <p>It doesn't aim to be another pipeline scripting language yet, but it is built around the idea that the Linux platform is the lingua franca of data science, since it provides many simple command line and scripting tools, which by themselves are powerful, but when chained together facilitate complex data manipulations.</p> <p>In practice, this means that a Nextflow script is defined by composing many different processes. Each process can execute a given bioinformatics tool or scripting language, to which is added the ability to coordinate and synchronize the processes execution by simply specifying their inputs and outputs.</p>"},{"location":"04b_pipelines.html#features","title":"Features","text":"<ul> <li>Fast prototyping: Nextflow allows you to write a computational pipeline by making it simpler to put together many different tasks.      You may reuse your existing scripts and tools and you don't need to learn a new language or API to start using it.</li> <li>Reproducibility: Nextflow supports Docker and Singularity containers technology.      This, along with the integration of the GitHub code sharing platform, allows you to write self-contained pipelines, manage versions and to rapidly reproduce any former configuration.</li> <li>Portable: Nextflow provides an abstraction layer between your pipeline's logic and the execution layer, so that it can be executed on multiple platforms without it changing.     It provides out of the box executors for GridEngine, SLURM, LSF, PBS, Moab and HTCondor batch schedulers and for Kubernetes, Amazon AWS, Google Cloud and Microsoft Azure platforms.</li> <li>Unified parallelism: Nextflow is based on the dataflow programming model which greatly simplifies writing complex distributed pipelines.     Parallelisation is implicitly defined by the processes input and output declarations. The resulting applications are inherently parallel and can scale-up or scale-out, transparently, without having to adapt to a specific platform architecture.</li> <li>Continuous checkpoints: All the intermediate results produced during the pipeline execution are automatically tracked.     This allows you to resume its execution, from the last successfully executed step, no matter what the reason was for it stopping.</li> </ul>"},{"location":"04b_pipelines.html#the-nf-core-project","title":"The nf-core project","text":"<p>The nf-core project is a community effort to collect a curated set of analysis pipelines built using Nextflow, an incredibly powerful and flexible workflow language. This means that all the tools and steps used in your RNAseq workflow can be automated and easily reproduced by other researchers if necessary. In addition, if you use any of the nf-core pipelines, you will be sure that all the necessary tools are available to you in any computer platform (Cloud computing, HPC or your personal computer).</p> <p> nf-core/rnaseq pipeline metro schematic. </p> <p>The RNAseq pipeline enables using many different tools, such as STAR, RSEM, HISAT2 or Salmon, and allows quantification of gene/isoform counts and provides extensive quality control checks at each step of the workflow. We encourage your to take a look at the pipeline and its documentation if you need to preprocess your RNAseq reads from stratch, as well as checkout this introductory video.</p> <p></p>"},{"location":"04b_pipelines.html#nf-corernaseq-usage-for-version-3112","title":"nf-core/rnaseq: Usage for version 3.11.2","text":"<p>In this section, we will see some of the most important arguments that the pipeline uses to run a RNAseq preprocessing workflow. There are many more options for advanced users and we really encourage you to check them out at the official webpage. Below you will find the arguments we will use for our own data.</p>"},{"location":"04b_pipelines.html#running-the-pipeline","title":"Running the pipeline","text":"<p>The typical command for running the pipeline is as follows:</p> <pre><code>nextflow run nf-core/rnaseq --input samplesheet.csv --outdir &lt;OUTDIR&gt; --genome GRCh37 -profile docker\n</code></pre> <p>This will launch the pipeline with the <code>docker</code> configuration profile. See below for more information about profiles.</p> <p>Note that the pipeline will create the following files in your working directory:</p> <pre><code>work            # Directory containing the nextflow working files\nresults         # Finished results (configurable, see below)\n.nextflow_log   # Log file from Nextflow\n# Other nextflow hidden files, eg. history of pipeline runs and old logs.\n</code></pre> <p>Info</p> <ul> <li>Options with a single hyphen are part of Nextflo, i.e. <code>-profile</code>.</li> <li>Pipeline specific parameters use a double-hyphen, i.e. <code>--input</code>.</li> </ul>"},{"location":"04b_pipelines.html#core-nextflow-arguments","title":"Core Nextflow arguments","text":""},{"location":"04b_pipelines.html#-work-dir","title":"<code>-work-dir</code>","text":"<p>Use this parameter to choose a path where the <code>work</code> folder, which containing all the intermediary files from the pipeline, should be saved.</p>"},{"location":"04b_pipelines.html#-profile","title":"<code>-profile</code>","text":"<p>Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.</p> <p>Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Conda) - see below. When using Biocontainers, most of these software packaging methods pull Docker containers from quay.io e.g FastQC except for Singularity which directly downloads Singularity images via https hosted by the Galaxy project and Conda which downloads and installs software locally from Bioconda.</p> <p>Tip</p> <p>It is highly recommended to use Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported.</p> <p>The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.</p> <p>Note that multiple profiles can be loaded, for example: <code>-profile test,docker</code> - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.</p> <p>If <code>-profile</code> is not specified, the pipeline will run locally and expect all software to be installed and available on the <code>PATH</code>. This is not recommended.</p> <ul> <li><code>docker</code><ul> <li>A generic configuration profile to be used with Docker</li> </ul> </li> <li><code>singularity</code><ul> <li>A generic configuration profile to be used with Singularity</li> </ul> </li> <li><code>podman</code><ul> <li>A generic configuration profile to be used with Podman</li> </ul> </li> <li><code>shifter</code><ul> <li>A generic configuration profile to be used with Shifter</li> </ul> </li> <li><code>charliecloud</code><ul> <li>A generic configuration profile to be used with Charliecloud</li> </ul> </li> <li><code>conda</code><ul> <li>A generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter or Charliecloud.</li> </ul> </li> <li><code>test</code><ul> <li>A profile with a complete configuration for automated testing</li> <li>Includes links to test data so needs no other parameters</li> </ul> </li> </ul>"},{"location":"04b_pipelines.html#-name","title":"<code>-name</code>","text":"<p>Use this parameter to give a unique name to the run. This name cannot be used again for another run in the same folder. This is very useful to track different runs since otherwise Nextflow will assign a random unique name to the run.</p>"},{"location":"04b_pipelines.html#-resume","title":"<code>-resume</code>","text":"<p>Specify this when restarting a pipeline. Nextflow will used cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously.</p> <p>You can also supply a run name to resume a specific run: <code>-resume [run-name]</code>. Use the <code>nextflow log</code> command to show previous run names.</p>"},{"location":"04b_pipelines.html#-r","title":"<code>-r</code>","text":"<p>It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since.</p> <p>First, go to the nf-core/rnaseq releases page and find the latest version number (numeric only), e.g., <code>1.3.1</code>. Then specify this when running the pipeline with <code>-r</code> (one hyphen), e.g., <code>-r 1.3.1</code>.</p> <p>This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future.</p>"},{"location":"04b_pipelines.html#rnaseq-pipeline-arguments","title":"RNAseq pipeline arguments","text":""},{"location":"04b_pipelines.html#samplesheet-input","title":"Samplesheet input","text":"<p>You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 4 columns, and a header row as shown in the examples below.</p> <pre><code>--input '[path to samplesheet file]'\n</code></pre> <p>Multiple runs of the same sample</p> <p>The <code>sample</code> identifiers have to be the same when you have re-sequenced the same sample more than once e.g. to increase sequencing depth. The pipeline will concatenate the raw reads before performing any downstream analysis. Below is an example for the same sample sequenced across 3 lanes:</p> <pre><code>sample,fastq_1,fastq_2,strandedness\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz,unstranded\nCONTROL_REP1,AEG588A1_S1_L003_R1_001.fastq.gz,AEG588A1_S1_L003_R2_001.fastq.gz,unstranded\nCONTROL_REP1,AEG588A1_S1_L004_R1_001.fastq.gz,AEG588A1_S1_L004_R2_001.fastq.gz,unstranded\n</code></pre> <p>Full samplesheet</p> <p>The pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. The samplesheet can have as many columns as you desire, however, there is a strict requirement for the first 4 columns to match those defined in the table below.</p> <p>A final samplesheet file consisting of both single- and paired-end data may look something like the one below. This is for 6 samples, where <code>TREATMENT_REP3</code> has been sequenced twice.</p> <pre><code>sample,fastq_1,fastq_2,strandedness\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz,forward\nCONTROL_REP2,AEG588A2_S2_L002_R1_001.fastq.gz,AEG588A2_S2_L002_R2_001.fastq.gz,forward\nCONTROL_REP3,AEG588A3_S3_L002_R1_001.fastq.gz,AEG588A3_S3_L002_R2_001.fastq.gz,forward\nTREATMENT_REP1,AEG588A4_S4_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP2,AEG588A5_S5_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP3,AEG588A6_S6_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP3,AEG588A6_S6_L004_R1_001.fastq.gz,,reverse\n</code></pre> Column Description <code>sample</code> Custom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores (<code>_</code>). <code>fastq_1</code> Full path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <code>fastq_2</code> Full path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <code>strandedness</code> Sample strand-specificity. Must be one of <code>unstranded</code>, <code>forward</code> or <code>reverse</code>. <p>Info</p> <p>The <code>group</code> and <code>replicate</code> columns were replaced with a single <code>sample</code> column as of v3.1 of the pipeline. The <code>sample</code> column is essentially a concatenation of the <code>group</code> and <code>replicate</code> columns, however it now also offers more flexibility in instances where replicate information is not required e.g. when sequencing clinical samples. If all values of <code>sample</code> have the same number of underscores, fields defined by these underscore-separated names may be used in the PCA plots produced by the pipeline, to regain the ability to represent different groupings.</p>"},{"location":"04b_pipelines.html#results-folder","title":"Results folder","text":"<p>The output directory where the results of the pipeline will be saved.</p> <pre><code>--outdir '[path to output]'\n</code></pre>"},{"location":"04b_pipelines.html#alignment-options","title":"Alignment options","text":"<p>By default, the pipeline uses STAR (i.e. <code>--aligner star_salmon</code>) to map the raw FastQ reads to the reference genome, project the alignments onto the transcriptome and to perform the downstream BAM-level quantification with Salmon. STAR is fast but requires a lot of memory to run, typically around 38GB for the Human GRCh37 reference genome. Since the RSEM (i.e. <code>--aligner star_rsem</code>) workflow in the pipeline also uses STAR you should use the HISAT2 aligner (i.e. <code>--aligner hisat2</code>) if you have memory limitations.</p> <p>You also have the option to pseudo-align and quantify your data with Salmon by providing the <code>--pseudo_aligner salmon</code> parameter. Salmon will then be run in addition to the standard alignment workflow defined by <code>--aligner</code>, mainly because it allows you to obtain QC metrics with respect to the genomic alignments. However, you can provide the <code>--skip_alignment</code> parameter if you would like to run Salmon in isolation.</p> <p>Two additional parameters <code>--extra_star_align_args</code> and <code>--extra_salmon_quant_args</code> were added in v3.10 of the pipeline that allow you to append any custom parameters to the STAR align and Salmon quant commands, respectively. Note, the <code>--seqBias</code> and <code>--gcBias</code> are not provided to Salmon quant by default so you can provide these via <code>--extra_salmon_quant_args '--seqBias --gcBias'</code> if required.</p>"},{"location":"04b_pipelines.html#reference-genome-files","title":"Reference genome files","text":"<p>The minimum reference genome requirements are a FASTA and GTF file, all other files required to run the pipeline can be generated from these files. However, it is more storage and compute friendly if you are able to re-use reference genome files as efficiently as possible. It is recommended to use the <code>--save_reference</code> parameter if you are using the pipeline to build new indices (e.g. those unavailable on AWS iGenomes) so that you can save them somewhere locally. The index building step can be quite a time-consuming process and it permits their reuse for future runs of the pipeline to save disk space. You can then either provide the appropriate reference genome files on the command-line via the appropriate parameters (e.g. <code>--star_index '/path/to/STAR/index/'</code>) or via a custom config file.</p> <ul> <li>If <code>--genome</code> is provided then the FASTA and GTF files (and existing indices) will be automatically obtained from AWS-iGenomes unless these have already been downloaded locally in the path specified by <code>--igenomes_base</code>.</li> <li>If <code>--gff</code> is provided as input then this will be converted to a GTF file, or the latter will be used if both are provided.</li> <li>If <code>--gene_bed</code> is not provided then it will be generated from the GTF file.</li> <li>If <code>--additional_fasta</code> is provided then the features in this file (e.g. ERCC spike-ins) will be automatically concatenated onto both the reference FASTA file as well as the GTF annotation before building the appropriate indices.</li> </ul> <p>When using <code>--aligner star_rsem</code>, both the STAR and RSEM indices should be present in the path specified by <code>--rsem_index</code> (see #568)</p> <p>Note</p> <p>Compressed reference files are also supported by the pipeline i.e. standard files with the <code>.gz</code> extension and indices folders with the <code>tar.gz</code> extension.</p>"},{"location":"04b_pipelines.html#process-skipping-options","title":"Process skipping options","text":"<p>There are several options to skip various steps within the workflow.</p> <ul> <li><code>--skip_bigwig</code>: Skip bigWig file creation</li> <li><code>--skip_stringtie</code>: Skip StringTie.</li> <li><code>--skip_fastqc</code>: Skip FastQC.</li> <li><code>--skip_preseq</code>: Skip Preseq.</li> <li><code>--skip_dupradar</code>: Skip dupRadar.</li> <li><code>--skip_qualimap</code>: Skip Qualimap.</li> <li><code>--skip_rseqc</code>: Skip RSeQC.</li> <li><code>--skip_biotype_qc</code>: Skip additional featureCounts process for biotype QC.</li> <li><code>--skip_deseq2_qc</code>: Skip DESeq2 PCA and heatmap plotting.</li> <li><code>--skip_multiqc</code>: Skip MultiQC.</li> <li><code>--skip_qc</code>: Skip all QC steps except for MultiQC.</li> </ul>"},{"location":"04b_pipelines.html#understanding-the-results-folder","title":"Understanding the results folder","text":"<p>The pipeline will save everything inside the <code>--outdir</code> folder. Inside it you will find different results. In this section we will go through the most relevant results for this workshop. If you are interested in the full documentation, visit the nf-core rnaseq output docs.</p>"},{"location":"04b_pipelines.html#1-pipeline_info","title":"1. <code>pipeline_info</code>","text":"<p>First, we will check the <code>pipeline_info</code> folder. Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.</p> <p><code>pipeline_info/</code></p> <ul> <li>Reports generated by Nextflow: <code>execution_report.html</code>, <code>execution_timeline.html</code>, <code>execution_trace.txt</code> and <code>pipeline_dag.dot</code>/<code>pipeline_dag.svg</code>.</li> <li>Reports generated by the pipeline: <code>pipeline_report.html</code>, <code>pipeline_report.txt</code> and <code>software_versions.yml</code>. The <code>pipeline_report*</code> files will only be present if the <code>--email</code> / <code>--email_on_fail</code> parameter's are used when running the pipeline.</li> <li>Reformatted samplesheet files used as input to the pipeline: <code>samplesheet.valid.csv</code>.</li> </ul>"},{"location":"04b_pipelines.html#2-genome","title":"2. <code>genome</code>","text":"<p>A number of genome-specific files are generated by the pipeline because they are required for the downstream processing of the results. If the <code>--save_reference</code> parameter is provided then these will be saved in the <code>genome/</code> directory. It is recommended to use the <code>--save_reference</code> parameter if you are using the pipeline to build new indices so that you can save them somewhere locally. The index building step can be quite a time-consuming process and it permits their reuse for future runs of the pipeline to save disk space.</p> <p>Info</p> <p>If you have not selected <code>--save_reference</code>, you will instead get a README.txt file containing information about the reference that was used for the run.</p> <p><code>genome/</code></p> <ul> <li><code>*.fa</code>, <code>*.gtf</code>, <code>*.gff</code>, <code>*.bed</code>, <code>.tsv</code>: If the <code>--save_reference</code> parameter is provided then all of the genome reference files will be placed in this directory</li> </ul> <p><code>genome/index/</code></p> <ul> <li><code>star/</code>: Directory containing STAR indices.</li> <li><code>hisat2/</code>: Directory containing HISAT2 indices.</li> <li><code>rsem/</code>: Directory containing STAR and RSEM indices.</li> <li><code>salmon/</code>: Directory containing Salmon indices.</li> </ul>"},{"location":"04b_pipelines.html#3-multiqc","title":"3. <code>multiqc</code>","text":"<p>Results generated by MultiQC collate pipeline QC from supported tools i.e. FastQC, Cutadapt, SortMeRNA, STAR, RSEM, HISAT2, Salmon, SAMtools, Picard, RSeQC, Qualimap, Preseq and featureCounts. Additionally, various custom content has been added to the report to assess the output of dupRadar, DESeq2 and featureCounts biotypes, and to highlight samples failing a mimimum mapping threshold or those that failed to match the strand-specificity provided in the input samplesheet. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability.</p> <p><code>multiqc/</code></p> <ul> <li><code>multiqc_report.html</code>: a standalone HTML file that can be viewed in your web browser.</li> <li><code>multiqc_data/</code>: directory containing parsed statistics from the different tools used in the pipeline.</li> <li><code>multiqc_plots/</code>: directory containing individual plots from the different tools used in the pipeline.</li> </ul>"},{"location":"04b_pipelines.html#4-fastqc","title":"4. <code>fastqc</code>","text":"<p>The FastQC plots in this directory are generated relative to the raw, input reads. They may contain adapter sequence and regions of low quality.</p> <p><code>fastqc/</code></p> <ul> <li><code>*_fastqc.html</code>: FastQC report containing quality metrics.</li> <li><code>*_fastqc.zip</code>: Zip archive containing the FastQC report, tab-delimited data file and plot images.</li> </ul>"},{"location":"04b_pipelines.html#5-trimgalore","title":"5. <code>trimgalore</code>","text":"<p>In this folder you will find your trimmed and filtered fastq files from TrimGalore, including its fastqc results!</p> <p><code>trimgalore/</code></p> <ul> <li><code>*.fq.gz</code>: If <code>--save_trimmed</code> is specified, FastQ files after adapter trimming will be placed in this directory.</li> <li><code>*_trimming_report.txt</code>: Log file generated by Trim Galore!.</li> </ul> <p><code>trimgalore/fastqc/</code></p> <ul> <li><code>*_fastqc.html</code>: FastQC report containing quality metrics for read 1 (and read2 if paired-end) after adapter trimming.</li> <li><code>*_fastqc.zip</code>: Zip archive containing the FastQC report, tab-delimited data file and plot images.</li> </ul>"},{"location":"04b_pipelines.html#6-aligner","title":"6. <code>aligner</code>","text":"<p>Depending on the aligner that you use, this folder may change its contents and name. Generally, here you can find the aligned reads in <code>.bam</code> format, samtool stats, duplicated stats and different QC tools related to mapped reads.</p> <p>Also, depending on the <code>--aligner</code> option you can either find the quantification results from either salmon (pseudoquantification) or rsem (traditional quantification, i.e., a count matrix)</p> <p>From star_salmon</p> <p><code>star_salmon/</code></p> <ul> <li><code>*.Aligned.out.bam</code>: If <code>--save_align_intermeds</code> is specified the original BAM file containing read alignments to the reference genome will be placed in this directory.</li> </ul> <p><code>star_salmon/log/</code></p> <ul> <li><code>*.SJ.out.tab</code>: File containing filtered splice junctions detected after mapping the reads.</li> <li><code>*.Log.final.out</code>: STAR alignment report containing the mapping results summary.</li> <li><code>*.Log.out</code> and <code>*.Log.progress.out</code>: STAR log files containing detailed information about the run. Typically only useful for debugging purposes.</li> </ul> <p><code>star_salmon/salmon/</code></p> <ul> <li><code>salmon.merged.gene_counts.tsv</code>: Matrix of gene-level raw counts across all samples.</li> <li><code>salmon.merged.gene_tpm.tsv</code>: Matrix of gene-level TPM values across all samples.</li> <li><code>salmon.merged.gene_counts.rds</code>: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (<code>abundance</code>), estimated counts (<code>counts</code>) and transcript length (<code>length</code>) in the assays slot for genes.</li> <li><code>salmon.merged.gene_counts_scaled.tsv</code>: Matrix of gene-level scaled counts across all samples.</li> <li><code>salmon.merged.gene_counts_scaled.rds</code>: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (<code>abundance</code>), estimated counts (<code>counts</code>) and transcript length (<code>length</code>) in the assays slot for genes.</li> <li><code>salmon.merged.gene_counts_length_scaled.tsv</code>: Matrix of gene-level length-scaled counts across all samples.</li> <li><code>salmon.merged.gene_counts_length_scaled.rds</code>: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (<code>abundance</code>), estimated counts (<code>counts</code>) and transcript length (<code>length</code>) in the assays slot for genes.</li> <li><code>salmon.merged.transcript_counts.tsv</code>: Matrix of isoform-level raw counts across all samples.</li> <li><code>salmon.merged.transcript_tpm.tsv</code>: Matrix of isoform-level TPM values across all samples.</li> <li><code>salmon.merged.transcript_counts.rds</code>: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (<code>abundance</code>), estimated counts (<code>counts</code>) and transcript length (<code>length</code>) in the assays slot for transcripts.</li> <li><code>salmon_tx2gene.tsv</code>: Tab-delimited file containing gene to transcripts ids mappings.</li> </ul> <p><code>star_salmon/salmon/&lt;SAMPLE&gt;/</code></p> <ul> <li><code>logs/</code>: Contains the file <code>salmon_quant.log</code> giving a record of Salmon's quantification.</li> <li><code>quant.genes.sf</code>: Salmon gene-level quantification of the sample, including feature length, effective length, TPM, and number of reads.</li> <li><code>quant.sf</code>: Salmon transcript-level quantification of the sample, including feature length, effective length, TPM, and number of reads.</li> </ul> <p>From star_rsem</p> <p><code>star_rsem/</code></p> <ul> <li><code>rsem.merged.gene_counts.tsv</code>: Matrix of gene-level raw counts across all samples.</li> <li><code>rsem.merged.gene_tpm.tsv</code>: Matrix of gene-level TPM values across all samples.</li> <li><code>rsem.merged.transcript_counts.tsv</code>: Matrix of isoform-level raw counts across all samples.</li> <li><code>rsem.merged.transcript_tpm.tsv</code>: Matrix of isoform-level TPM values across all samples.</li> <li><code>*.genes.results</code>: RSEM gene-level quantification results for each sample.</li> <li><code>*.isoforms.results</code>: RSEM isoform-level quantification results for each sample.</li> </ul> <p><code>star_rsem/&lt;SAMPLE&gt;.stat/</code></p> <ul> <li><code>*.cnt</code>, <code>*.model</code>, <code>*.theta</code>: RSEM counts and statistics for each sample.</li> </ul> <p><code>star_rsem/log/</code></p> <ul> <li><code>*.log</code>: STAR alignment report containing the mapping results summary.</li> </ul>"},{"location":"04b_pipelines.html#7-pseudoaligner","title":"7. <code>pseudoaligner</code>","text":"<p>This is the same output as the <code>star_salmon/salmon</code> folder.</p> <p>Parts of this lesson have been taken from Wikipedia, the Nextflow webpage and the nf-core project webpage.</p>"},{"location":"04c_preprocessing_setup.html","title":"Ucloud setup to run a preprocessing pipeline","text":""},{"location":"04c_preprocessing_setup.html#running-the-bulk-rnaseq-pipeline-in-ucloud","title":"Running the bulk RNAseq pipeline in uCloud","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: X minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Learn about the UCloud computing system.</li> <li>Learn how to submit a job and explore your results folders.</li> <li>Submit a nf-core RNAseq run on our data</li> </ol>"},{"location":"04c_preprocessing_setup.html#submit-a-job-in-ucloud","title":"Submit a job in Ucloud","text":"<p>Access Ucloud with your account and choose the project <code>Sandbox RNASeq Workshop</code> where you have been invited. Or ask to be invited to jose.romero@sund.ku.dk.</p> <p></p> <p>Click on <code>Apps</code> on the left-side menu, and search for the application <code>nf-core rnaseq</code> and click on it.</p> <p></p> <p>You will be met with a series of possible parameters to choose. However, we have prepared the parameters already for you! Just click on <code>Import parameters</code>:</p> <p></p> <p>Then, <code>Import file from UCloud</code>:</p> <p></p> <p>And select the <code>jobParameters_preprocessing.json</code> in:</p> <p><code>sandbox_bulkRNASeq</code> -&gt; <code>sequencing_data</code> -&gt; <code>Scripts</code> -&gt; <code>ucloud_preprocessing_setup</code> -&gt; <code>jobParameters_preprocessing.json</code></p> <p>Warning</p> <p>Make sure that the hard-drive icon says <code>sequencing_data</code>!!</p> <p>Otherwise, click on the down arrow (\u2228) icon and search for the folder.</p> <p></p> <p>You are ready to run the app! But first, take a look at the arguments used to run the job. We have given it a <code>Job name</code>, <code>Hours</code>, <code>Machine type</code> as well as an additional parameter <code>Interactive mode</code>. <code>Interactive mode</code> will allow us to follow the progress of the pipeline.</p> <p></p> <p>In addition, we have also selected the <code>sequencing_data</code> folder to have access to our sequencing reads in our job.</p> <p></p> <p>Now click on the button on the right column of the screen (<code>submit</code>) to start the job.</p> <p> </p> <p>Now, wait some time until the screen looks like the figure below. It usually takes a few minutes for everything to be ready. You can always come back to this screen from the left menu <code>Runs</code> on UCloud, so that you can add extra time or stop the app if you will not use it.</p> <p></p> <p>Now, click on <code>Open terminal</code> on the top right-hand side of the screen. You will start terminal session through your browser! Once inside the terminal, you will need to do one last thing before starting the pipeline:</p> <pre><code>tmux \n</code></pre> <p></p> <p>The <code>tmux</code> command will start a virtual command line session that is recoverable. This is very important because once we start the pipeline, we will lose the ability to track the progress if your computer loses connection or is in sleeping mode. You will know you are inside the tmux virtual session by looking at the bottom of the screen:</p> <p></p> Reconnect to tmux session <p>If you want to leave the tmux session, you can do so by pressing simultaneously <code>Ctrl</code> and <code>B</code> keys, and then press <code>D</code>. Then you can reconnect to the session using the command:</p> <pre><code>tmux attach -t 0\n</code></pre> <p>We can finally start the run! Type in the command:</p> <pre><code>bash 778339/Scripts/preprocessing_salmon.sh\n</code></pre> <p></p> <p>This will run a small bash script that will start the nf-core pipeline. It is usually a good idea to save the command that was used to run the pipeline! You should see now a prompt like this, which means that the pipeline started successfully!</p> <p></p> <p>Inside the <code>preprocessing_salmon.sh</code> script you will find:</p> <pre><code>cp /work/778339/raw_reads/samplesheet.csv /work/samplesheet.csv\ncp /work/778339/Scripts/ucloud_preprocessing_setup/nf-params_salmon.json /work/nf-params_salmon.json\ncd /work\n\nnextflow run nf-core/rnaseq -r 3.11.2 -params-file /work/nf-params_salmon.json -profile conda --max_cpus 8 --max_memory 40GB\n\n# Search for the last file created by the pipeline, the multiqc_report, recursively\nfile_path=$(find /work/preprocessing_results_salmon -name \"multiqc_report.html\" 2&gt;/dev/null)\n\n# Check if the file exists\nif [[ -n \"$file_path\" ]]; then\n    # Clean run if the pipeline is completed\n    rm -r /work/work\n    mv /work/nf-params_salmon.json /work/preprocessing_results_salmon/nf-params_salmon.json\n\nfi\n</code></pre> <p>You see that we have copied the <code>samplesheet.csv</code> to the working directory <code>/work</code>. This is because the paths inside the <code>samplesheet.csv</code> for the fastq files of our samples are relative to the <code>/work</code> folder! It is very important that the fastq paths inside this file matches properly to the paths inside your job!</p> <p>We have also copied the nf-params.json file with all the options used in the pipeline, so that you can find and replicate easily this run in the future. Finally, we remove the nextflow <code>work</code> directory if the pipeline completes successfully. this will save quite a bit if storage in the future, since the nextflow <code>work</code> directory will accumulate over runs.</p> <p>Then we are making sure that we are inside the correct folder before starting the job using <code>cd /work</code>. We will see in the section below the arguments we used to run the pipeline:</p>"},{"location":"04c_preprocessing_setup.html#understanding-the-pipeline-options","title":"Understanding the pipeline options","text":"<p>Let's divide the command into different sections. First we have:</p> <pre><code>nextflow run nf-core/rnaseq -r 3.11.2\n</code></pre> <p>While usually one would run an nf-core pipeline using <code>nextflow run nf-core/rnaseq</code> and fetch the pipeline remotely, UCloud has installed the pipelines locally. Specifically, we are using the version 3.11.2 by using the argument <code>-r 3.11.2</code>.</p> <p>Second, we have:</p> <pre><code>-params-file /work/778339/nf-params.json\n</code></pre> <p>The <code>-params-file</code> argument is another nextflow core argument that allows us to give the nf-core rnaseq pipeline arguments in a json file, instead of creating an excessively long command. Writing the parameters this way allows for better reproducibility, since you can reuse the file in the future. Inside this file, we find the following arguments:</p> <pre><code>{\n    \"input\": \"/work/samplesheet.csv\",\n    \"outdir\": \"/work/preprocessing_results_salmon\",\n    \"fasta\": \"/work/778339/genomic_resources/homo_sapiens/GRCh38/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz\",\n    \"gtf\": \"/work/778339/genomic_resources/homo_sapiens/GRCh38/Homo_sapiens.GRCh38.109.MODIFIED.gtf.gz\",\n    \"pseudo_aligner\": \"salmon\",\n    \"skip_stringtie\": true,\n    \"skip_rseqc\": true,\n    \"skip_preseq\": true,\n    \"skip_qualimap\": true,\n    \"skip_biotype_qc\": true,\n    \"skip_bigwig\": true,\n    \"skip_deseq2_qc\": true,\n    \"skip_bbsplit\": true,\n    \"skip_alignment\": true,\n    \"extra_salmon_quant_args\": \"--gcBias\"\n}\n</code></pre> <p><code>--input</code> parameter</p> <p>The <code>--input</code> parameter points to the <code>samplesheet.csv</code> file that contains all the info regarding our samples. The file looks like this:</p> sample fastq_1 fastq_2 strandedness condition control_3 778339/raw_reads/Control_3.fastq.gz nan unstranded control control_2 778339/raw_reads/Control_2.fastq.gz nan unstranded control control_1 778339/raw_reads/Control_1.fastq.gz nan unstranded control vampirium_3 778339/raw_reads/Vampirium_3.fastq.gz nan unstranded vampirum vampirium_2 778339/raw_reads/Vampirium_2.fastq.gz nan unstranded vampirium vampirium_1 778339/raw_reads/Vampirium_1.fastq.gz nan unstranded vampirium garlicum_3 778339/raw_reads/Garlicum_3.fastq.gz nan unstranded garlicum garlicum_2 778339/raw_reads/Garlicum_2.fastq.gz nan unstranded garlicum <p>As you can see, we have also provided an extra column called <code>condition</code> specifying the sample type. This will be very useful for our Differential Expression Analysis. In addition, you can also notice that we have a single-end RNAseq experiment in our hands. Finally, take a note at the fastq paths that we have provided! They all point to where the files are located inside our job!</p> <p><code>--outdir</code> parameter</p> <p>The <code>--outdir</code> parameter indicates where the results of the pipeline will be saved.</p> <p><code>--fasta</code> parameter</p> <p>Path to FASTA reference genome file.</p> <p><code>--gtf</code> parameter</p> <p>Path to GTF annotation file that contains genomic region information.</p> <p><code>--pseudo_aligner</code> argument</p> <p>The <code>--pseudo_aligner</code> argument indicates that we want to use salmon to quantify transcription levels.</p> <p>Finally, we are skipping several QC and extra steps that we did not explain in the previous lesson. Do not worry if you cannot manage to run the pipeline or you do not have the time, we have prepared a backup folder that contains the results from a traditional alignment + pseudoquantification for you to freely explore! (More about that below).</p> <p>We can continue with the next argument:</p> <pre><code>-profile conda\n</code></pre> <p>Unfortunately, the UCloud implementation of the nf-core pipelines do not currently allow the use of docker or singularity, which are the recommended profile options. However, UCloud has made sure that there is a working conda environment ready to use!</p> <p>Then the last couple of arguments:</p> <pre><code>--max_cpus 8 --max_memory 40GB\n</code></pre> <p>These are nf-core specific arguments that indicates nextflow to only use as maximum the number of CPUs and RAM we have requested when we submitted the job. We are using 8 cores since it is what we requested in the submission page (e.g. if you submitted a job with 4 CPUs, this will be equal to 4). We are using slightly less RAM than we requested (48Gb) just in case there is a problem with memory overflow.</p>"},{"location":"04c_preprocessing_setup.html#restarting-a-failed-run","title":"Restarting a failed run","text":"<p>When running a nf-core pipelines for the first time, you might encounter some errors, for example, one of your files has an incorrect path, or a program failed to do its job.</p> <p>Failure</p> <pre><code>Error executing process &gt;\nCaused by:\n    Failed to create create conda environment\n</code></pre> <p></p> <p>Once you fix the error, it is possible to resume a pipeline instead of restarting the whole workflow. You can do this by adding the <code>-resume</code> argument to the nextflow command:</p> <pre><code>nextflow run nf-core/rnaseq -r 3.11.2 -params-file /work/778339/Scripts/nf-params.json -profile conda --max_cpus 8 --max_memory 40GB\u200b -resume\n</code></pre>"},{"location":"04c_preprocessing_setup.html#stopping-the-app","title":"Stopping the app","text":"<p>Once the pipeline is done, go on <code>Runs</code> in uCloud and stop it from using more resources than necessary! This will help to keep the courses running for other people.</p> <p></p>"},{"location":"04c_preprocessing_setup.html#saved-results","title":"Saved results","text":"<p>After finishing the job, everything that the pipeline has created will be saved in your own personal \"Jobs\" folder. Inside this folder there will be a subfolder called nf-core: rnaseq, which will contain all the jobs you have run with the nf-core app. Inside this folder, you will find the results folder named after the job name you gave when you submitted the job.</p> <ol> <li>Your material will be saved in a volume with your username, that you should be able to see under the menu <code>Files</code>.</li> </ol> <p></p> <ol> <li>Go to <code>Jobs</code> -&gt; <code>nf-core: rnaseq</code> -&gt; <code>job_name</code> -&gt; <code>preprocessing_results_salmon</code></li> </ol> <p></p> <p>Now you have access to the full results of your pipeline! As explained in the previous lesson, the nf-core rnaseq workflow will create a MultiQC report summarizing most of the steps into a single and beautiful html file that is interactive and explorable. In addition, there will be a folder with the results of the individual QC steps as well as the alignment and quantification results. Take your time and check it all out!</p>"},{"location":"05a_data_analysis_setup.html","title":"Ucloud setup for data analysis","text":""},{"location":"05a_data_analysis_setup.html#setup-for-teaching-in-ucloud","title":"Setup for teaching in uCloud","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 20 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Start a transcriptomics app job in Ucloud for the next lessons in data analysis</li> </ol>"},{"location":"05a_data_analysis_setup.html#submit-the-job-in-ucloud","title":"Submit the job in Ucloud","text":"<p>Access Ucloud with your account and choose the project <code>Sandbox RNASeq Workshop</code> where you have been invited.</p> <p></p> <p>Click on <code>Apps</code> on the left-side menu, and search for the application <code>Transcriptomics Sandbox</code> and click on it.</p> <p></p> <p>You will be met with a series of possible parameters to choose. However, we have prepared the parameters already for you! Just click on <code>Import parameters</code>:</p> <p></p> <p>Then, <code>Import file from UCloud</code>:</p> <p></p> <p>And select the <code>jobParameters.json</code> in:</p> <ul> <li><code>sandbox_bulkRNASeq</code> -&gt; <code>bulk_RNAseq_course</code> -&gt; <code>jobParameters.json</code></li> </ul> <p>Warning</p> <p>Make sure that the hard-drive icon says <code>sandbox_bulkRNASeq</code>!!</p> <p>Otherwise, click on the down arrow (\u2228) icon and search for the folder.</p> <p></p> <p>Let's take a look at the parameters we have chosen. We have given it a <code>Job name</code>, <code>Hours</code>, <code>Machine type</code> as well as a <code>Mandatory Parameter</code> <code>Select a module</code>. We have selected the module <code>Introduction to bulk RNAseq analysis in R</code>. This module will load the materials necessary to follow the next lessons. It will also contain a backup of the preprocessing results so that you may continue in case that your preprocessing did not work.</p> <p></p> <p>In order to add your own preprocessing results, go to <code>Select folders to use</code> and add the folder that contains the results of the pipeline. If you have not move them yet, they will be in your <code>Member Files</code>.</p> <p></p> <p>You are ready to run the app by clicking on the button on the right column of the screen (<code>submit</code>).</p> <p> </p> <p>Now, wait some time until the screen looks like the figure below. It usually takes a few minutes for everything to be ready and installed. You can always come back to this screen from the left menu Runs on uCloud, so that you can add extra time or stop the app if you will not use it.</p> <p></p> <p>Now, click on <code>open interface</code> on the top right-hand side of the screen. You will start Rstudio through your browser!</p> <p>On the lower right side of Rstudio, where you see the file explorer, there should be a folder <code>Intro_to_bulkRNAseq</code>. Here you will find the materials of the course. If you have added your own preprocessing results, they should also be there.</p> <p></p> <p>You are ready to start analysing your data!</p>"},{"location":"05a_data_analysis_setup.html#stopping-the-app","title":"Stopping the app","text":"<p>When you are done, go on <code>Runs</code> in uCloud, and choose your app if it is still running. Then you will be able to stop it from using resources.</p> <p></p>"},{"location":"05a_data_analysis_setup.html#saved-work","title":"Saved work","text":"<p>After running a first work session, everything that you have created, including the scripts and results of your analysis, will be saved in your own personal \"Jobs\" folder. Inside this folder there will be a subfolder called Transcriptomics Sandbox, which will contain all the jobs you have run with the Transcriptomics Sandbox app. Inside this folder, you will find your folder named after the job name you gave in the previous step.</p> <ol> <li>Your material will be saved in a volume with your username, that you should be able to see under the menu <code>Files</code>. </li> </ol> <p></p> <ol> <li>Go to <code>Jobs \u2192 Transcriptomics Sandbox \u2192 job_name \u2192 Intro_to_bulkRNAseq</code></li> </ol> <p></p>"},{"location":"05a_data_analysis_setup.html#restarting-the-rstudio-session","title":"Restarting the Rstudio session","text":"<p>If you want to keep working on your previous results, you can restart an Rstudio session following these steps:</p> <p>Click on <code>Apps</code> on the left-side menu, and look for the application <code>Transcriptomics Sandbox</code> and click on it.</p> <p></p> <p>You will be met again with a series of possible parameters to choose. You have to assign again the <code>Import parameters</code> file as before, or you can click on one of your previous parameters.</p> <p><code>sandbox_bulkRNASeq</code> -&gt; <code>bulk_RNAseq_course</code> -&gt; <code>jobParameters.json</code></p> <p></p> <p>In \"Select folders to use\", add the folder with the results of your previous job:</p> <p>Go to:</p> <p><code>Member Files: your_username</code> -&gt; <code>Jobs</code> -&gt; <code>Transcriptomics Sandbox</code> -&gt; <code>job_name</code> -&gt; <code>Intro_to_bulkRNAseq</code></p> <p>Then, click \"Use.\"</p> <p></p> <p>You are ready to run the app by clicking on the button on the right column of the screen (<code>submit</code>). After opening the Rstudio interface, you should be able to access the folder <code>Intro_to_bulkRNAseq</code>, where you will find your course notebooks and results from your previous work!</p>"},{"location":"05b_count_matrix.html","title":"The RNAseq count matrix","text":""},{"location":"05b_count_matrix.html#differential-gene-expression-dge-analysis-overview","title":"Differential gene expression (DGE) analysis overview","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 20 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Describe how to set up an RNA-seq project in R </li> <li>Describe RNA-seq data and the differential gene expression analysis workflow</li> <li>Load and create a count matrix from our preprocessing analysis using Salmon</li> <li>Explain why negative binomial distribution is used to model RNA-seq count data</li> </ol> <p>The goal of RNA-seq is often to perform differential expression testing to determine which genes are expressed at different levels between conditions. These genes can offer biological insight into the processes affected by the condition(s) of interest.</p> <p>To determine the expression levels of genes, our RNA-seq workflow followed the steps detailed in the image below.</p> <p></p> <p>All steps were performed using the nf-core RNAseq pipeline in our previous lesson. The differential expression analysis and any downstream functional analysis are generally performed in R using R packages specifically designed for the complex statistical analyses required to determine whether genes are differentially expressed.</p> <p>In the next few lessons, we will walk you through an end-to-end gene-level RNA-seq differential expression workflow using various R packages. We will start with the count matrix, do some exploratory data analysis for quality assessment and explore the relationship between samples. Next, we will perform differential expression analysis, and visually explore the results prior to performing downstream functional analysis.</p>"},{"location":"05b_count_matrix.html#setting-up","title":"Setting up","text":"<p>Before we get into the details of the analysis, let\"s get started by opening up RStudio and setting up a new project for this analysis.</p> <ol> <li>Go to the <code>File</code> menu and select <code>New Project</code>.</li> <li>In the <code>New Project</code> window, choose <code>Existing Directory</code>. Then, choose <code>Intro_to_bulkRNAseq</code> as your project working directory.</li> <li>The new project should automatically open in RStudio.</li> </ol> <p>To check whether or not you are in the correct working directory, use <code>getwd()</code>. The path <code>/work/Intro_to_bulkRNAseq</code> should be returned to you in the console. When finished your working directory should now look similar to this:</p> <p></p> <ul> <li>Inside the folder <code>Notebooks</code> you will find the scripts (in <code>Rmd</code> format) that we will follow during the sessions.</li> <li>In the folder <code>Results</code> you will save the results of your scripts, analysis and tests.</li> </ul> <p>To avoid copying the original dataset for each student (very inefficient) a backup of the preprocessing results is inside this folder <code>/work/Intro_to_bulkRNAseq/Data/</code>. You are also very welcome to use your own preprocessing results!</p> <p>Now you can open the first practical session: <code>05b_count_matrix.Rmd</code></p>"},{"location":"05b_count_matrix.html#loading-libraries","title":"Loading libraries","text":"<p>For this analysis we will be using several R packages, some which have been installed from CRAN and others from Bioconductor. To use these packages (and the functions contained within them), we need to load the libraries. Add the following to your script and don\"t forget to comment liberally!</p> <pre><code>library(tidyverse)\nlibrary(DESeq2)\nlibrary(tximport)\n\n# And with this last line of code, we set our working directory to the folder with this notebook.\n# This way, the relative paths will work without issues\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n</code></pre> <p>The directories of output from the mapping/quantification step of the workflow (Salmon) is the data that we will be using. These transcript abundance estimates, often referred to as \"pseudocounts\", will be the starting point for our differential gene expression analysis. The main output of Salmon is a <code>quant.sf</code> file, and we have one of these for each individual sample in our dataset.</p> <p>For the sake of reproducibility, we will be using the backup results from our preprocessing pipeline. You are welcome to use your own results!</p> <pre><code># Tabulated separated files can be opened using the read_table() function.\nread_table(\"/work/Intro_to_bulkRNAseq/Data/salmon/control_1/quant.sf\", ) %&gt;% head()\n</code></pre> <p>For each transcript that was assayed in the reference, we have:</p> <ol> <li>The transcript identifier</li> <li>The transcript length (in bp)</li> <li>The effective length (described in detail below)</li> <li>TPM (transcripts per million), which is computed using the effective length</li> <li>The estimated read count (\"pseudocount\")</li> </ol> <p>What exactly is the effective length?</p> <p>The sequence composition of a transcript affects how many reads are sampled from it. While two transcripts might be of identical actual length, depending on the sequence composition we are more likely to generate fragments from one versus the other. The transcript that has a higher likelihood of being sampled, will end up with the larger effective length. The effective length is transcript length which has been \"corrected\" to include factors due to sequence-specific and GC biases.</p> <p>We will be using the R Bioconductor package <code>tximport</code> to prepare the <code>quant.sf</code> files for DESeq2. The first thing we need to do is create a variable that contains the paths to each of our <code>quant.sf</code> files. Then we will add names to our quant files which will allow us to easily distinguish between samples in the final output matrix.</p> <p>We will use the <code>samplesheet.csv</code> file that we use to process our raw reads, since it already contains all the information we need to run our analysis.</p> <pre><code># Load metadata\nmeta &lt;- read_csv(\"/work/Intro_to_bulkRNAseq/Data/samplesheet.csv\")\n\n# View metadata\nmeta\n</code></pre> <p>Using the samples column, we can create all the paths needed:</p> <pre><code># Directory where salmon files are. You can change this path to the results of your own analysis\ndir &lt;- \"/work/Intro_to_bulkRNAseq/Data\"\n\n# List all directories containing quant.sf files using the samplename column of metadata\nfiles &lt;- file.path(dir,\"salmon\", meta$sample, \"quant.sf\")\n\n# Name the file list with the samplenames\nnames(files) &lt;- meta$sample\nfiles\n</code></pre> <p>Our Salmon files were generated with transcript sequences listed by Ensembl IDs, but <code>tximport</code> needs to know which genes these transcripts came from. We will use annotation table the that was created in our workflow, called <code>tx2gene.txt</code>.</p> <pre><code>tx2gene &lt;- read_table(\"/work/Intro_to_bulkRNAseq/Data/salmon/salmon_tx2gene.tsv\", col_names = c(\"transcript_ID\",\"gene_ID\",\"gene_symbol\"))\ntx2gene %&gt;% head()\n</code></pre> <p><code>tx2gene</code> is a three-column data frame linking transcript ID (column 1) to gene ID (column 2) to gene symbol (column 3). We will take the first two columns as input to <code>tximport</code>. The column names are not relevant, but the column order is (i.e transcript ID must be first).</p> <p>Now we are ready to run <code>tximport</code>. The <code>tximport()</code> function imports transcript-level estimates from various external software (e.g. Salmon, Kallisto) and summarizes to the gene-level (default) or outputs transcript-level matrices. There are optional arguments to use the abundance estimates as they appear in the <code>quant.sf</code> files or to calculate alternative values.</p> <p>For our analysis we need non-normalized or \"raw\" count estimates at the gene-level for performing DESeq2 analysis.</p> <p>Since the gene-level count matrix is a default (<code>txOut=FALSE</code>) there is only one additional argument for us to modify to specify how to obtain our \"raw\" count values. The options for <code>countsFromAbundance</code> are as follows:</p> <ul> <li><code>no</code> (default): This will take the values in TPM (as our scaled values) and NumReads (as our \"raw\" counts) columns, and collapse it down to the gene-level.</li> <li><code>scaledTPM</code>: This is taking the TPM scaled up to library size as our \"raw\" counts</li> <li><code>lengthScaledTPM</code>: This is used to generate the \"raw\" count table from the TPM (rather than summarizing the NumReads column). \"Raw\" count values are generated by using the TPM value x featureLength x library size. These represent quantities that are on the same scale as original counts, except no longer correlated with transcript length across samples. We will use this option for DESeq2 downstream analysis.</li> </ul> <p>An additional argument for <code>tximport</code>: When performing your own analysis you may find that the reference transcriptome file you obtain from Ensembl will have version numbers included on your identifiers (i.e ENSG00000265439.2). This will cause a discrepancy with the tx2gene file since the annotation databases don\"t usually contain version numbers (i.e ENSG00000265439). To get around this issue you can use the argument <code>ignoreTxVersion  = TRUE</code>. The logical value indicates whether to split the tx id on the \".\" character to remove version information, for easier matching.</p> <pre><code>txi &lt;- tximport(files, type=\"salmon\", tx2gene=tx2gene, countsFromAbundance = \"lengthScaledTPM\", ignoreTxVersion = TRUE)\n</code></pre>"},{"location":"05b_count_matrix.html#viewing-data","title":"Viewing data","text":"<p>The <code>txi</code> object is a simple list containing matrices of the abundance, counts, length. Another list element \"countsFromAbundance\" carries through the character argument used in the tximport call. The length matrix contains the average transcript length for each gene which can be used as an offset for gene-level analysis.</p> <pre><code>attributes(txi)\n</code></pre> <p>We will be using the <code>txi</code> object as is for input into DESeq2, but will save it until the next lesson. For now let\"s take a look at the count matrix. You will notice that there are decimal values, so let\"s round to the nearest whole number and convert it into a dataframe. We will save it to a variable called <code>data</code> that we can play with.</p> <pre><code># Look at the counts\ntxi$counts %&gt;% head()\n</code></pre> <pre><code># Write the counts to an object\ndata &lt;- txi$counts %&gt;% \n  round() %&gt;% \n  data.frame()\n</code></pre> <p>There are a lot of rows with no gene expression at all.</p> <pre><code>sum(rowSums(data) == 0)\n</code></pre> <p>Let's take them out!</p> <pre><code>keep &lt;- rowSums(data) &gt; 0\ndata &lt;- data[keep,]\n</code></pre>"},{"location":"05b_count_matrix.html#differential-gene-expression-analysis-overview","title":"Differential gene expression analysis overview","text":"<p>So, what does this count data actually represent? The count data used for differential expression analysis represents the number of sequence reads that originated from a particular gene. The higher the number of counts, the more reads associated with that gene, and the assumption that there was a higher level of expression of that gene in the sample.</p> <p></p> <p>With differential expression analysis, we are looking for genes that change in expression between two or more groups (defined in the metadata) - case vs control - correlation of expression with some variable or clinical outcome</p> <p>Why does it not work to identify differentially expressed gene by ranking the genes by how different they are between the two groups (based on fold change values)?</p> <p></p> <p>Genes that vary in expression level between groups of samples may do so solely as a consequence of the biological variable(s) of interest. However, this difference is often also related to extraneous effects, in fact, sometimes these effects exclusively account for the observed variation. The goal of differential expression analysis to determine the relative role of these effects, hence separating the \"interesting\" variance from the \"uninteresting\" variance.</p> <p></p> <p>Although the mean expression levels between sample groups may appear to be quite different, it is possible that the difference is not actually significant. This is illustrated for \"GeneA\" expression between \"untreated\" and \"treated\" groups in the figure below. The mean expression level of geneA for the \"treated\" group is twice as large as for the \"untreated\" group, but the variation between replicates indicates that this may not be a significant difference. We need to take into account the variation in the data (and where it might be coming from) when determining whether genes are differentially expressed.</p> <p></p> <p>Differential expression analysis is used to determine, for each gene, whether the differences in expression (counts) between groups is significant given the amount of variation observed within groups (replicates). To test for significance, we need an appropriate statistical model that accurately performs normalization (to account for differences in sequencing depth, etc.) and variance modeling (to account for few numbers of replicates and large dynamic expression range).</p>"},{"location":"05b_count_matrix.html#rna-seq-count-distribution","title":"RNA-seq count distribution","text":"<p>To determine the appropriate statistical model, we need information about the distribution of counts. To get an idea about how RNA-seq counts are distributed, let\"s plot the counts of all the samples:</p> <pre><code># Here we format the data into long format instead of wide format\npdata &lt;- data %&gt;% \n  gather(key = Sample, value = Count)\n\npdata\n</code></pre> <p>And we plot our count distribution using all our samples:</p> <pre><code>ggplot(pdata) +\n  geom_density(aes(x = Count, color = Sample)) +\n  xlab(\"Raw expression counts\") +\n  ylab(\"Number of genes\")\n</code></pre> <p>If we zoom in close to zero, we can see a large number of genes with counts close to zero:</p> <pre><code>ggplot(pdata) +\n  geom_density(aes(x = Count, color = Sample)) +\n  xlim(-5, 500)  +\n  xlab(\"Raw expression counts\") +\n  ylab(\"Number of genes\")\n</code></pre> <p>These images illustrate some common features of RNA-seq count data, including a low number of counts associated with a large proportion of genes, and a long right tail due to the lack of any upper limit for expression. Unlike microarray data, which has a dynamic range maximum limited due to when the probes max out, there is no limit of maximum expression for RNA-seq data. Due to the differences in these technologies, the statistical models used to fit the data are different between the two methods.</p> Note on microarray data distribution <p>The log intensities of the microarray data approximate a normal distribution. However, due to the different properties of the of RNA-seq count data, such as integer counts instead of continuous measurements and non-normally distributed data, the normal distribution does not accurately model RNA-seq counts. More info here.</p>"},{"location":"05b_count_matrix.html#modeling-count-data","title":"Modeling count data","text":"<p>RNAseq count data can be modeled using a Poisson distribution. this particular distribution is fitting for data where the number of cases is very large but the probability of an event occurring is very small. To give you an example, think of the lottery: many people buy lottery tickets (high number of cases), but only very few win (the probability of the event is small).</p> <p>With RNA-Seq data, a very large number of RNAs are represented and the probability of pulling out a particular transcript is very small. Thus, it would be an appropriate situation to use the Poisson distribution. However, a unique property of this distribution is that the mean == variance. Realistically, with RNA-Seq data there is always some biological variation present across the replicates (within a sample class). Genes with larger average expression levels will tend to have larger observed variances across replicates.</p> <p>The model that fits best, given this type of variability observed for replicates, is the Negative Binomial (NB) model. Essentially, the NB model is a good approximation for data where the mean \\&lt; variance, as is the case with RNA-Seq count data.</p> <p></p> <p>Note on technical replicates</p> <ul> <li>Biological replicates represent multiple samples (i.e. RNA from different mice) representing the same sample class</li> <li>Technical replicates represent the same sample (i.e. RNA from the same mouse) but with technical steps replicated</li> <li>Usually biological variance is much greater than technical variance, so we do not need to account for technical variance to identify biological differences in expression</li> <li>Don't spend money on technical replicates - biological replicates are much more useful</li> </ul> <p>Note on cell lines</p> <p>If you are using cell lines and are unsure whether or not you have prepared biological or technical replicates, take a look at this link. This is a useful resource in helping you determine how best to set up your in-vitro experiment.</p> How do I know if my data should be modeled using the Poisson distribution or Negative Binomial distribution? <p>If it's count data, it should fit the negative binomial, as discussed previously. However, it can be helpful to plot the mean versus the variance of your data. Remember for the Poisson model, mean = variance, but for NB, mean &lt; variance.</p> <p>Here we calculate the mean and the variance per gene for all columns and genes:</p> <pre><code>df &lt;- data %&gt;% \nrowwise() %&gt;% \nsummarise(mean_counts = mean(c_across(everything())), \n                        variance_counts = var(c_across(everything())))\n</code></pre> <p>Run the following code to plot the mean versus variance of each gene for our data:</p> <pre><code>ggplot(df) +\n  geom_point(aes(x=mean_counts, y=variance_counts)) + \n  geom_abline(intercept = 0, slope = 1, color=\"red\") +\n  scale_y_log10() +\n  scale_x_log10()\n</code></pre> <p></p> <p>Note that in the above figure, the variance across replicates tends to be greater than the mean (red line), especially for genes with large mean expression levels. This is a good indication that our data do not fit the Poisson distribution and we need to account for this increase in variance using the Negative Binomial model (i.e. Poisson will underestimate variability leading to an increase in false positive DE genes).</p>"},{"location":"05b_count_matrix.html#improving-mean-estimates-ie-reducing-variance-with-biological-replicates","title":"Improving mean estimates (i.e. reducing variance) with biological replicates","text":"<p>The variance or scatter tends to reduce as we increase the number of biological replicates (the distribution will approach the Poisson distribution with increasing numbers of replicates), since standard deviations of averages are smaller than standard deviations of individual observations. The value of additional replicates is that as you add more data (replicates), you get increasingly precise estimates of group means, and ultimately greater confidence in the ability to distinguish differences between sample classes (i.e. more DE genes).</p> <p>The figure below illustrates the relationship between sequencing depth and number of replicates on the number of differentially expressed genes identified (from Liu et al. (2013)):</p> <p></p> <p>Note that an increase in the number of replicates tends to return more DE genes than increasing the sequencing depth. Therefore, generally more replicates are better than higher sequencing depth, with the caveat that higher depth is required for detection of lowly expressed DE genes and for performing isoform-level differential expression. Generally, the minimum sequencing depth recommended is 20-30 million reads per sample, but we have seen good RNA-seq experiments with 10 million reads if there are a good number of replicates.</p> <p></p>"},{"location":"05b_count_matrix.html#differential-expression-analysis-workflow","title":"Differential expression analysis workflow","text":"<p>To model counts appropriately when performing a differential expression analysis, there are a number of software packages that have been developed for differential expression analysis of RNA-seq data. Even as new methods are continuously being developed a few tools are generally recommended as best practice, like DESeq2, EdgeR and Limma-Voom.</p> <p>Many studies describing comparisons between these methods show that while there is some agreement, there is also much variability between tools. Additionally, there is no one method that performs optimally under all conditions (Soneson and Dleorenzi, 2013, Corchete et al, 2020).</p> <p></p> <p></p> <p>We will be using DESeq2 for the DE analysis, and the analysis steps with DESeq2 are shown in the flowchart below in green. DESeq2 first normalizes the count data to account for differences in library sizes and RNA composition between samples. Then, we will use the normalized counts to make some plots for QC at the gene and sample level. The final step is to use the appropriate functions from the DESeq2 package to perform the differential expression analysis.</p> <p></p> <p>We will go in-depth into each of these steps in the following lessons, but additional details and helpful suggestions regarding DESeq2 can be found in the DESeq2 vignette. As you go through this workflow and questions arise, you can reference the vignette from within RStudio:</p> <pre><code>vignette(\"DESeq2\")\n</code></pre> <p>This is very convenient, as it provides a wealth of information at your fingertips! Be sure to use this as you need during the workshop.</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"05c_count_normalization.html","title":"Count normalization with DESeq2","text":""},{"location":"05c_count_normalization.html#normalization","title":"Normalization","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 40 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Explore different types of normalization methods</li> <li>Become familiar with the <code>DESeqDataSet</code> object</li> <li>Understand how to normalize counts using DESeq2</li> </ol> <p>The first step in the DE analysis workflow is count normalization, which is necessary to make accurate comparisons of gene expression between samples.</p> <p></p> <p>The counts of mapped reads for each gene is proportional to the expression of RNA (\"interesting\") in addition to many other factors (\"uninteresting\"). Normalization is the process of scaling raw count values to account for the \"uninteresting\" factors. In this way the expression levels are more comparable between and/or within samples.</p> <p>The main factors often considered during normalization are:</p> <ul> <li>Sequencing depth: Accounting for sequencing depth is necessary for comparison of gene expression between samples. In the example below, each gene appears to have doubled in expression in Sample A relative to Sample B, however this is a consequence of Sample A having double the sequencing depth.</li> </ul> <p></p> <p>Note</p> <p>In the figure above, each red rectangle represents a read aligned to a gene. Reads connected by dashed lines connect a read spanning an intron.</p> <ul> <li>Gene length: Accounting for gene length is necessary for comparing expression between different genes within the same sample. In the example, Gene 2 and Gene 3 have similar levels of expression, but the number of reads mapped to Gene 2 would be many more than the number mapped to Gene 3 because Gene 2 is longer.</li> </ul> <p></p> <ul> <li> <p>GC-content: Genomic features such as GC-content may result in a read count biases, as GC-rich and GC-poor fragments are under-represented in RNAseq experiments. This under-representation is attributed to the fact that fragments with high and low GC-content are not adequately amplified in a standard high throughput sequencing protocol and, subsequently, that the fragments are difficult to align (correctly) to reference genome, i.e. less unique, repeat regions, etc. (Benjamini &amp; Speed, 2012 and Risso et al, 2011).</p> </li> <li> <p>RNA composition: A few highly differentially expressed genes between samples, differences in the number of genes expressed between samples, or presence of contamination can skew some types of normalization methods. Accounting for RNA composition is recommended for accurate comparison of expression between samples, and is particularly important when performing differential expression analyses Anders &amp; Huber, 2010.</p> </li> </ul> <p>In the example, if we were to divide each sample by the total number of counts to normalize, the counts would be greatly skewed by the DE gene, which takes up most of the counts for Sample A, but not Sample B. Most other genes for Sample A would be divided by the larger number of total counts and appear to be less expressed than those same genes in Sample B.</p> <p></p> <p>Tip</p> <p>While normalization is essential for differential expression analyses, it is also necessary for exploratory data analysis, visualization of data, and whenever you are exploring or comparing counts between or within samples.</p>"},{"location":"05c_count_normalization.html#common-normalization-methods","title":"Common normalization methods","text":"<p>Several common normalization methods exist to account for these differences:</p> Normalization method Description Accounted factors Recommendations for use CPM (counts per million) counts scaled by total number of reads sequencing depth gene count comparisons between replicates of the same samplegroup; NOT for within sample comparisons or DE analysis TPM (transcripts per kilobase million) counts per length of transcript (kb) per million reads mapped sequencing depth and gene length gene count comparisons within a sample or between samples of the same sample group; NOT for DE analysis RPKM/FPKM (reads/fragments per kilobase of exon per million reads/fragments mapped) similar to TPM sequencing depth and gene length gene count comparisons between genes within a sample; NOT for between sample comparisons or DE analysis DESeq2\u2019s median of ratios counts divided by sample-specific size factors determined by median ratio of gene counts relative to geometric mean per gene sequencing depth and RNA composition gene count comparisons between samples and for DE analysis; NOT for within sample comparisons EdgeR\u2019s trimmed mean of M values (TMM) uses a weighted trimmed mean of the log expression ratios between samples sequencing depth, RNA composition gene count comparisons between samples and for DE analysis; NOT for within sample comparisons"},{"location":"05c_count_normalization.html#rpkmfpkm-not-recommended","title":"RPKM/FPKM (not recommended)","text":"<p>While TPM and RPKM/FPKM normalization methods both account for sequencing depth and gene length, RPKM/FPKM are not recommended. The reason is that the normalized count values output by the RPKM/FPKM method are not comparable between samples.</p> <p>Using RPKM/FPKM normalization, the total number of RPKM/FPKM normalized counts for each sample will be different. Therefore, you cannot compare the normalized counts for each gene equally between samples.</p> <p>RPKM-normalized counts table</p> gene sampleA sampleB XCR1 5.5 5.5 WASHC1 73.4 21.8 \u2026 \u2026 \u2026 Total RPKM-normalized counts 1,000,000 1,500,000 <p>For example, in the table above, SampleA has a greater proportion of counts associated with XCR1 (5.5/1,000,000) than does sampleB (5.5/1,500,000) even though the RPKM count values are the same. Therefore, we cannot directly compare the counts for XCR1 (or any other gene) between sampleA and sampleB because the total number of normalized counts are different between samples.</p>"},{"location":"05c_count_normalization.html#deseq2-normalized-counts-median-of-ratios-method","title":"DESeq2-normalized counts: Median of ratios method","text":"<p>Since tools for differential expression analysis are comparing the counts between sample groups for the same gene, gene length does not need to be accounted for by the tool. However, sequencing depth and RNA composition do need to be taken into account.</p> <p>To normalize for sequencing depth and RNA composition, DESeq2 uses the median of ratios method. On the user-end there is only one step, but on the back-end there are multiple steps involved, as described below.</p> <p>Note</p> <p>The steps below describe in detail some of the steps performed by DESeq2 when you run a single function to get DE genes. Basically, for a typical RNA-seq analysis, you would not run these steps individually.</p>"},{"location":"05c_count_normalization.html#step-1-creates-a-pseudo-reference-sample-row-wise-geometric-mean","title":"Step 1: creates a pseudo-reference sample (row-wise geometric mean)","text":"<p>For each gene, a pseudo-reference sample is created that is equal to the geometric mean across all samples.</p> gene sampleA sampleB pseudo-reference sample EF2A 1489 906 sqrt(1489 * 906) = 1161.5 ABCD1 22 13 sqrt(22 * 13) = 17.7 \u2026 \u2026 \u2026 \u2026"},{"location":"05c_count_normalization.html#step-2-calculates-ratio-of-each-sample-to-the-reference","title":"Step 2: calculates ratio of each sample to the reference","text":"<p>For every gene in a sample, the ratios (sample/ref) are calculated (as shown below). This is performed for each sample in the dataset. Since the majority of genes are not differentially expressed, the majority of genes in each sample should have similar ratios within the sample.</p> gene sampleA sampleB pseudo-reference sample ratio of sampleA/ref ratio of sampleB/ref EF2A 1489 906 1161.5 1489/1161.5 = 1.28 906/1161.5 = 0.78 ABCD1 22 13 16.9 22/16.9 = 1.30 13/16.9 = 0.77 MEFV 793 410 570.2 793/570.2 = 1.39 410/570.2 = 0.72 BAG1 76 42 56.5 76/56.5 = 1.35 42/56.5 = 0.74 MOV10 521 1196 883.7 521/883.7 = 0.590 1196/883.7 = 1.35 \u2026 \u2026 \u2026 \u2026"},{"location":"05c_count_normalization.html#step-3-calculate-the-normalization-factor-for-each-sample-size-factor","title":"Step 3: calculate the normalization factor for each sample (size factor)","text":"<p>The median value (column-wise for the above table) of all ratios for a given sample is taken as the normalization factor (size factor) for that sample, as calculated below. Notice that the differentially expressed genes should not affect the median value:</p> <p><code>normalization_factor_sampleA &lt;- median(c(1.28, 1.3, 1.39, 1.35, 0.59))</code></p> <p><code>normalization_factor_sampleB &lt;- median(c(0.78, 0.77, 0.72, 0.74, 1.35))</code></p> <p>The figure below illustrates the median value for the distribution of all gene ratios for a single sample (frequency is on the y-axis).</p> <p></p> <p>The median of ratios method assumes that not ALL genes are differentially expressed; therefore, the normalization factors should account for sequencing depth and RNA composition of the sample (large outlier genes will not represent the median ratio values). This method is robust to imbalance in up-/down-regulation and large numbers of differentially expressed genes.</p> <p>Warning</p> <p>Usually, these size factors are around 1, if you see large variations between samples it is important to take note since it might indicate the presence of extreme outliers.</p>"},{"location":"05c_count_normalization.html#step-4-calculate-the-normalized-count-values-using-the-normalization-factor","title":"Step 4: calculate the normalized count values using the normalization factor","text":"<p>This is performed by dividing each raw count value in a given sample by that sample's normalization factor to generate normalized count values. This is performed for all count values (every gene in every sample). For example, if the median ratio for SampleA was 1.3 and the median ratio for SampleB was 0.77, you could calculate normalized counts as follows:</p> <p>SampleA median ratio = 1.3</p> <p>SampleB median ratio = 0.77</p> <p>Raw Counts</p> gene sampleA sampleB EF2A 1489 906 ABCD1 22 13 \u2026 \u2026 \u2026 <p>Normalized Counts</p> gene sampleA sampleB EF2A 1489 / 1.3 = 1145.39 906 / 0.77 = 1176.62 ABCD1 22 / 1.3 = 16.92 13 / 0.77 = 16.88 \u2026 \u2026 \u2026 <p>Warning</p> <p>Please note that normalized count values are not whole numbers.</p> <p>Exercise 1</p> <p>Determine the normalized (median of ratios) counts for your gene of interest, PD1, given the raw counts and size factors below. </p> <p>NOTE: You will need to run the code below to generate the raw counts dataframe (PD1) and the size factor vector (size_factors), then use these objects to determine the normalized counts values:</p> <pre><code># Raw counts for PD1\nPD1 &lt;- t(c(21, 58, 17, 97, 83, 10)) %&gt;% \nas_tibble() %&gt;%\nrename_all(~paste0(\"Sample\", 1:6))\n\n\n# Size factors for each sample\nsize_factors &lt;- c(1.32, 0.70, 1.04, 1.27, 1.11, 0.85)\n</code></pre> Solution to Exercise 1 <p>Let's check first what is PD1</p> <pre><code>PD1\n</code></pre> <p>Since we have the size factors per sample, we only need to divide our PD1 counts by the size factors!</p> <pre><code>PD1/size_factors\n</code></pre>"},{"location":"05c_count_normalization.html#count-normalization-of-the-vampirium-dataset-using-deseq2","title":"Count normalization of the Vampirium dataset using DESeq2","text":"<p>Now that we know the theory of count normalization, we will normalize the counts for the Vampirium dataset using DESeq2. This requires a few steps:</p> <ol> <li>Ensure the row names of the metadata dataframe are present and in the same order as the column names of the counts dataframe.</li> <li>Create a <code>DESeqDataSet</code> object</li> <li>Generate the normalized counts</li> </ol>"},{"location":"05c_count_normalization.html#1-match-the-metadata-and-counts-data","title":"1. Match the metadata and counts data","text":"<p>We should always make sure that we have sample names that match between the two files, and that the samples are in the right order. DESeq2 will output an error if this is not the case. Since we built our <code>txi</code> object from our metadata, everything should be OK.</p> <pre><code>### Check that sample names match in both files\nall(colnames(txi$counts) %in% meta$sample)\nall(colnames(txi$counts) == meta$sample)\n</code></pre> <p>If your data did not match, you could use the <code>match()</code> function to rearrange them to be matching. <code>match()</code> function will take two arguments and find in which order the indexes of the second argument match the first argument.</p> <pre><code>a &lt;- c(\"a\",\"b\",\"c\")\nb &lt;- c(\"b\",\"c\",\"a\")\n\nreorder &lt;- match(a,b)\nreorder\n\nb[reorder]\n</code></pre> <p>Exercise 2</p> <p>Suppose we had sample names matching in the txi object and metadata file, but they were out of order. Write the line(s) of code required make the <code>meta_random</code> dataframe with rows ordered such that they were identical to the column names of the <code>txi</code>.</p> <pre><code># randomize metadata rownames\nmeta_random &lt;- meta[sample(1:nrow(meta)),]\n</code></pre> Solution to Exercise 2 <p>Let's check now meta_random order:</p> <pre><code>meta_random\n</code></pre> <p>We can see that it is all scrambled. We want the rows of <code>meta_random</code> to be the same order as the columns of the <code>txi@counts</code> object (which is not, as you can see below):</p> <pre><code>### Check that sample names match in both files\nall(colnames(txi$counts) %in% meta_random$sample) # are all samples in our metadata?\nall(colnames(txi$counts) == meta_random$sample) # are all samples in the same order?\n</code></pre> <p>Let's use the match function. First we find the order that <code>meta_random$sample</code> should be to match the columns of <code>txi@counts</code>:</p> <pre><code>reorder &lt;- match(colnames(txi$counts),meta_random$sample)\nreorder\n</code></pre> <p>Finally, we change the order of the rows of meta_random:</p> <pre><code>meta_random &lt;- meta_random[reorder,]\nmeta_random\n</code></pre> <p>And confirm:</p> <pre><code>all(colnames(txi$counts) == meta_random$sample) # are all samples in the same order?\n</code></pre>"},{"location":"05c_count_normalization.html#2-create-deseq2-object","title":"2. Create DESEq2 object","text":"<p>Bioconductor software packages often define and use a custom class within R for storing data (input data, intermediate data and also results). These custom data structures are similar to <code>lists</code> in that they can contain multiple different data types/structures within them. But, unlike lists they have pre-specified <code>data slots</code>, which hold specific types/classes of data. The data stored in these pre-specified slots can be accessed by using specific package-defined functions.</p> <p>Let's start by creating the <code>DESeqDataSet</code> object, and then we can talk a bit more about what is stored inside it. To create the object, we will need the txi object and the metadata table as input (<code>colData</code> argument). We will also need to specify a design formula. The design formula specifies which column(s) of our metadata we want to use for statistical testing and modeling (more about that later!). For our dataset we only have one column we are interested in, which is <code>condition</code>. This column has three factor levels, which tells DESeq2 that for each gene we want to evaluate gene expression change with respect to these different levels.</p> <p>It is very important to establish beforehand which sample type will be our \"base\" or \"reference\" level. If nothing is changed, DESeq2 will assume that our reference samples will be the first sample type (in alphabetical order). You can check this using the <code>factor()</code> function.</p> <pre><code>factor(meta$condition)\n</code></pre> <p>While in a normal experiment we would use control samples as our reference, in our case we are interested in both checking the differences between control vs. vampirium and garlicum vs. vampirium. Thus, it would be much more convinient to reorganize our factor base level to <code>vampirium</code>. We can do this also with the <code>factor()</code> function, using the <code>levels =</code> argument.</p> <pre><code>meta$condition = factor(meta$condition, levels = c(\"vampirium\", \"control\", \"garlicum\"))\nfactor(meta$condition)\n</code></pre> <p>We can see now that vampirium is the first factor! Meaning that it will be interpreted by DESeq as our reference sample type.</p> <p>Our count matrix input is stored in the <code>txi</code> list object. So we need to specify that using the <code>DESeqDataSetFromTximport()</code> function, which will extract the counts component and round the values to the nearest whole number.</p> <pre><code># colData argument requires rownames in order to assess matching sample names\n# meta is a tibble object from tidyverse, so we neeed to add rownames.\n# If you do not do this and the samples do not match, you will add wrong info!\n\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n</code></pre> Control is not reference level warning <p>The warning from the chunk before is telling us that we have setup our vampirium samples as reference, instead of control! This is exactly what we wanted.</p> Starting from a traditional count matrix <p>If you did not create pseudocounts, but a count matrix from aligned BAM files and tools such as <code>featurecounts</code>, you would want to use the <code>DESeqDataSetFromMatrix()</code> function.</p> <pre><code>## DO NOT RUN!\n## Create DESeq2Dataset object from traditional count matrix\ndds &lt;- DESeqDataSetFromMatrix(countData = \"../Data/Vampirium_counts_traditional.tsv\", \n                          colData = meta %&gt;% column_to_rownames(\"sample\"), \n                          design = ~ condition)\n</code></pre> <p>You can use DESeq-specific functions to access the different slots and retrieve information, if you wish. For example, suppose we wanted the original count matrix we would use <code>counts()</code> (Note: we nested it within the <code>View()</code> function so that rather than getting printed in the console we can see it in the script editor) :</p> <pre><code>View(counts(dds))\n</code></pre> <p>As we go through the workflow we will use the relevant functions to check what information gets stored inside our object.</p> <p>You can use DESeq-specific functions to access the different slots and retrieve information, if you wish. For example, suppose we wanted the original count matrix we would use <code>counts()</code>:</p> <pre><code>head(counts(dds))\n</code></pre> <p>As we go through the workflow we will use the relevant functions to check what information gets stored inside our object.</p>"},{"location":"05c_count_normalization.html#pre-filtering","title":"Pre-filtering","text":"<p>While it is not necessary to pre-filter low count genes before running the DESeq2 functions, there are two reasons which make pre-filtering useful:</p> <ul> <li>By removing rows in which there are very few reads, we reduce the memory size of the dds data object, and we increase the speed of the transformation and testing functions within DESeq2.</li> <li>It can also improve visualizations, as features with no information for differential expression are not plotted.</li> </ul> <p>Here we perform a minimal pre-filtering to keep only rows that have at least 10 reads total.</p> <pre><code>keep &lt;- rowSums(counts(dds)) &gt;= 10\ndds &lt;- dds[keep,]\n</code></pre>"},{"location":"05c_count_normalization.html#3-generate-the-normalized-counts","title":"3. Generate the normalized counts","text":"<p>The next step is to normalize the count data in order to be able to make fair gene comparisons between samples.</p> <p>To perform the median of ratios method of normalization, DESeq2 has a single <code>estimateSizeFactors()</code> function that will generate size factors for us. We will use the function in the example below, but in a typical RNA-seq analysis this step is automatically performed by the <code>DESeq()</code> function, which we will see later.</p> <pre><code>dds &lt;- estimateSizeFactors(dds)\n</code></pre> <p>By assigning the results back to the <code>dds</code> object we are filling in the slots of the <code>DESeqDataSet</code> object with the appropriate information. We can take a look at the normalization factor applied to each sample using:</p> <pre><code>sizeFactors(dds)\n</code></pre> <p>Now, to retrieve the normalized counts matrix from <code>dds</code>, we use the <code>counts()</code> function and add the argument <code>normalized=TRUE</code>.</p> <pre><code>normalized_counts &lt;- counts(dds, normalized=TRUE)\n</code></pre> <p>We can save this normalized data matrix to file for later use:</p> <pre><code>write.table(normalized_counts, file=\"/work/Intro_to_bulkRNAseq/Results/normalized_counts.txt\", sep=\"\\t\", quote=F)\n</code></pre> <p>Warning</p> <p>DESeq2 doesn't actually use normalized counts, rather it uses the raw counts and models the normalization inside the Generalized Linear Model (GLM). These normalized counts will be useful for downstream visualization of results, but cannot be used as input to DESeq2 or any other tools that perform differential expression analysis which use the negative binomial model.</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"06_exploratory_analysis.html","title":"Exploratory analysis of bulk RNAseq","text":""},{"location":"06_exploratory_analysis.html#exploratory-analysis-and-quality-control","title":"Exploratory Analysis and Quality Control","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 80 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Recognize the importance of methods for count data transformation</li> <li>Describe the PCA (principal component analysis) technique</li> <li>Interpret different examples of PCA plots</li> <li>Evaluate sample quality using PCA and hierarchical clustering</li> </ol> <p>The next step in the DESeq2 workflow is QC, which includes sample-level and gene-level steps to perform QC checks on the count data to help us ensure that the samples/replicates look good.</p> <p></p>"},{"location":"06_exploratory_analysis.html#sample-level-qc","title":"Sample-level QC","text":"<p>A useful initial step in an RNA-seq analysis is often to assess overall similarity between samples:</p> <ul> <li>Which samples are similar to each other, which are different?</li> <li>Does this fit to the expectation from the experiment's design?</li> <li>What are the major sources of variation in the dataset?</li> </ul> <p>To explore the similarity of our samples, we will be performing sample-level QC using Principal Component Analysis (PCA) and hierarchical clustering methods. These methods/tools allow us to check how similar the replicates are to each other (clustering) and to make sure that the experimental condition is the major source of variation in the data. Sample-level QC can also help identify any samples behaving like outliers; we can further explore any potential outliers to determine whether they need to be removed prior to DE analysis.</p> <p></p> <p>These unsupervised clustering methods are run using log2 transformed normalized counts. The log2 transformation improves the sample distances for clustering visualization, i.e., it reduces the impact of large outlier counts. Instead of using a classical log2 transform, we will be using the regularized log transform (rlog). This type of transformation helps to avoid any bias from the abundance of low-count genes.</p> <p></p> <p>Image adapted from \"Beginner's guide to using the DESeq2 package\" by Love, Anders and Huber, 2014</p> <p>Note</p> <p>Many common statistical methods for exploratory analysis of multidimensional data, especially methods for clustering and ordination (e. g., principal-component analysis and the like), work best for (at least approximately) homoskedastic data; this means that the variance of an observable quantity (i.e., here, the expression strength of a gene) does not depend on the mean. In RNA-Seq data, however, variance grows with the mean. For example, if one performs PCA directly on a matrix of normalized read counts, the result typically depends only on the few most strongly expressed genes because they show the largest absolute differences between samples. A simple and often used strategy to avoid this is to take the logarithm of the normalized count values plus a small pseudocount; however, now the genes with low counts tend to dominate the results because, due to the strong Poisson noise inherent to small count values, they show the strongest relative differences between samples.</p> <p>As a solution, DESeq2 offers the regularized-logarithm transformation, or rlog for short. For genes with high counts, the rlog transformation differs not much from an ordinary log2 transformation. For genes with lower counts, however, the values are shrunken towards the genes' averages across all samples. Using an empirical Bayesian prior in the form of a ridge penality, this is done such that the rlog-transformed data are approximately homoskedastic.\" - From the \"Beginner's guide to using the DESeq2 package\" by Love, Anders and Huber, 2014 (the DESeq2 vignette is the updated version of this doc).</p> <p>Note</p> <p>The DESeq2 vignette suggests large datasets (100s of samples) to use the variance-stabilizing transformation (vst) instead of rlog for transformation of the counts, since the rlog function might take too long to run and the <code>vst()</code> function is faster with similar properties to rlog.</p>"},{"location":"06_exploratory_analysis.html#principal-component-analysis-pca","title":"Principal Component Analysis (PCA)","text":"<p>Principal Component Analysis (PCA) is a technique used to represent and visualize the variation in a dataset of high dimensionality. The number of dimensions, d, in a dataset may be thought of as the number of variables it has, e.g., for an RNA-seq dataset with 20.000 different transcripts, d is 20.000. Principally, this means we would need a dimensional space of size d to fully represent that dataset. However, as we are only able to view and comprehend things in 1,2 or 3 dimensions, we would like to project this dataset into a lower dimensional space, a process called dimensionality reduction. This makes PCA is a very important technique used in the QC and analysis of both bulk and single-cell RNAseq data, specially because many their dimensions (transcripts) do not contain any information.</p> <p>To better understand how it works, please go through this YouTube video from StatQuest that explains PCA). After you have gone through the video, please proceed with the interpretation section below.</p>"},{"location":"06_exploratory_analysis.html#interpreting-pca-plots","title":"Interpreting PCA plots","text":"<p>Essentially, if two samples have similar levels of expression for the genes that contribute significantly to the variation represented by a given PC (Principal Component), they will be plotted close together on the axis that represents that PC. Therefore, we would expect that biological replicates to have similar scores (because our expectation is that the same genes are changing) and cluster together. This is easiest to understand by visualizing some example PCA plots.</p> <p>We have an example dataset and a few associated PCA plots below to get a feel for how to interpret them. The metadata for the experiment is displayed below. The main condition of interest is <code>treatment</code>.</p> <p></p> <p>When visualizing on PC1 and PC2, we don't see the samples separate by <code>treatment</code>, so we decide to explore other sources of variation present in the data. We hope that we have included all possible known sources of variation in our metadata table, and we can use these factors to color the PCA plot.</p> <p></p> <p>We start with the factor <code>cage</code>, but the <code>cage</code> factor does not seem to explain the variation on PC1 or PC2.</p> <p></p> <p>Then, we color by the <code>sex</code> factor, which appears to separate samples on PC2. This is good information to take note of, as we can use it downstream to account for the variation due to sex in the model and regress it out.</p> <p></p> <p>Next we explore the <code>strain</code> factor and find that it explains the variation on PC1.</p> <p></p> <p>It's great that we have been able to identify the sources of variation for both PC1 and PC2. By accounting for it in our model, we should be able to detect more genes differentially expressed due to <code>treatment</code>.</p> <p>Something worrisome about this plot is that we see two samples that do not cluster with the correct strain. This would indicate a likely sample swap and should be investigated to determine whether these samples are indeed the labeled strains. If we found there was a switch, we could swap the samples in the metadata. However, if we think they are labeled correctly or are unsure, we could just remove the samples from the dataset.</p> <p>Still we haven't found if <code>treatment</code> is a major source of variation after <code>strain</code> and <code>sex</code>. So, we explore PC3 and PC4 to see if <code>treatment</code> is driving the variation represented by either of these PCs.</p> <p></p> <p>We find that the samples separate by <code>treatment</code> on PC3, and are optimistic about our DE analysis since our condition of interest, <code>treatment</code>, is separating on PC3 and we can regress out the variation driving PC1 and PC2.</p> <p>Depending on how much variation is explained by the first few principal components, you may want to explore more (i.e consider more components and plot pairwise combinations). Even if your samples do not separate clearly by the experimental variable, you may still get biologically relevant results from the DE analysis. If you are expecting very small effect sizes, then it's possible the signal is drowned out by extraneous sources of variation. In situations where you can identify those sources, it is important to account for these in your model, as it provides more power to the tool for detecting DE genes.</p>"},{"location":"06_exploratory_analysis.html#hierarchical-clustering-heatmap","title":"Hierarchical Clustering Heatmap","text":"<p>Hierarchical clustering is another method for identifying correlation patterns in a dataset and potential sample outliers. A heatmap displays the correlation of gene expression for all pairwise combinations of samples in the dataset. The hierarchical tree along the axes indicates which samples are more similar to each other, i.e. cluster together. The color blocks at the top indicate substructure in the data, and you would expect to see your replicates cluster together as a block for each sample group. Our expectation would be that the samples cluster together similar to the groupings we've observed in the PCA plot.</p> <p></p> <p>Note</p> <p>In the example above, we see a clustering of wild-type (Wt) and knock-down (KD) cell line samples and we would be quite concerned that the 'Wt_3' and 'KD_3' samples are not clustering with the other replicates. Furthermore, since the majority of genes are not differentially expressed, we observe that the samples generally have high correlations with each other (values higher than 0.80). In this case, samples with correlations below 0.80 may indicate an outlier in your data and/or sample contamination. N.B It is important to stress that these is no universal cut-off for what is a good/bad correlation/distance score, it depends on the particular dataset.</p>"},{"location":"06_exploratory_analysis.html#vampirium-quality-assessment-and-exploratory-analysis-using-deseq2","title":"Vampirium quality assessment and exploratory analysis using DESeq2","text":"<p>Now that we have a good understanding of the QC steps normally employed for RNA-seq, let's implement them for the Vampirium dataset we are going to be working with.</p>"},{"location":"06_exploratory_analysis.html#transform-normalized-counts-for-the-vampirium-dataset","title":"Transform normalized counts for the Vampirium dataset","text":"<p>To improve the distances/clustering for the PCA and hierarchical clustering visualization methods, we need to moderate the variance across the mean by applying the rlog transformation to the normalized counts.</p> <p>Note on transformed normalized counts</p> <p>The rlog transformation of the normalized counts is only necessary for these visualization methods during this quality assessment. We will not be using these transformed counts for determining differential expression.</p> <pre><code>### Transform counts for data visualization\nrld &lt;- rlog(dds, blind=TRUE)\n</code></pre> <p>The <code>blind=TRUE</code> argument is to make sure that the <code>rlog()</code> function does not take our sample groups into account - i.e. does the transformation in an unbiased manner. When performing quality assessment, it is important to include this option. The DESeq2 vignette has more details about this.</p> <p>The <code>rlog()</code> function returns a <code>DESeqTransform</code> object, another type of DESeq-specific object. The reason you don't just get a matrix of transformed values is because all of the parameters (i.e. size factors) that went into computing the rlog transform are stored in that object. We use this object to plot the PCA and hierarchical clustering figures for quality assessment.</p> <p>Performance of rlog vs vst</p> <p>The <code>rlog()</code> function can be a bit slow when you have e.g. &gt; 20 samples. In these situations the <code>vst()</code> function is much faster and performs a similar transformation appropriate for use with <code>plotPCA()</code>. It's typically just a few seconds with <code>vst()</code> due to optimizations and the nature of the transformation.</p> <pre><code>### Transform counts for data visualization\nvsd &lt;- vst(dds, blind = TRUE)\n</code></pre>"},{"location":"06_exploratory_analysis.html#principal-component-analysis-pca-for-the-vampirium-dataset","title":"Principal component analysis (PCA) for the Vampirium dataset","text":"<p>We are now ready for the QC steps, let's start with PCA!</p> <p>DESeq2 has a built-in function for generating PCA plots using <code>ggplot2</code> under the hood. This is great because it saves us having to type out lines of code and having to fiddle with the different ggplot2 layers. In addition, it takes the <code>rlog</code> object as an input directly, hence saving us the trouble of extracting the relevant information from it.</p> <p>The function <code>plotPCA()</code> requires two arguments as input: a <code>DESeqTransform</code> object and the \"intgroup\" (interesting group), i.e. the name of the column in our metadata that has information about the experimental sample groups.</p> <pre><code>### Plot PCA \nplotPCA(rld, intgroup=\"condition\")\n</code></pre> <p></p> <p>Exercise 1</p> <p>By default <code>plotPCA()</code> uses the top 500 most variable genes. You can change this by adding the <code>ntop=</code> argument and specifying how many of the genes you want the function to consider. For example, try 1000 genes. Did the plot change a lot?</p> Solution to Exercise 1 <p>Using the 1000 most variable genes, the plot does not change a lot:</p> <pre><code>plotPCA(rld, intgroup=\"condition\", ntop = 1000)\n</code></pre> <p>What about 2000 genes? It seems that the PCs have a bit different % variance explained:</p> <pre><code>plotPCA(rld, intgroup=\"condition\", ntop = 2000)\n</code></pre> <p>What about all genes? Not much change either!</p> <pre><code>plotPCA(rld, intgroup=\"condition\", ntop = nrow(rld)) #nrow is number of rows and it equals to all genes!\n</code></pre> <p>As you can see, most of the info comes from the top most variable genes. Since PCs are capturing the variation of our data, adding genes that are hardly variable makes any difference to the plot.</p> <p>Exercise 2</p> <ol> <li>What does the above plot tell you about the similarity of samples?</li> <li>Does it fit the expectation from the experimental design?</li> <li>What do you think the %variance information (in the axes titles) tell you about the data in the context of the PCA?</li> </ol> Solutions to Exercise 2 <ol> <li>It shows that our replicates are very close to each other, and each group far from each other!</li> <li>Yes, which is great!</li> <li>It tells us how much is captured by each PC. In our case, PC1 already captures the differences between our conditions!</li> </ol>"},{"location":"06_exploratory_analysis.html#custom-pca-plot","title":"Custom PCA plot","text":"<p>The <code>plotPCA()</code> function will only return the values for PC1 and PC2. If you would like to explore the additional PCs in your data or if you would like to identify genes that contribute most to the PCs, you can use the <code>prcomp()</code> function. For example, to plot any of the PCs we could run the following code:</p> <pre><code># Input is a matrix of log transformed values\nrld_mat &lt;- assay(rld) # extract rlog count matrix\npca &lt;- prcomp(t(rld_mat)) # perform PCA on the transposed (t) matrix of data \n</code></pre> <p>To see what the PCA object contains we can use again the <code>attributes()</code> function.</p> <pre><code>attributes(pca)\n</code></pre> <p>You can check the <code>?prcomp()</code> for more information. The most important variables are: - sdev: standard deviation explained by each PC. - rotation: contribution of each gene to each PC. - x: PC values for each sample (we use this values for our plots).</p> <p>We can create a new object that contains all our metadata information and the PC values.</p> <pre><code>df &lt;- cbind(meta, pca$x) # Create data frame with metadata and PC3 and PC4 values for input to ggplot\n</code></pre> <pre><code># ggplot with info for all PCAs\nggplot(df) + geom_point(aes(x=PC3, y=PC4, color = condition))\n</code></pre> <p>If you want to add PC variation information to the plot we can fetch it using the <code>summary()</code> function and take the second row:</p> <pre><code>summary(pca)\npca_var &lt;- summary(pca)$importance[2,] # second row is stored in the object \"importance\"\npca_var &lt;- round(pca_var * 100, digits = 2) # make it percentage and round to 2 digits\n</code></pre> <p>Finally, we can add it to our plot</p> <pre><code>ggplot(df) + geom_point(aes(x=PC3, y=PC4, color = condition)) + \n  xlab(paste0(\"PC3: \",pca_var[\"PC3\"], \"% variance\")) + \n  ylab(paste0(\"PC4: \",pca_var[\"PC4\"], \"% variance\")) \n</code></pre> <pre><code>knitr::include_graphics(\"./img/06_exploratory_analysis/custom_PCA.png\")\n</code></pre>"},{"location":"06_exploratory_analysis.html#hierarchical-clustering-for-the-vampirium-dataset","title":"Hierarchical Clustering for the Vampirium dataset","text":"<p>There is no built-in function in DESeq2 for plotting the heatmap for displaying the pairwise correlation or distances between all the samples and the hierarchical clustering information; we will use the <code>pheatmap()</code> function from the <code>pheatmap</code> package. This function cannot use the <code>DESeqTransform</code> object as input, but requires a matrix or dataframe. So, the first thing to do is retrieve that information from the <code>rld</code> object using a function called <code>assay()</code>.</p> <pre><code># Extract the rlog matrix from the object\nrld_mat &lt;- assay(rld)    \n</code></pre> <p>Next, we need to compute the distances values for all the samples. We can do this using the <code>dist</code> function:</p> <pre><code>sampleDists &lt;- dist(t(rld_mat)) # Distances are computed by rows, so we need to transpose (t) the matrix\nsampleDistMatrix &lt;- as.matrix(sampleDists)\n</code></pre> <p>Let's take a look at the column and row names of the correlation matrix.</p> <pre><code># Check the output of sampleDistMatrix, make note of the row names and column names\nhead(sampleDistMatrix)\n\nhead(meta)\n</code></pre> <p>You will notice that they match the names we have given our samples in the metadata data frame we started with. It is important that these match, so we can use the <code>annotation</code> argument below to plot a color block across the top. This block enables easy visualization of the hierarchical clustering.</p> <p>Now, let's plot the heatmap!</p> <pre><code># Load pheatmap package\nlibrary(pheatmap)\n\npheatmap(sampleDistMatrix, annotation_col = meta %&gt;% column_to_rownames(\"sample\") %&gt;% \n           select(condition)) # we only want to use the condition column as an annotation\n</code></pre> <p>When you plot using <code>pheatmap()</code> the hierarchical clustering information is used to place similar samples together and this information is represented by the tree structure along the axes. The <code>annotation</code> argument accepts a dataframe as input, in our case it is the <code>meta</code> data frame.</p> <p></p> <p>Overall, we observe pretty high correlations across the board (&gt; 0.999) suggesting no outlying sample(s). Also, similar to the PCA plot you see the samples clustering together by sample group. Together, these plots suggest to us that the data are of good quality and we have the green light to proceed to differential expression analysis.</p> <p>Exercise 3</p> <p>Instead of using distances between expression patterns, check the Pearson correlation between samples using <code>cor()</code>. Use your rlog count matrix as an input.</p> Solution to Exercise 3 <p>First, we get pearson correlations between our samples:</p> <pre><code>pearson &lt;- cor(rld_mat) \npearson\n</code></pre> <p>As you can see, the result of cor for a matrix like <code>rld_mat</code> is a square matrix (rows are the same as columns). Each value is the Pearson correlation between a row and a column.</p> <p>Then, we create the plot:</p> <pre><code>pheatmap(pearson, annotation_col = meta %&gt;% column_to_rownames(\"sample\") %&gt;% \n           dplyr::select(condition)) # we only want to use the condition column as an annotation\n</code></pre>"},{"location":"06_exploratory_analysis.html#custom-heatmap","title":"Custom heatmap","text":"<p>There are many arguments and options for the <code>pheatmap()</code> function. You could, for example, change the color scale used, remove the dendograms, avoid clustering or even scale the values per row or per column.</p> <pre><code>library(RColorBrewer)\nheat.colors &lt;- brewer.pal(6, \"Blues\") # Colors from the RColorBrewer package (only 6)\nheat.colors &lt;- colorRampPalette(heat.colors)(100) # Interpolate 100 colors\n</code></pre> <pre><code>pheatmap(sampleDistMatrix, annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% select(\"condition\"), \n         color = heat.colors, border_color=NA, fontsize = 10, \n         fontsize_row = 10, height=20)\n</code></pre> <p>You can check all the colors that RColorBrewer offers by using the following command: <code>display.brewer.all()</code></p> <pre><code>display.brewer.all()\n</code></pre> <p> ***</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"07_extra_contrast_design.html","title":"Contrast designs","text":""},{"location":"07_extra_contrast_design.html#design-formula-and-contrasts","title":"Design formula and contrasts","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 40 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Demonstrate the use of the design formula with simple and complex designs</li> <li>Construct R code to execute the differential expression analysis workflow with DESeq2</li> </ol> <p>The final step in the differential expression analysis workflow is fitting the raw counts to the NB model and performing the statistical test for differentially expressed genes. In this step we essentially want to determine whether the mean expression levels of different sample groups are significantly different.</p> <p></p> <p>Image credit: Paul Pavlidis, UBC</p> <p>The DESeq2 paper was published in 2014, but the package is continually updated and available for use in R through Bioconductor. It builds on good ideas for dispersion estimation and use of Generalized Linear Models from the DSS and edgeR methods.</p> <p>Differential expression analysis with DESeq2 involves multiple steps as displayed in the flowchart below in blue. Briefly, DESeq2 will model the raw counts, using normalization factors (size factors) to account for differences in library depth. Then, it will estimate the gene-wise dispersions and shrink these estimates to generate more accurate estimates of dispersion to model the counts. Finally, DESeq2 will fit the negative binomial model and perform hypothesis testing using the Wald test or Likelihood Ratio Test.</p> <p></p> <p>Tip</p> <p>DESeq2 is actively maintained by the developers and continuously being updated. As such, it is important that you note the version you are working with. Recently, there have been some rather big changes implemented that impact the output. To find out more detail about the specific modifications made to methods described in the original 2014 paper, take a look at this section in the DESeq2 vignette.</p> <p>Additional details on the statistical concepts underlying DESeq2 are elucidated nicely in Rafael Irizarry's materials for the EdX course, \"Data Analysis for the Life Sciences Series\".</p> <p>Prior to performing the differential expression analysis, it is a good idea to know what sources of variation are present in your data, either by exploration during the QC and/or prior knowledge. Once you know the major sources of variation, you can remove them prior to analysis or control for them in the statistical model by including them in your design formula.</p>"},{"location":"07_extra_contrast_design.html#design-formula","title":"Design formula","text":"<p>A design formula tells the statistical software the known sources of variation to control for, as well as, the factor of interest to test for during differential expression testing. For example, if you know that sex is a significant source of variation in your data, then <code>sex</code> should be included in your model. The design formula should have all of the factors in your metadata that account for major sources of variation in your data. The last factor entered in the formula should be the condition of interest.</p> <p>For example, suppose you have the following metadata:</p> <p></p> <p>If you want to examine the expression differences between <code>condition</code>, and you know that major sources of variation include <code>bloodtype</code> and <code>patient</code>, then your design formula would be:</p> <p><code>design = ~ bloodtype + patient + condition</code></p> <p>The tilde (<code>~</code>) should always precede your factors and tells DESeq2 to model the counts using the following formula. Note the factors included in the design formula need to match the column names in the metadata.</p> <p>In this tutorial we show a general and flexible way to define contrasts, and is often useful for more complex contrasts or when the design of the experiment is imbalanced (e.g. different number of replicates in each group). Although we focus on DESeq2, the approach can also be used with the other popular package edgeR.</p> <p>Each section below covers a particular experimental design, from simpler to more complex ones. The first chunk of code in each section is to simulate data, which has no particular meaning and is only done in order to have a DESeqDataSet object with the right kind of variables for each example. In practice, users can ignore this step as they should have created a DESeqDataSet object from their own data following the instructions in the vignette.</p>"},{"location":"07_extra_contrast_design.html#one-factor-two-levels","title":"One factor, two levels","text":"<pre><code># simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 6, betaSD = 2)\ndds$condition &lt;- factor(rep(c(\"control\", \"treat\"), each = 3))\n</code></pre> <p>First we can look at our sample information:</p> <pre><code>colData(dds)\n</code></pre> <pre><code>## DataFrame with 6 rows and 1 column\n##         condition\n##          &lt;factor&gt;\n## sample1   control\n## sample2   control\n## sample3   control\n## sample4   treat  \n## sample5   treat  \n## sample6   treat\n</code></pre> <p>Our factor of interest is <code>condition</code> and so we define our design and run the DESeq model fitting routine:</p> <pre><code>design(dds) &lt;- ~ 1 + condition # or just `~ condition`\ndds &lt;- DESeq(dds) # equivalent to edgeR::glmFit()\n</code></pre> <p>Then check what coefficients DESeq estimated:</p> <pre><code>resultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"                  \"condition_treat_vs_control\"\n</code></pre> <p>We can see that we have a coefficient for our <code>intercept</code> and coefficient for the effect of <code>treat</code> (i.e. differences between treat versus control).</p> <p>Using the more standard syntax, we can obtain the results for the effect of treat as such:</p> <pre><code>res1 &lt;- results(dds, contrast = list(\"condition_treat_vs_control\"))\nres1\n</code></pre> <pre><code>## log2 fold change (MLE): condition_treat_vs_control effect \n## Wald test p-value: condition_treat_vs_control effect \n## DataFrame with 1000 rows and 6 columns\n##           baseMean log2FoldChange     lfcSE         stat      pvalue\n##          &lt;numeric&gt;      &lt;numeric&gt; &lt;numeric&gt;    &lt;numeric&gt;   &lt;numeric&gt;\n## gene1     40.90941    1.267525859  0.574144  2.207679752   0.0272666\n## gene2     12.21876   -0.269917301  1.111127 -0.242922069   0.8080658\n## gene3      1.91439   -3.538133611  2.564464 -1.379677442   0.1676860\n## gene4     10.24472    0.954811627  1.166408  0.818591708   0.4130194\n## gene5     13.16824    0.000656519  0.868780  0.000755679   0.9993971\n## ...            ...            ...       ...          ...         ...\n## gene996   40.43827     -1.0291276  0.554587    -1.855664 0.063501471\n## gene997   52.88360      0.0622133  0.561981     0.110704 0.911851377\n## gene998   73.06582      1.3271896  0.576695     2.301373 0.021370581\n## gene999    8.87701     -5.8385374  1.549471    -3.768084 0.000164506\n## gene1000  37.06533      1.2669314  0.602010     2.104501 0.035334764\n##                 padj\n##            &lt;numeric&gt;\n## gene1      0.0712378\n## gene2      0.8779871\n## gene3      0.2943125\n## gene4      0.5692485\n## gene5      0.9996728\n## ...              ...\n## gene996  0.138827354\n## gene997  0.948279388\n## gene998  0.059599481\n## gene999  0.000914882\n## gene1000 0.087737235\n</code></pre> <p>The above is a simple way to obtain the results of interest. But it is worth understanding how DESeq is getting to these results by looking at the model's matrix. DESeq defines the model matrix using base R functionality:</p> <pre><code>model.matrix(design(dds), colData(dds))\n</code></pre> <pre><code>##         (Intercept) conditiontreat\n## sample1           1              0\n## sample2           1              0\n## sample3           1              0\n## sample4           1              1\n## sample5           1              1\n## sample6           1              1\n## attr(,\"assign\")\n## [1] 0 1\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$condition\n## [1] \"contr.treatment\"\n</code></pre> <p>We can see that R coded <code>condition</code> as a dummy variable, with an intercept (common to all samples) and a \"conditiontreat\" variable, which adds the effect of treat to samples 4-6.</p> <p>We can actually set our contrasts in <code>DESeq2::results()</code> using a numeric vector. The way it works is to define a vector of \"weights\" for the coefficient(s) we want to test for. In this case, we have <code>(Intercept)</code> and <code>conditiontreat</code> as our coefficients (see model matrix above), and we want to test for the effect of treat, so our contrast vector would be <code>c(0, 1)</code>. In other words, we don't care about the value of <code>(Intercept)</code> (so it has a weight of 0), and we're only interested in the effect of treat (so we give it a weight of 1).</p> <p>In this case the design is very simple, so we could define our contrast vector \"manually\". But for complex designs this can get more difficult to do, so it's worth mentioning the general way in which we can define this. For any contrast of interest, we can follow three steps:</p> <ul> <li>Get the model matrix</li> <li>Subset the matrix for each group of interest and calculate its column means - this results in a vector of coefficients for each group</li> <li>Subtract the group vectors from each other according to the comparison we're interested in</li> </ul> <p>Let's see this example in action:</p> <pre><code># get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n</code></pre> <pre><code>##         (Intercept) conditiontreat\n## sample1           1              0\n## sample2           1              0\n## sample3           1              0\n## sample4           1              1\n## sample5           1              1\n## sample6           1              1\n## attr(,\"assign\")\n## [1] 0 1\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$condition\n## [1] \"contr.treatment\"\n</code></pre> <pre><code># calculate the vector of coefficient weights in the treat\ntreat &lt;- colMeans(mod_mat[dds$condition == \"treat\", ])\ntreat\n</code></pre> <pre><code>##    (Intercept) conditiontreat \n##              1              1\n</code></pre> <pre><code># calculate the vector of coefficient weights in the control\ncontrol &lt;- colMeans(mod_mat[dds$condition == \"control\", ])\ncontrol\n</code></pre> <pre><code>##    (Intercept) conditiontreat \n##              1              0\n</code></pre> <pre><code># The contrast we are interested in is the difference between treat and control\ntreat - control\n</code></pre> <pre><code>##    (Intercept) conditiontreat \n##              0              1\n</code></pre> <p>That last step is where we define our contrast vector, and we can give this directly to the <code>results</code> function:</p> <pre><code># get the results for this contrast\nres2 &lt;- results(dds, contrast = treat - control)\n</code></pre> <p>This gives us exactly the same results as before, which we can check for example by plotting the log-fold-changes between the first and second approach:</p> <pre><code>plot(res1$log2FoldChange, res2$log2FoldChange)\n</code></pre> <p></p>"},{"location":"07_extra_contrast_design.html#recoding-the-design","title":"Recoding the design","text":"<p>Often, we can use different model matrices that essentially correspond to the same design. For example, we could recode our design above by removing the intercept:</p> <pre><code>design(dds) &lt;- ~ 0 + condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"conditioncontrol\" \"conditiontreat\"\n</code></pre> <p>In this case we get a coefficient corresponding to the average expression in control and the average expression in the treat (rather than the difference between treat and control).</p> <p>If we use the same contrast trick as before (using the model matrix), we can see the result is the same:</p> <pre><code># get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n</code></pre> <pre><code>##         conditioncontrol conditiontreat\n## sample1                1              0\n## sample2                1              0\n## sample3                1              0\n## sample4                0              1\n## sample5                0              1\n## sample6                0              1\n## attr(,\"assign\")\n## [1] 1 1\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$condition\n## [1] \"contr.treatment\"\n</code></pre> <pre><code># calculate weights for coefficients in each condition\ntreat &lt;- colMeans(mod_mat[which(dds$condition == \"treat\"), ])\ncontrol &lt;- colMeans(mod_mat[which(dds$condition == \"control\"), ])\n# get the results for our contrast\nres3 &lt;- results(dds, contrast = treat - control)\n</code></pre> <p>Again, the results are essentially the same:</p> <pre><code>plot(res1$log2FoldChange, res3$log2FoldChange)\n</code></pre> <p></p> <p>In theory there's no difference between these two ways of defining our design. The design with an intercept is more common, but for the purposes of understanding what's going on, it's sometimes easier to look at models without intercept.</p>"},{"location":"07_extra_contrast_design.html#one-factor-three-levels","title":"One factor, three levels","text":"<pre><code># simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 9, betaSD = 2)\ndds$condition &lt;- NULL\ndds$bloodtype &lt;- factor(rep(c(\"bloodA\", \"bloodB\", \"bloodO\"), each = 3))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\n</code></pre> <p>First we can look at our sample information:</p> <pre><code>colData(dds)\n</code></pre> <pre><code>## DataFrame with 9 rows and 1 column\n##         bloodtype\n##          &lt;factor&gt;\n## sample1    bloodA\n## sample2    bloodA\n## sample3    bloodA\n## sample4    bloodB\n## sample5    bloodB\n## sample6    bloodB\n## sample7    bloodO\n## sample8    bloodO\n## sample9    bloodO\n</code></pre> <p>As in the previous example, we only have one factor of interest, <code>bloodtype</code>, and so we define our design and run the DESeq as before:</p> <pre><code>design(dds) &lt;- ~ 1 + bloodtype\ndds &lt;- DESeq(dds)\n# check the coefficients estimated by DEseq\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"                  \"bloodtype_bloodA_vs_bloodO\"\n## [3] \"bloodtype_bloodB_vs_bloodO\"\n</code></pre> <p>We see that now we have 3 coefficients:</p> <ul> <li>\"Intercept\" corresponds to bloodO bloodtype (our reference level)</li> <li>\"bloodtype_bloodA_vs_bloodO\" corresponds to the difference between the reference level and bloodA</li> <li>\"bloodtype_bloodB_vs_bloodO\" corresponds to the difference between the reference level and bloodB</li> </ul> <p>We could obtain the difference between bloodO and any of the two bloodtypes easily:</p> <pre><code>res1_bloodA_bloodO &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\"))\nres1_bloodB_bloodO &lt;- results(dds, contrast = list(\"bloodtype_bloodB_vs_bloodO\"))\n</code></pre> <p>For comparing bloodA vs bloodB, however, we need to compare two coefficients with each other to check whether they are themselves different (check the slide to see the illustration). This is how the standard DESeq syntax would be:</p> <pre><code>res1_bloodA_bloodB &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\", \n                                                 \"bloodtype_bloodB_vs_bloodO\"))\n</code></pre> <p>However, following our three steps detailed in the first section, we can define our comparisons from the design matrix:</p> <pre><code># define the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n</code></pre> <pre><code>##         (Intercept) bloodtypebloodA bloodtypebloodB\n## sample1           1               1               0\n## sample2           1               1               0\n## sample3           1               1               0\n## sample4           1               0               1\n## sample5           1               0               1\n## sample6           1               0               1\n## sample7           1               0               0\n## sample8           1               0               0\n## sample9           1               0               0\n## attr(,\"assign\")\n## [1] 0 1 1\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$bloodtype\n## [1] \"contr.treatment\"\n</code></pre> <pre><code># calculate coefficient vectors for each group\nbloodA &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\", ])\nbloodB &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodB\", ])\nbloodO &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\", ])\n</code></pre> <p>And we can now define any contrasts we want:</p> <pre><code># obtain results for each pairwise contrast\nres2_bloodA_bloodO &lt;- results(dds, contrast = bloodA - bloodO)\nres2_bloodB_bloodO &lt;- results(dds, contrast = bloodB - bloodO)\nres2_bloodA_bloodB &lt;- results(dds, contrast = bloodA - bloodB)\n# plot the results from the two approaches to check that they are identical\nplot(res1_bloodA_bloodO$log2FoldChange, res2_bloodA_bloodO$log2FoldChange)\nplot(res1_bloodB_bloodO$log2FoldChange, res2_bloodB_bloodO$log2FoldChange)\nplot(res1_bloodA_bloodB$log2FoldChange, res2_bloodA_bloodB$log2FoldChange)\n</code></pre>"},{"location":"07_extra_contrast_design.html#a-and-b-against-o","title":"A and B against O","text":"<p>With this approach, we could even define a more unusual contrast, for example to find genes that differ between A and B against and O samples:</p> <pre><code># define vector of coefficients for A_B samples\nA_B &lt;- colMeans(mod_mat[dds$bloodtype %in% c(\"bloodA\", \"bloodB\"),])\n# Our contrast of interest is\nA_B - bloodO\n</code></pre> <pre><code>##     (Intercept) bloodtypebloodA bloodtypebloodB \n##             0.0             0.5             0.5\n</code></pre> <p>Notice the contrast vector in this case assigns a \"weight\" of 0.5 to each of <code>bloodtypebloodA</code> and <code>bloodtypebloodB</code>. This is equivalent to saying that we want to consider the average of bloodA and bloodB expression. In fact, we could have also defined our contrast vector like this:</p> <pre><code># average of bloodA and bloodB minus bloodO\n(bloodA + bloodB)/2 - bloodO\n</code></pre> <pre><code>##     (Intercept) bloodtypebloodA bloodtypebloodB \n##             0.0             0.5             0.5\n</code></pre> <p>To obtain our results, we use the <code>results()</code> function as before:</p> <pre><code># get the results between A_B and bloodA\nres2_AB &lt;- results(dds, contrast = A_B - bloodO)\n</code></pre>"},{"location":"07_extra_contrast_design.html#extra-why-not-define-a-new-group-in-our-design-matrix","title":"Extra: why not define a new group in our design matrix?","text":"<p>For this last example (A_B vs bloodO), we may have considered creating a new variable in our column data:</p> <pre><code>dds$A_B &lt;- factor(dds$bloodtype %in% c(\"bloodA\", \"bloodB\"))\ncolData(dds)\n</code></pre> <pre><code>## DataFrame with 9 rows and 3 columns\n##         bloodtype sizeFactor      A_B\n##          &lt;factor&gt;  &lt;numeric&gt; &lt;factor&gt;\n## sample1    bloodA   0.972928    TRUE \n## sample2    bloodA   0.985088    TRUE \n## sample3    bloodA   0.960749    TRUE \n## sample4    bloodB   0.916582    TRUE \n## sample5    bloodB   0.936918    TRUE \n## sample6    bloodB   1.137368    TRUE \n## sample7    bloodO   1.071972    FALSE\n## sample8    bloodO   1.141490    FALSE\n## sample9    bloodO   1.140135    FALSE\n</code></pre> <p>and then re-run DESeq with a new design:</p> <pre><code>design(dds) &lt;- ~ 1 + A_B\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"         \"A_B_TRUE_vs_FALSE\"\n</code></pre> <pre><code>res1_A_B &lt;- results(dds, contrast = list(\"A_B_TRUE_vs_FALSE\"))\n</code></pre> <p>However, in this model the gene dispersion is estimated together for bloodA and bloodB samples as if they were replicates of each other, which may result in inflated/deflated estimates. Instead, our approach above estimates the error within each of those groups.</p> <p>To check the difference one could compare the two approaches visually:</p> <pre><code># compare the log-fold-changes between the two approaches\nplot(res1_A_B$log2FoldChange, res2_AB$log2FoldChange)\nabline(0, 1, col = \"brown\", lwd = 2)\n</code></pre> <p></p> <pre><code># compare the errors between the two approaches\nplot(res1_A_B$lfcSE, res2_AB$lfcSE)\nabline(0, 1, col = \"brown\", lwd = 2)\n</code></pre> <p></p>"},{"location":"07_extra_contrast_design.html#two-factors-with-interaction","title":"Two factors with interaction","text":"<pre><code># simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 12, betaSD = 2)\ndds$bloodtype &lt;- factor(rep(c(\"bloodO\", \"bloodA\"), each = 6))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\ndds$condition &lt;- factor(rep(c(\"treat\", \"control\"), 6))\ndds &lt;- dds[, order(dds$bloodtype, dds$condition)]\ncolnames(dds) &lt;- paste0(\"sample\", 1:ncol(dds))\n</code></pre> <p>First let's look at our sample information:</p> <pre><code>colData(dds)\n</code></pre> <pre><code>## DataFrame with 12 rows and 2 columns\n##          condition bloodtype\n##           &lt;factor&gt;  &lt;factor&gt;\n## sample1    control    bloodO\n## sample2    control    bloodO\n## sample3    control    bloodO\n## sample4    treat      bloodO\n## sample5    treat      bloodO\n## ...            ...       ...\n## sample8    control    bloodA\n## sample9    control    bloodA\n## sample10   treat      bloodA\n## sample11   treat      bloodA\n## sample12   treat      bloodA\n</code></pre> <p>This time we have two factors of interest, and we want to model both with an interaction (i.e. we assume that bloodA and bloodO samples may respond differently to treat/control). We define our design accordingly and fit the model:</p> <pre><code>design(dds) &lt;- ~ 1 + bloodtype + condition + bloodtype:condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"                      \"bloodtype_bloodA_vs_bloodO\"    \n## [3] \"condition_treat_vs_control\"     \"bloodtypebloodA.conditiontreat\"\n</code></pre> <p>Because we have two factors and an interaction, the number of comparisons we can do is larger. Using our three-step approach from the model matrix, we do things exactly as we've been doing so far:</p> <pre><code># get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\n# Define coefficient vectors for each condition\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"treat\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"control\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"treat\", ])\n</code></pre> <p>We are now ready to define any contrast of interest from these vectors (for completeness we show the equivalent syntax using the coefficient's names from DESeq).</p> <p>bloodA vs bloodO (in the control):</p> <pre><code>res1 &lt;- results(dds, contrast = bloodA_control - bloodO_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\"))\n</code></pre> <p>bloodA vs bloodO (in the treatment):</p> <pre><code>res1 &lt;- results(dds, contrast = bloodO_treat - bloodA_treat)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"bloodtype_bloodA_vs_bloodO\",\n                                       \"bloodtypebloodA.conditiontreat\")))\n</code></pre> <p>treat vs control (for bloodtypes O):</p> <pre><code>res1 &lt;- results(dds, contrast = bloodO_treat - bloodO_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"condition_treat_vs_control\")))\n</code></pre> <p>treat vs control (for bloodtypes A):</p> <pre><code>res1 &lt;- results(dds, contrast = bloodA_treat - bloodA_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"condition_treat_vs_control\", \n                                       \"bloodtypebloodA.conditiontreat\")))\n</code></pre> <p>Interaction between bloodtype and condition</p> <p>I.e. do bloodAs and bloodOs respond differently to the treatment?</p> <pre><code>res1 &lt;- results(dds, \n                contrast = (bloodA_treat - bloodA_control) - (bloodO_treat - bloodO_control))\n# or equivalently\nres2 &lt;- results(dds, contrast = list(\"bloodtypebloodA.conditiontreat\"))\n</code></pre> <p>In conclusion, although we can define these contrasts using DESeq coefficient names, it is somewhat more explicit (and perhaps intuitive?) what it is we're comparing using matrix-based contrasts.</p>"},{"location":"07_extra_contrast_design.html#three-factors-with-nesting","title":"Three factors, with nesting","text":"<pre><code># simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 24, betaSD = 2)\ndds$bloodtype &lt;- factor(rep(c(\"bloodA\", \"bloodO\"), each = 12))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\ndds$patient &lt;- factor(rep(LETTERS[1:4], each = 6))\ndds$condition &lt;- factor(rep(c(\"treat\", \"control\"), 12))\ndds &lt;- dds[, order(dds$bloodtype, dds$patient, dds$condition)]\ncolnames(dds) &lt;- paste0(\"sample\", 1:ncol(dds))\n</code></pre> <p>First let's look at our sample information:</p> <pre><code>colData(dds)\n</code></pre> <pre><code>## DataFrame with 24 rows and 3 columns\n##          condition bloodtype  patient\n##           &lt;factor&gt;  &lt;factor&gt; &lt;factor&gt;\n## sample1    control    bloodO        C\n## sample2    control    bloodO        C\n## sample3    control    bloodO        C\n## sample4    treat      bloodO        C\n## sample5    treat      bloodO        C\n## ...            ...       ...      ...\n## sample20   control    bloodA        B\n## sample21   control    bloodA        B\n## sample22   treat      bloodA        B\n## sample23   treat      bloodA        B\n## sample24   treat      bloodA        B\n</code></pre> <p>Now we have three factors, but patient is nested within bloodtype (i.e. a patient is either bloodA or bloodO, it cannot be both). Therefore, bloodtype is a linear combination with patient (or, another way to think about it is that bloodtype is redundant with patient). Because of this, we will define our design without including \"bloodtype\", although later we can compare groups of patient of the same bloodtype with each other.</p> <pre><code>design(dds) &lt;- ~ 1 + patient + condition + patient:condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"                  \"patient_B_vs_A\"            \n## [3] \"patient_C_vs_A\"             \"patient_D_vs_A\"            \n## [5] \"condition_treat_vs_control\" \"patientB.conditiontreat\"   \n## [7] \"patientC.conditiontreat\"    \"patientD.conditiontreat\"\n</code></pre> <p>Now it's harder to define contrasts between groups of patient of the same bloodtype using DESeq's coefficient names (although still possible). But using the model matrix approach, we do it in exactly the same way we have done so far!</p> <p>Again, let's define our groups from the model matrix:</p> <pre><code># get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\n# define coefficient vectors for each group\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"control\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"treat\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"treat\", ])\n</code></pre> <p>It's worth looking at some of these vectors, to see that they are composed of weighted coefficients from different patient. For example, for \"bloodO\" patient, we have equal contribution from \"patientC\" and \"patientD\":</p> <pre><code>bloodO_control\n</code></pre> <pre><code>##             (Intercept)                patientB                patientC \n##                     1.0                     0.0                     0.5 \n##                patientD          conditiontreat patientB:conditiontreat \n##                     0.5                     0.0                     0.0 \n## patientC:conditiontreat patientD:conditiontreat \n##                     0.0                     0.0\n</code></pre> <p>And so, when we define our contrasts, each patient will be correctly weighted:</p> <pre><code>bloodO_treat - bloodO_control\n</code></pre> <pre><code>##             (Intercept)                patientB                patientC \n##                     0.0                     0.0                     0.0 \n##                patientD          conditiontreat patientB:conditiontreat \n##                     0.0                     1.0                     0.0 \n## patientC:conditiontreat patientD:conditiontreat \n##                     0.5                     0.5\n</code></pre> <p>We can set our contrasts in exactly the same way as we did in the previous section (for completeness, we also give the contrasts using DESeq's named coefficients).</p> <p>bloodA vs bloodO (in the control):</p> <pre><code>res1_bloodA_bloodO_control &lt;- results(dds, contrast = bloodA_control - bloodO_control)\n# or equivalently\nres2_bloodA_bloodO_control &lt;- results(dds, \n                                 contrast = list(c(\"patient_B_vs_A\"), # Blood type A\n                                                 c(\"patient_C_vs_A\", # Blood type O\n                                                   \"patient_D_vs_A\"))) # Blood type O\n</code></pre> <p>bloodA vs bloodO (in the treat):</p> <pre><code>res1_bloodO_bloodA_treat &lt;- results(dds, contrast = bloodO_treat - bloodA_treat)\n# or equivalently\nres2_bloodO_bloodA_treat &lt;- results(dds, \n                           contrast = list(c(\"patient_B_vs_A\", # Blood type A\n                                             \"patientB.conditiontreat\"), # Interaction of patient B with treatment\n                                           c(\"patient_C_vs_A\", # Blood type O\n                                             \"patient_D_vs_A\", # Blood type O\n                                             \"patientC.conditiontreat\", # Interaction of patient C with treatment\n                                             \"patientD.conditiontreat\"))) # Interaction of patient B with treatment\n</code></pre> <p>And so on, for other contrasts of interest\u2026</p>"},{"location":"07_extra_contrast_design.html#extra-imbalanced-design","title":"Extra: imbalanced design","text":"<p>Let's take our previous example, but drop one of the samples from the data, so that we only have 2 replicates for it.</p> <pre><code>dds &lt;- dds[, -1] # drop one of the patient C samples\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n</code></pre> <pre><code>## [1] \"Intercept\"                  \"patient_B_vs_A\"            \n## [3] \"patient_C_vs_A\"             \"patient_D_vs_A\"            \n## [5] \"condition_treat_vs_control\" \"patientB.conditiontreat\"   \n## [7] \"patientC.conditiontreat\"    \"patientD.conditiontreat\"\n</code></pre> <p>Define our model matrix and coefficient vectors:</p> <pre><code>mod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n</code></pre> <pre><code>##          (Intercept) patientB patientC patientD conditiontreat\n## sample2            1        0        1        0              0\n## sample3            1        0        1        0              0\n## sample4            1        0        1        0              1\n## sample5            1        0        1        0              1\n## sample6            1        0        1        0              1\n## sample7            1        0        0        1              0\n## sample8            1        0        0        1              0\n## sample9            1        0        0        1              0\n## sample10           1        0        0        1              1\n## sample11           1        0        0        1              1\n## sample12           1        0        0        1              1\n## sample13           1        0        0        0              0\n## sample14           1        0        0        0              0\n## sample15           1        0        0        0              0\n## sample16           1        0        0        0              1\n## sample17           1        0        0        0              1\n## sample18           1        0        0        0              1\n## sample19           1        1        0        0              0\n## sample20           1        1        0        0              0\n## sample21           1        1        0        0              0\n## sample22           1        1        0        0              1\n## sample23           1        1        0        0              1\n## sample24           1        1        0        0              1\n##          patientB:conditiontreat patientC:conditiontreat\n## sample2                        0                       0\n## sample3                        0                       0\n## sample4                        0                       1\n## sample5                        0                       1\n## sample6                        0                       1\n## sample7                        0                       0\n## sample8                        0                       0\n## sample9                        0                       0\n## sample10                       0                       0\n## sample11                       0                       0\n## sample12                       0                       0\n## sample13                       0                       0\n## sample14                       0                       0\n## sample15                       0                       0\n## sample16                       0                       0\n## sample17                       0                       0\n## sample18                       0                       0\n## sample19                       0                       0\n## sample20                       0                       0\n## sample21                       0                       0\n## sample22                       1                       0\n## sample23                       1                       0\n## sample24                       1                       0\n##          patientD:conditiontreat\n## sample2                        0\n## sample3                        0\n## sample4                        0\n## sample5                        0\n## sample6                        0\n## sample7                        0\n## sample8                        0\n## sample9                        0\n## sample10                       1\n## sample11                       1\n## sample12                       1\n## sample13                       0\n## sample14                       0\n## sample15                       0\n## sample16                       0\n## sample17                       0\n## sample18                       0\n## sample19                       0\n## sample20                       0\n## sample21                       0\n## sample22                       0\n## sample23                       0\n## sample24                       0\n## attr(,\"assign\")\n## [1] 0 1 1 1 2 3 3 3\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$patient\n## [1] \"contr.treatment\"\n## \n## attr(,\"contrasts\")$condition\n## [1] \"contr.treatment\"\n</code></pre> <pre><code># define coefficient vectors for each group\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"control\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" &amp; dds$condition == \"treat\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" &amp; dds$condition == \"treat\", ])\n</code></pre> <p>Now let's check what happens to the bloodO_control group:</p> <pre><code>bloodO_control\n</code></pre> <pre><code>##             (Intercept)                patientB                patientC \n##                     1.0                     0.0                     0.4 \n##                patientD          conditiontreat patientB:conditiontreat \n##                     0.6                     0.0                     0.0 \n## patientC:conditiontreat patientD:conditiontreat \n##                     0.0                     0.0\n</code></pre> <p>Notice that whereas before \"patientC\" and \"patientD\" had each a weight of 0.5, now they have different weights. That's because for patientC there's only 2 replicates. So, we have a total of 5 bloodtype O individuals in the control (2 from patient C and 3 from D). Therefore, when we calculate the average coefficients for bloodOs, we need to do it as 0.4 x patientC + 0.6 x patientD.</p> <p>The nice thing about this approach is that we do not need to worry about any of this, the weights come from our <code>colMeans()</code> call automatically. And now, any contrasts that we make will take these weights into account:</p> <pre><code># bloodA vs bloodO (in the control)\nbloodA_control - bloodO_control\n</code></pre> <pre><code>##             (Intercept)                patientB                patientC \n##                     0.0                     0.5                    -0.4 \n##                patientD          conditiontreat patientB:conditiontreat \n##                    -0.6                     0.0                     0.0 \n## patientC:conditiontreat patientD:conditiontreat \n##                     0.0                     0.0\n</code></pre> <pre><code># interaction\n(bloodA_treat - bloodA_control) - (bloodO_treat - bloodO_control)\n</code></pre> <pre><code>##             (Intercept)                patientB                patientC \n##                     0.0                     0.0                    -0.1 \n##                patientD          conditiontreat patientB:conditiontreat \n##                     0.1                     0.0                     0.5 \n## patientC:conditiontreat patientD:conditiontreat \n##                    -0.5                    -0.5\n</code></pre> <p>Part of this lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p> <p>In addition, we would like to thank Hugo Tavares from the Bioinformatics Training Facility of the University of Cambridge.</p>"},{"location":"07a_DEA.html","title":"Gene-level differential expression analysis with DESeq2","text":""},{"location":"07a_DEA.html#differential-expression-analysis-with-deseq2","title":"Differential expression analysis with DESeq2","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 60 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Explain the different steps involved in running <code>DESeq()</code></li> <li>Examine size factors and undertand the source of differences</li> <li>Inspect gene-level dispersion estimates</li> <li>Recognize the importance of dispersion during differential expression analysis</li> </ol> <p>Previously, we created the DESeq2 object using the appropriate design formula.</p> <pre><code># DO NOT RUN\n\n# Create dds object\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                colData = meta %&gt;% column_to_rownames(\"sample\"), \n                                design = ~ condition)\n\n# Filter genes with 0 counts\nkeep &lt;- rowSums(counts(dds)) &gt; 0\ndds &lt;- dds[keep,]\n</code></pre> <p>Then, to run the actual differential expression analysis, we use a single call to the function <code>DESeq()</code>.</p> <pre><code>## Run analysis\ndds &lt;- DESeq(dds)\n</code></pre> <p>And with that we completed the entire workflow for the differential gene expression analysis with DESeq2! The <code>DESeq()</code> function performs a default analysis through the following steps:</p> <ol> <li>Estimation of size factors: <code>estimateSizeFactors()</code></li> <li>Estimation of dispersion: <code>estimateDispersions()</code></li> <li>Negative Binomial GLM fitting and Wald statistics: <code>nbinomWaldTest()</code></li> </ol> <p></p> <p>We will be taking a detailed look at each of these steps to better understand how DESeq2 is performing the statistical analysis and what metrics we should examine to explore the quality of our analysis.</p>"},{"location":"07a_DEA.html#step-1-estimate-size-factors","title":"Step 1: Estimate size factors","text":"<p>The first step in the differential expression analysis is to estimate the size factors, which is exactly what we already did to normalize the raw counts.</p> <p></p> <p>DESeq2 will automatically estimate the size factors when performing the differential expression analysis. However, if you have already generated the size factors using <code>estimateSizeFactors()</code>, as we did earlier, then DESeq2 will use these values.</p> <p>To normalize the count data, DESeq2 calculates size factors for each sample using the median of ratios method discussed previously in the count normalization lesson.</p>"},{"location":"07a_DEA.html#vampirium-de-analysis-examining-the-size-factors","title":"Vampirium DE analysis: examining the size factors","text":"<p>Let's take a quick look at size factor values we have for each sample:</p> <pre><code>## Check the size factors\nsizeFactors(dds)\n</code></pre> <pre><code>control_1 control_2 control_3 garlicum_2 garlicum_3 vampirium_1 vampirium_2 \n 1.1149694  0.9606733  0.7492240  1.5633640  0.9359695  1.2262649  1.1405026 \nvampirium_3 \n 0.6542030\n</code></pre> <p>These numbers should be identical to those we generated initially when we had run the function <code>estimateSizeFactors(dds)</code>. Take a look at the total number of reads for each sample:</p> <pre><code>## Total number of raw counts per sample\ncolSums(counts(dds))\n</code></pre> <p>How do the numbers correlate with the size factor?</p> <p>We see that the larger size factors correspond to the samples with higher sequencing depth, which makes sense, because to generate our normalized counts we need to divide the counts by the size factors. This accounts for the differences in sequencing depth between samples.</p> <p>Now take a look at the total depth after normalization using:</p> <pre><code>## Total number of normalized counts per sample\ncolSums(counts(dds, normalized=T))\n</code></pre> <p>How do the values across samples compare with the total counts taken for each sample?</p> <p>You might have expected the counts to be the exact same across the samples after normalization. However, DESeq2 also accounts for RNA composition during the normalization procedure. By using the median ratio value for the size factor, DESeq2 should not be biased to a large number of counts sucked up by a few DE genes; however, this may lead to the size factors being quite different than what would be anticipated just based on sequencing depth.</p>"},{"location":"07a_DEA.html#step-2-estimate-gene-wise-dispersion","title":"Step 2: Estimate gene-wise dispersion","text":"<p>The next step in the differential expression analysis is the estimation of gene-wise dispersions. Before we get into the details, we should have a good idea about what dispersion is referring to in DESeq2.</p> <p></p> <p>In RNA-seq count data, we know:</p> <ol> <li>To determine differentially expressed genes, we need to identify genes that have significantly different mean expression between groups given the variation within the groups (between replicates).</li> <li>The variation within group (between replicates) needs to account for the fact that variance increases with the mean expression, as shown in the plot below (each black dot is a gene).</li> </ol> <p></p> <p>To accurately identify DE genes, DESeq2 needs to account for the relationship between the variance and mean. We don't want all of our DE genes to be genes with low counts because the variance is lower for lowly expressed genes.</p> <p>Instead of using variance as the measure of variation in the data (since variance correlates with gene expression level), DESeq2 uses a measure of variation called dispersion, which accounts for a gene's variance and mean expression level. Dispersion is calculated by:</p> <p>\\(Var=\\mu+\\alpha*\\mu^2\\), where:</p> <ul> <li>\\(\\alpha\\) = dispersion</li> <li>\\(Var\\) = variance</li> <li>\\(\\mu\\) = mean</li> </ul> <p>Which results in the following relationship:</p> Effect on dispersion Variance increases Dispersion increases Mean expression increases Dispersion decreases <p>For genes with moderate to high count values, the square root of dispersion will be equal to the coefficient of variation. So 0.01 dispersion means 10% variation around the mean expected across biological replicates. The dispersion estimates for genes with the same mean will differ only based on their variance. Therefore, the dispersion estimates reflect the variance in gene expression for a given mean value. In the plot below, each black dot is a gene, and the dispersion is plotted against the mean expression (across within-group replicates) for each gene.</p> <p></p> <p>How does the dispersion relate to our model?</p> <p>To accurately model sequencing counts, we need to generate accurate estimates of within-group variation (variation between replicates of the same sample group) for each gene. With only a few (3-6) replicates per group, the estimates of variation for each gene are often unreliable. </p> <p>To address this problem, DESeq2 shares information across genes to generate more accurate estimates of variation based on the mean expression level of the gene using a method called 'shrinkage'. DESeq2 assumes that genes with similar expression levels should have similar dispersion. </p> <p>Note on estimating gene dispersion</p> <p>DESeq2 estimates the dispersion for each gene separately, based on the gene's expression level (mean counts of within-group replicates) and variance.</p>"},{"location":"07a_DEA.html#step-3-fit-and-shrink-gene-wise-dispersion-estimates","title":"Step 3: Fit and shrink gene-wise dispersion estimates","text":"<p>The next step in the workflow is to fit a curve to the gene-wise dispersion estimates and then shrink those estimates towards the curve. The idea behind fitting a curve to the data is that different genes will have different scales of biological variability, but, across all genes, there will be a distribution of reasonable estimates of dispersion.</p> <p></p> <p>This curve is displayed as a red line in the figure below, which plots the estimate for the expected dispersion value for genes of a given expression strength. Each black dot is a gene with an associated mean expression level and maximum likelihood estimation (MLE) of the dispersion (Step 1).</p> <p></p> <p>After we fit the curve to the estimates, we can shrink the gene-wise dispersion estimates toward the expected dispersion values. Thanks to the curve we can identify more accurately differentially expressed genes when sample sizes are small, and the strength of the shrinkage for each gene depends on:</p> <ul> <li>how close gene dispersions are from the curve</li> <li>sample size (more samples = less shrinkage)</li> </ul> <p>This shrinkage method is particularly important to reduce false positives in the differential expression analysis. Genes with low dispersion estimates are shrunken towards the curve, and the more accurate, higher shrunken values are output for fitting of the model and differential expression testing. These shrunken estimates represent the within-group variation that is needed to determine whether the gene expression across groups is significantly different.</p> <p>Dispersion estimates that are slightly above the curve are also shrunk toward the curve for better dispersion estimation; however, genes with extremely high dispersion values are not. This is due to the likelihood that the gene does not follow the modeling assumptions and has higher variability than others for biological or technical reasons [1]. Shrinking the values toward the curve could result in false positives, so these values are not shrunken. These genes are shown surrounded by blue circles below.</p> <p></p> <p>This is a good plot to evaluate whether your data is a good fit for the DESeq2 model. You expect your data to generally scatter around the curve, with the dispersion decreasing with increasing mean expression levels. If you see a cloud or different shapes, then you might want to explore your data more to see if you have contamination or outlier samples. Note how much shrinkage you get across the whole range of means in the <code>plotDispEsts()</code> plot for any experiment with low degrees of freedom.</p> <p>Examples of worrisome dispersion plots are shown below:</p> <p>The plot below shows a cloud of dispersion values, which do not generally follow the curve. This would suggest a bad fit of the data to the model.</p> <p></p> <p>The next plot shows the dispersion values initially decreasing, then increasing with larger expression values. The larger mean expression values should not have larger dispersions based on our expectations - we expect decreasing dispersions with increasing mean. This indicates that there is less variation for more highly expressed genes than expected. This also indicates that there could be an outlier sample or contamination present in our analysis.</p> <p></p>"},{"location":"07a_DEA.html#vampirium-de-analysis-exploring-the-dispersion-estimates-and-assessing-model-fit","title":"Vampirium DE analysis: exploring the dispersion estimates and assessing model fit","text":"<p>Let's take a look at the dispersion estimates for our Vampirium data:</p> <pre><code>## Plot dispersion estimates\nplotDispEsts(dds)\n</code></pre> <p></p> Since we have a small sample size, for many genes we see quite a bit of shrinkage. Do you think our data are a good fit for the model? <p>We see a nice decrease in dispersion with increasing mean expression, which is good. We also see the dispersion estimates generally surround the curve, which is also expected. Overall, this plot looks good. We do see strong shrinkage, which is likely due to the fact that we have only two replicates for one of our sample groups. The more replicates we have, the less shrinkage is applied to the dispersion estimates, and the more DE genes are able to be identified. We would generally recommend having at least 4 biological replicates per condition for better estimation of variation.</p> <p>Exercise 1</p> <p>Given the dispersion plot below, would you have any concerns regarding the fit of your data to the model? </p> <ul> <li>If not, what aspects of the plot makes you feel confident about your data?</li> <li>If so, what are your concerns? What would you do to address them?</li> </ul> <p></p> Solution to Exercise 1 <p>The plot looks really bad. The fitted line (red) is above the final dispersions, and there is a \"rainfall\" coming from the cloud of dispersions. This could mean that our original data has some sort of contamination or outlier, or that the count matrix is not a \"raw\" count matrix.</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p> <p>Some materials and hands-on activities were adapted from RNA-seq workflow on the Bioconductor website</p>"},{"location":"07b_hypothesis_testing.html","title":"Hypothesis testing with DESeq2","text":""},{"location":"07b_hypothesis_testing.html#deseq2-model-fitting-and-hypothesis-testing","title":"DESeq2: Model fitting and Hypothesis testing","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 90 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Demonstrate the use of the design formula with simple and complex designs</li> <li>Construct R code to execute the differential expression analysis workflow with DESeq2</li> <li>Describe the process of model fitting</li> <li>Compare two methods for hypothesis testing (Wald test vs. LRT)</li> <li>Discuss the steps required to generate a results table for pairwise comparisons (Wald test)</li> <li>Recognize the importance of multiple test correction</li> <li>Identify different methods for multiple test correction</li> <li>Summarize the different levels of gene filtering</li> <li>Evaluate the number of differentially expressed genes produced for each comparison</li> <li>Construct R objects containing significant genes from each comparison</li> </ol> <p>The final step in the DESeq2 workflow is taking the counts for each gene and fitting it to the model and testing for differential expression.</p> <p></p>"},{"location":"07b_hypothesis_testing.html#generalized-linear-model","title":"Generalized Linear Model","text":"<p>As described earlier, the count data generated by RNA-seq exhibits overdispersion (variance &gt; mean) and the statistical distribution used to model the counts needs to account for this. As such, DESeq2 uses a negative binomial distribution to model the RNA-seq counts using the equation below:</p> <p></p> <p>The two parameters required are the size factor, and the dispersion estimate. Next, a generalized linear model (GLM) of the NB family is used to fit the data. Modeling is a mathematically formalized way to approximate how the data behaves given a set of parameters.</p> About GLMs <p>\"In statistics, the generalized linear model (GLM) is a flexible generalization of ordinary linear regression that allows for response variables that have error distribution models other than a normal distribution. The GLM generalizes linear regression by allowing the linear model to be related to the response variable via a link function and by allowing the magnitude of the variance of each measurement to be a function of its predicted value.\" (Wikipedia).</p> <p>After the model is fit, coefficients are estimated for each sample group along with their standard error. The coefficients are the estimates for the log2 fold changes, and will be used as input for hypothesis testing.</p> <p></p>"},{"location":"07b_hypothesis_testing.html#hypothesis-testing","title":"Hypothesis testing","text":"<p>The first step in hypothesis testing is to set up a null hypothesis for each gene. In our case, the null hypothesis is that there is no differential expression across the two sample groups (LFC == 0). Notice that we can do this without observing any data, because it is based on a thought experiment. Second, we use a statistical test to determine if based on the observed data, the null hypothesis can be rejected.</p>"},{"location":"07b_hypothesis_testing.html#wald-test","title":"Wald test","text":"<p>In DESeq2, the Wald test is the default used for hypothesis testing when comparing two groups. The Wald test is a test usually performed on parameters that have been estimated by maximum likelihood. In our case we are testing each gene model coefficient (LFC) which was derived using parameters like dispersion, which were estimated using maximum likelihood.</p> <p>DESeq2 implements the Wald test by:</p> <ol> <li>Taking the LFC and dividing it by its standard error, resulting in a z-statistic.</li> <li>The z-statistic is compared to a standard normal distribution, and a p-value is computed reporting the probability that a z-statistic at least as extreme as the observed value would be selected at random.</li> <li>If the p-value is small we reject the null hypothesis and state that there is evidence against the null (i.e. the gene is differentially expressed).</li> </ol> <p>The model fit and Wald test were already run previously as part of the <code>DESeq()</code> function:</p> <pre><code>## DO NOT RUN THIS CODE\n\n## Create DESeq2Dataset object\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n## Run analysis\ndds &lt;- DESeq(dds)\n</code></pre>"},{"location":"07b_hypothesis_testing.html#likelihood-ratio-test-lrt","title":"Likelihood ratio test (LRT)","text":"<p>An alternative to pair-wise comparisons is to analyze all levels of a factor at once. By default, the Wald test is used to generate the results table, but DESeq2 also offers the LRT which is used to identify any genes that show change in expression across the different levels. This type of test can be especially useful in analyzing time course experiments.</p> <p>LRT vs Wald test</p> <p>The Wald test evaluates whether a gene's expression is up- or down-regulated in one group compared to another, while the LRT identifies genes that are changing in expression in any combination across the different sample groups. For example:</p> <ul> <li>Gene expression is equal between Control and Vampirium, but is less in Garlicum</li> <li>Gene expression of Vampirium is lower than Control and Control is lower than Garlicum</li> <li>Gene expression of Garlicum is equal to Control, but less than Vampirium.</li> </ul> <p>Using LRT, we are evaluating the null hypothesis that the full model fits just as well as the reduced model. If we reject the null hypothesis, this suggests that there is a significant amount of variation explained by the full model (and our main factor of interest), therefore the gene is differentially expressed across the different levels. Generally, this test will result in a larger number of genes than the individual pair-wise comparisons. However, while the LRT is a test of significance for differences of any level of the factor, one should not expect it to be exactly equal to the union of sets of genes using Wald tests (although we do expect a majority overlap).</p> <p>To use the LRT, we use the <code>DESeq()</code> function but this time adding two arguments:</p> <ol> <li>specifying that we want to use the LRT test</li> <li>the \"reduced\" model</li> </ol> <pre><code># The full model was specified previously with the `design = ~ condition`:\n# dds &lt;- DESeqDataSetFromTximport(txi,\n                                   # colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              # design = ~ condition)\n\n# Likelihood ratio test\ndds_lrt &lt;- DESeq(dds, test=\"LRT\", reduced = ~ 1)\n</code></pre> <p>Since our \"full\" model only has one factor (<code>sampletype</code>), the \"reduced\" model (removing that factor) is just the intercept (~ 1). You will find that similar columns are reported for the LRT test. One thing to note is, even though there are fold changes present they are not directly associated with the actual hypothesis test.</p> Time course analysis with LTR <p>The LRT test can be especially helpful when performing time course analyses. We can use the LRT to explore whether there are any significant differences in treatment effect between any of the timepoints.</p> <p>For have an experiment looking at the effect of treatment over time on mice of two different genotypes. We could use a design formula for our \"full model\" that would include the major sources of variation in our data: genotype, treatment, time, and our main condition of interest, which is the difference in the effect of treatment over time (treatment:time).</p> <pre><code>full_model &lt;- ~ genotype + treatment + time + treatment:time\n</code></pre> <p>To perform the LRT test, we can determine all genes that have significant differences in expression between treatments across time points by giving the \"reduced model\" without the <code>treatment:time</code> term:</p> <pre><code>reduced_model &lt;- ~ genotype + treatment + time\n</code></pre> <p>Then, we could run our test by using the following code:</p> <pre><code>dds_lrt &lt;- DESeqDataSetFromMatrix(countData = data, colData = metadata, design = ~ genotype + treatment + time + treatment:time)\n\ndds_lrt_time &lt;- DESeq(dds_lrt, test=\"LRT\", reduced = ~ genotype + treatment + time)\n</code></pre> <p>This analysis will not return genes where the treatment effect does not change over time, even though the genes may be differentially expressed between groups at a particular time point, as shown in the figure below:</p> <p></p> <p>The significant DE genes will represent those genes that have differences in the effect of treatment over time, an example is displayed in the figure below:</p> <p></p>"},{"location":"07b_hypothesis_testing.html#multiple-test-correction","title":"Multiple test correction","text":"<p>Regardless of whether we use the Wald test or the LRT, each gene that has been tested will be associated with a p-value. It is this result which we use to determine which genes are considered significantly differentially expressed. However, we cannot use the p-value directly.</p>"},{"location":"07b_hypothesis_testing.html#what-does-the-p-value-mean","title":"What does the p-value mean?","text":"<p>A gene with a significance cut-off of p \\&lt; 0.05, means there is a 5% chance it is a false positive. For example, if we test 20,000 genes for differential expression, at p \\&lt; 0.05 we would expect to find 1,000 DE genes by chance. If we found 3000 genes to be differentially expressed total, roughly one third of our genes are false positives! We would not want to sift through our \"significant\" genes to identify which ones are true positives.</p> <p>Since each p-value is the result of a single test (single gene). The more genes we test, the more we inflate the false positive rate. This is the multiple testing problem.</p>"},{"location":"07b_hypothesis_testing.html#correcting-the-p-value-for-multiple-testing","title":"Correcting the p-value for multiple testing","text":"<p>There are a few common approaches for multiple test correction:</p> <ul> <li>Bonferroni: The adjusted p-value is calculated by: \\(p-value*m\\) (\\(m\\) = total number of tests). This is a very conservative approach with a high probability of false negatives, so is generally not recommended.</li> <li>FDR/Benjamini-Hochberg: Benjamini and Hochberg (1995) defined the concept of False Discovery Rate (FDR) and created an algorithm to control the expected FDR below a specified level given a list of independent p-values. More info about BH.</li> <li>Q-value / Storey method: The minimum FDR that can be attained when calling that feature significant. For example, if gene X has a q-value of 0.013 it means that 1.3% of genes that show p-values at least as small as gene X are false positives.</li> </ul> <p>DESeq2 helps reduce the number of genes tested by removing those genes unlikely to be significantly DE prior to testing, such as those with low number of counts and outlier samples (see below). However, multiple test correction is also implemented to reduce the False Discovery Rate using an interpretation of the Benjamini-Hochberg procedure.</p> <p>So what does FDR \\&lt; 0.05 mean?</p> <p>By setting the FDR cutoff to &lt; 0.05, we're saying that the proportion of false positives we expect amongst our differentially expressed genes is 5%. For example, if you call 500 genes as differentially expressed with an FDR cutoff of 0.05, you expect 25 of them to be false positives.</p>"},{"location":"07b_hypothesis_testing.html#exploring-results-wald-test","title":"Exploring Results (Wald test)","text":"<p>By default DESeq2 uses the Wald test to identify genes that are differentially expressed between two sample groups. Given the factor(s) used in the design formula, and how many factor levels are present, we can extract results for a number of different comparisons. Here, we will walk you through how to obtain results from the <code>dds</code> object and provide some explanations on how to interpret them.</p> <p>Wald test on continuous variables</p> <p>The Wald test can also be used with continuous variables. If the variable of interest provided in the design formula is continuous-valued, then the reported <code>log2FoldChange</code> is per unit of change of that variable.</p>"},{"location":"07b_hypothesis_testing.html#specifying-contrasts","title":"Specifying contrasts","text":"<p>In our dataset, we have three sample groups so we can make three possible pairwise comparisons:</p> <ol> <li>Control vs. Vampirium</li> <li>Garlicum vs. Vampirium</li> <li>Garlicum vs. Control</li> </ol> <p>We are really only interested in 1 and 2 from above. When we initially created our <code>dds</code> object we had provided <code>~ condition</code> as our design formula, indicating that <code>sampletype</code> is our main factor of interest.</p> <p>To indicate which two sample groups we are interested in comparing, we need to specify contrasts. The contrasts are used as input to the DESeq2 <code>results()</code> function to extract the desired results.</p> <p>Contrasts can be specified in three different ways:</p> <p>1.Contrasts can be supplied as a character vector with exactly three elements: the name of the factor (of interest) in the design formula, the name of the two factors levels to compare. The factor level given last is the base level for the comparison. The syntax is given below:</p> <pre><code># DO NOT RUN!\ncontrast &lt;- c(\"condition\", \"level_to_compare\", \"base_level\")\nresults(dds, contrast = contrast)\n</code></pre> <p>2.Contrasts can be given as a list of 2 character vectors: the names of the fold changes for the level of interest, and the names of the fold changes for the base level. These names should match identically to the elements of <code>resultsNames(object)</code>. This method can be useful for combining interaction terms and main effects.</p> <pre><code># DO NOT RUN!\nresultsNames(dds) # to see what names to use\ncontrast &lt;- list(resultsNames(dds)[1], resultsNames(dds)[2])\nresults(dds, contrast = contrast)\n</code></pre> <p>3.One of the results from <code>resultsNames(dds)</code> and the <code>name</code> argument. This one is the simplest but it can also be very restrictive:</p> <pre><code># DO NOT RUN!\nresultsNames(dds) # to see what names to use\nresults(dds, name = resultsNames(dds)[2])\n</code></pre> <p>Alternatively, if you only had two factor levels you could do nothing and not worry about specifying contrasts (i.e. <code>results(dds)</code>). In this case, DESeq2 will choose what your base factor level based on alphabetical order of the levels.</p> <p>To start, we want to evaluate expression changes between the control samples and the vampirium samples. As such we will use the first method for specifying contrasts and create a character vector:</p> <p>Exercise 1</p> <p>Define contrasts for Vampirium samples using one of the two methods above.</p> <pre><code>## your code here\n#contrast_cont &lt;- \n</code></pre> Solution to Exercise 1 <p>First let's check the metadata:</p> <pre><code>meta\n</code></pre> <p>Since we have only given the <code>condition</code> column in the design formula, the first element should be <code>condition</code>. The second element is the condition we are interested, <code>control</code> and our base level is <code>vampirium</code>.</p> <pre><code>contrast_cont &lt;- c(\"condition\", \"control\", \"vampirium\")\n</code></pre> <p>Does it matter what I choose to be my base level?</p> <p>Yes, it does matter. Deciding what level is the base level will determine how to interpret the fold change that is reported. So for example, if we observe a log2 fold change of -2 this would mean the gene expression is lower in factor level of interest relative to the base level. Thus, if leaving it up to DESeq2 to decide on the contrasts be sure to check that the alphabetical order coincides with the fold change direction you are anticipating.</p>"},{"location":"07b_hypothesis_testing.html#the-results-table","title":"The results table","text":"<p>Now that we have our contrast created, we can use it as input to the <code>results()</code> function. Let's take a quick look at the help manual for the function:</p> <pre><code>?results\n</code></pre> <p>You will see we have the option to provide a wide array of arguments and tweak things from the defaults as needed. As we go through the lesson we will keep coming back to the help documentation to discuss some arguments that are good to know about.</p> <pre><code>## Extract results for Control vs Vampirium samples\nres_tableCont &lt;- results(dds, contrast=contrast_cont, alpha = 0.05)\n</code></pre> <p>Warning</p> <p>For our analysis, in addition to the <code>contrast</code> argument we will also provide a value of 0.05 for the <code>alpha</code> argument. We will describe this in more detail when we talk about gene-level filtering.</p> <p>The results table that is returned to us is a <code>DESeqResults</code> object, which is a simple subclass of DataFrame. In many ways it can be treated like a dataframe (i.e when accessing/subsetting data), however it is important to recognize that there are differences for downstream steps like visualization.</p> <pre><code># Check what type of object is returned\nclass(res_tableCont)\n</code></pre> <p>Now let's take a look at what information is stored in the results:</p> <pre><code># What is stored in results?\nres_tableCont %&gt;% \n  data.frame() %&gt;% \n  head()\n</code></pre> <p>We have six columns of information reported for each gene (row). We can use the <code>mcols()</code> function to extract information on what the values stored in each column represent:</p> <pre><code># Get information on each column in results\nmcols(res_tableCont, use.names=T)\n</code></pre> <ul> <li><code>baseMean</code>: mean of normalized counts for all samples</li> <li><code>log2FoldChange</code>: log2 fold change</li> <li><code>lfcSE</code>: standard error</li> <li><code>stat</code>: Wald statistic</li> <li><code>pvalue</code>: Wald test p-value</li> <li><code>padj</code>: BH adjusted p-values</li> </ul>"},{"location":"07b_hypothesis_testing.html#p-values","title":"p-values","text":"<p>The p-value is a probability value used to determine whether there is evidence to reject the null hypothesis. A smaller p-value means that there is stronger evidence in favor of the alternative hypothesis.</p> <p>The <code>padj</code> column in the results table represents the p-value adjusted for multiple testing, and is the most important column of the results. Typically, a threshold such as <code>padj</code> \\&lt; 0.05 is a good starting point for identifying significant genes. The default method for multiple test correction in DESeq2 is the FDR. Other methods can be used with the <code>pAdjustMethod</code> argument in the <code>results()</code> function.</p>"},{"location":"07b_hypothesis_testing.html#gene-level-filtering","title":"Gene-level filtering","text":"<p>Let's take a closer look at our results table. As we scroll through it, you will notice that for selected genes there are NA values in the <code>pvalue</code> and <code>padj</code> columns. What does this mean?</p> <p></p> <p>The missing values represent genes that have undergone filtering as part of the <code>DESeq()</code> function. Prior to differential expression analysis it is beneficial to omit genes that have little or no chance of being detected as differentially expressed. This will increase the power to detect differentially expressed genes. DESeq2 does not physically remove any genes from the original counts matrix, and so all genes will be present in your results table. The genes omitted by DESeq2 meet one of the three filtering criteria outlined below:</p> <p>1. Genes with zero counts in all samples</p> <p>If within a row, all samples have zero counts there is no expression information and therefore these genes are not tested. In our case, there are no genes that fulfill this criteria, since we have already filtered out these genes ourselves when we created our <code>dds</code> object.</p> <pre><code># Show genes with zero expression\nres_tableCont %&gt;%\n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(baseMean==0) %&gt;%\n  head()\n</code></pre> <p>Info</p> <p>If there would be any genes meeting this criteria, the baseMean column for these genes will be zero, and the log2 fold change estimates, p-value and adjusted p-value will all be set to NA.</p> <p>2. Genes with an extreme count outlier</p> <p>The <code>DESeq()</code> function calculates, for every gene and for every sample, a diagnostic test for outliers called Cook's distance. Cook's distance is a measure of how much a single sample is influencing the fitted coefficients for a gene, and a large value of Cook's distance is intended to indicate an outlier count. Genes which contain a Cook's distance above a threshold are flagged, however at least 3 replicates are required for flagging, as it is difficult to judge which sample might be an outlier with only 2 replicates. We can turn off this filtering by using the <code>cooksCutoff</code> argument in the <code>results()</code> function.</p> <pre><code># Show genes that have an extreme outlier\nres_tableCont %&gt;% \n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(is.na(pvalue) &amp; is.na(padj) &amp; baseMean &gt; 0) %&gt;%\n  head()\n</code></pre> <p>It seems that we have some genes with outliers!</p> <p>Info</p> <p>If a gene contains a sample with an extreme count outlier then the p-value and adjusted p-value will be set to NA.</p> <p>3. Genes with a low mean normalized counts</p> <p>DESeq2 defines a low mean threshold, that is empirically determined from your data, in which the fraction of significant genes can be increased by reducing the number of genes that are considered for multiple testing. This is based on the notion that genes with very low counts are not likely to see significant differences typically due to high dispersion.</p> <p></p> <p>Image courtesy of slideshare presentation from Joachim Jacob, 2014.</p> <p>At a user-specified value (<code>alpha = 0.05</code>), DESeq2 evaluates the change in the number of significant genes as it filters out increasingly bigger portions of genes based on their mean counts, as shown in the figure above. The point at which the number of significant genes reaches a peak is the low mean threshold that is used to filter genes that undergo multiple testing. There is also an argument to turn off the filtering off by setting <code>independentFiltering = F</code>.</p> <pre><code># Filter genes below the low mean threshold\nres_tableCont %&gt;% \n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(!is.na(pvalue) &amp; is.na(padj) &amp; baseMean &gt; 0) %&gt;%\n  head()\n</code></pre> <p>Info</p> <p>If a gene is filtered by independent filtering, then only the adjusted p-value will be set to NA.</p> <p>Warning</p> <p>DESeq2 will perform the filtering outlined above by default; however other DE tools, such as EdgeR will not. Filtering is a necessary step, even if you are using limma-voom and/or edgeR's quasi-likelihood methods. Be sure to follow pre-filtering steps when using other tools, as outlined in their user guides found on Bioconductor as they generally perform much better.*</p>"},{"location":"07b_hypothesis_testing.html#fold-changes","title":"Fold changes","text":"<p>Another important column in the results table, is the <code>log2FoldChange</code>. With large significant gene lists it can be hard to extract meaningful biological relevance. To help increase stringency, one can also add a fold change threshold. Keep in mind when setting that value that we are working with log2 fold changes, so a cutoff of <code>log2FoldChange</code> \\&lt; 1 would translate to an actual fold change of 2.</p> An alternative approach to add the fold change threshold <p>The <code>results()</code> function has an option to add a fold change threshold using the <code>lfcThreshold</code> argument. This method is more statistically motivated, and is recommended when you want a more confident set of genes based on a certain fold-change. It actually performs a statistical test against the desired threshold, by performing a two-tailed test for log2 fold changes greater than the absolute value specified. The user can change the alternative hypothesis using <code>altHypothesis</code> and perform two one-tailed tests as well. This is a more conservative approach, so expect to retrieve a much smaller set of genes!</p> <pre><code>res_tableCont_LFC1 &lt;- results(dds, contrast=contrast_cont, alpha = 0.05, lfcThreshold = 1)\n</code></pre> <p>The fold changes reported in the results table are the coefficients calculated in the GLM mentioned in the previous section.</p>"},{"location":"07b_hypothesis_testing.html#summarizing-results","title":"Summarizing results","text":"<p>To summarize the results table, a handy function in DESeq2 is <code>summary()</code>. Confusingly it has the same name as the function used to inspect data frames. This function, when called with a DESeq results table as input, will summarize the results using a default threshold of padj \\&lt; 0.1. However, since we had set the <code>alpha</code> argument to 0.05 when creating our results table threshold: FDR \\&lt; 0.05 (padj/FDR is used even though the output says <code>p-value &lt; 0.05</code>). Let's start with the OE vs control results:</p> <pre><code>## Summarize results\nsummary(res_tableCont, alpha = 0.05)\n</code></pre> <p>In addition to the number of genes up- and down-regulated at the default threshold, the function also reports the number of genes that were tested (genes with non-zero total read count), and the number of genes not included in multiple test correction due to a low mean count.</p>"},{"location":"07b_hypothesis_testing.html#extracting-significant-differentially-expressed-genes","title":"Extracting significant differentially expressed genes","text":"<p>Let's first create variables that contain our threshold criteria. We will only be using the adjusted p-values in our criteria:</p> <pre><code>### Set thresholds\npadj.cutoff &lt;- 0.05\n</code></pre> <p>We can easily subset the results table to only include those that are significant using the <code>dplyr::filter()</code> function, but first we will convert the results table into a tibble:</p> <pre><code># Create a tibble of results and add gene IDs to new object\nres_tableCont_tb &lt;- res_tableCont %&gt;%\n  as_tibble(rownames = \"gene\") %&gt;%\n  relocate(gene, .before = baseMean)\n\nhead(res_tableCont_tb)\n</code></pre> <p>Now we can subset that table to only keep the significant genes using our pre-defined thresholds:</p> <pre><code># Subset the tibble to keep only significant genes\nsigCont &lt;- res_tableCont_tb %&gt;%\n  dplyr::filter(padj &lt; padj.cutoff)\n</code></pre> <pre><code># Take a quick look at this tibble\nsigCont\n</code></pre> <p>Now that we have extracted the significant results, we are ready for visualization!</p> <p>Exercise 2</p> <p>Vampirium Differential Expression Analysis: Garlicum versus Vampirium</p> <p>Now that we have results for the Control vs Vampirium results, do the same for the Garlicum vs Vampirium samples.</p> <ol> <li>Create a contrast vector called <code>contrast_gar</code>.</li> <li>Use contrast vector in the <code>results()</code> to extract a results table and store that to a variable called <code>res_tableGar</code>.</li> <li>Using a p-adjusted threshold of 0.05 (<code>padj.cutoff &lt; 0.05</code>), subset <code>res_tableGar</code> to report the number of genes that are up- and down-regulated in garlicum compared to vampirium.</li> <li>How many genes are differentially expressed in the Garlicum compared to Vampirium? How does this compare to the Control vs Vampirium significant gene list (in terms of numbers)?</li> </ol> Solutions to Exercise 2 <ol> <li>Contrast for Garlicum vs Vampirium</li> </ol> <pre><code>contrast_gar &lt;- c(\"condition\", \"garlicum\", \"vampirium\")\n</code></pre> <ol> <li>Extract results</li> </ol> <pre><code>res_tableGar &lt;- results(dds, contrast = contrast_gar)\n</code></pre> <ol> <li>Significant genes</li> </ol> <pre><code>padj.cutoff &lt;- 0.05\nsigGar &lt;- res_tableGar %&gt;% as_tibble(rownames = \"gene\") %&gt;%\n  relocate(gene, .before = baseMean) %&gt;% dplyr::filter(padj &lt; padj.cutoff)\n</code></pre> <pre><code>sigGar\n</code></pre> <ol> <li>Comparison against sigGar vs sigCont</li> </ol> <pre><code>nrow(sigGar) #number of significant genes in Garlicum vs Vampirium\nnrow(sigCont) #number of significant genes in Control vs Vampirium\n</code></pre> <pre><code>nrow(sigCont) - nrow(sigGar)\n</code></pre> <p>sigCont has almost 2000 more genes that are differentially expressed!</p> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p> <p>Some materials and hands-on activities were adapted from RNA-seq workflow on the Bioconductor website</p>"},{"location":"07c_DEA_visualization.html","title":"Log Fold Shrinkage and DEA visualizations","text":""},{"location":"07c_DEA_visualization.html#dea-visualization-and-log-fold-shrinkage","title":"DEA Visualization and Log Fold Shrinkage","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 75 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Explain log fold change shrinkage</li> <li>Setup results data for application of visualization techniques</li> <li>Describe different data visualization useful for exploring results from a DGE analysis</li> <li>Create a volcano plot and MA plot to evaluate relationship among DGE statistics</li> <li>Create a heatmap to illustrate expression changes of differentially expressed genes</li> </ol> <p>In the previous lessons, we learned about how to generate a table with Differentially Expressed genes.</p> <pre><code># DO NOT RUN\nres_tableCont &lt;- results(dds, contrast=contrast_cont, alpha = 0.05)\n\nhead(res_tableCont)\n</code></pre> <p>The problem with these fold change estimates is that they are not entirely accurate as they do not account for the large dispersion we observe with low read counts. To address this, the log2 fold changes need to be adjusted.</p> <p>To generate more accurate log2 fold change (LFC) estimates, DESeq2 allows for the shrinkage of the LFC estimates toward zero when the information for a gene is low, which could include:</p> <ul> <li>Low counts</li> <li>High dispersion values</li> </ul> <p>LFC shrinkage uses information from all genes to generate more accurate estimates. Specifically, the distribution of LFC estimates for all genes is used (as a prior) to shrink the LFC estimates of genes with little information or high dispersion toward more likely (lower) LFC estimates.</p> <p></p> <p>Illustration taken from the DESeq2 paper.</p> <p>In the figure above, we have an example using two genes: green gene and purple gene. For each gene the expression values are plotted for each sample in the two different mouse strains (C57BL/6J and DBA/2J). Both genes have the same mean values for the two sample groups, but the green gene has little within-group variation while the purple gene has high levels of variation. For the green gene with low within-group variation, the unshrunken LFC estimate (vertex of the green solid line) is very similar to the shrunken LFC estimate (vertex of the green dotted line). However, LFC estimates for the purple gene are quite different due to the high dispersion. So even though two genes can have similar normalized count values, they can have differing degrees of LFC shrinkage. Notice the LFC estimates are shrunken toward the prior (black solid line).</p> <p>Shrinking the log2 fold changes will not change the total number of genes that are identified as significantly differentially expressed. The shrinkage of fold change is to help with downstream assessment of results. For example, if you wanted to subset your significant genes based on fold change for further evaluation, you may want to use shrunken values. Additionally, for functional analysis tools such as GSEA which require fold change values as input you would want to provide shrunken values.</p> <p>To generate the shrunken log2 fold change estimates, you have to run an additional step on your results object (that we will create below) with the function <code>lfcShrink()</code>.</p> <pre><code># Save the unshrunken results to compare\nres_tableCont_unshrunken &lt;- res_tableCont\n\n# Apply fold change shrinkage\nres_tableCont &lt;- lfcShrink(dds, coef=\"condition_control_vs_vampirium\", type=\"apeglm\")\n</code></pre> <p>Depending on the version of DESeq2 you are using the default method for shrinkage estimation will differ. The defaults can be changed by adding the argument <code>type</code> in the <code>lfcShrink()</code> function as we have above. For most recent versions of DESeq2, <code>type=\"normal\"</code> is the default and was the only method in earlier versions. It has been shown that in most situations there are alternative methods that have less bias than the 'normal' method, and therefore we chose to use apeglm.</p> More information on shrinkage <p>The DESeq2 vignette has an Extended section on shrinkage estimators that is quite useful.</p> <p><code>contrast</code> vs <code>coef</code></p> <p>When using the shrinkage method, rather than using the <code>contrast</code> argument you will be required to specify <code>coef</code>. Using contrast forms an expanded model matrix, treating all factor levels equally, and averages over all distances between all pairs of factor levels to estimate the prior. Using coef, means looking only at that column of the model matrix (so usually that would be one level against the reference level) and estimates the prior for that coefficient from the distribution of those MLE of coefficients. When using coef, the shrinkage depends on which level is chosen as reference.</p> <p>How do I know what to value to provide to the <code>coef</code> argument?</p> <p>The value you provide here needs to match identically to what is stored in the column header of the coefficients table. To see what values you have to work with you can use <code>resultsNames(dds)</code>.</p>"},{"location":"07c_DEA_visualization.html#visualizing-the-results","title":"Visualizing the results","text":"<p>When we are working with large amounts of data it can be useful to display that information graphically. During this lesson, we will get you started with some basic and more advanced plots commonly used when exploring differential gene expression data, however, many of these plots can be helpful in visualizing other types of data as well.</p> <p>We will be working with three different data objects we have already created in earlier lessons:</p> <ul> <li>Metadata for our samples (a dataframe): <code>meta</code></li> <li>Normalized expression data for every gene in each of our samples (a matrix): <code>normalized_counts</code></li> <li>Tibble versions of the DESeq2 results we generated in the last lesson: <code>res_tableCont_tb</code> and <code>res_tableGar_tb</code></li> </ul> <p>First, we already have a metadata tibble.</p> <pre><code>meta %&gt;% head()\n</code></pre> <p>Next, let's bring in the <code>normalized_counts</code> object with our gene names.</p> <pre><code># DESeq2 creates a matrix when you use the counts() function\n# First convert normalized_counts to a data frame and transfer the row names to a new column called \"gene\"\nnormalized_counts &lt;- counts(dds, normalized=T) %&gt;% \n  data.frame() %&gt;%\n  rownames_to_column(var=\"gene\") \n</code></pre>"},{"location":"07c_DEA_visualization.html#ma-plot","title":"MA plot","text":"<p>A plot that can be useful to exploring our results is the MA plot. The MA plot shows the mean of the normalized counts versus the log2 fold changes for all genes tested. The genes that are significantly DE are colored to be easily identified (adjusted p-value \\&lt; 0.01 by default). This is also a great way to illustrate the effect of LFC shrinkage. The DESeq2 package offers a simple function to generate an MA plot.</p> <p>Let's start with the unshrunken results:</p> <pre><code># MA plot using unshrunken fold changes\nplotMA(res_tableCont_unshrunken, ylim=c(-2,2))\n</code></pre> <p>And now the shrunken results:</p> <pre><code># MA plot using shrunken fold changes\nplotMA(res_tableCont, ylim=c(-2,2))\n</code></pre> <p>On the left you have the unshrunken fold change values plotted and you can see the abundance of scatter for the lowly expressed genes. That is, many of these genes exhibit very high fold changes. After shrinkage, we see the fold changes are much smaller estimates.</p> <p></p> <p>In addition to the comparison described above, this plot allows us to evaluate the magnitude of fold changes and how they are distributed relative to mean expression. Generally, we would expect to see significant genes across the full range of expression levels.</p> <p>Exercise 1</p> <p>Why are there genes with high mean and big log2 fold changes, but are not statistically significant?\"</p> Solution to Exercise 1 <p>Because their expression values are very dispersed, and so their p-value will be very high.</p>"},{"location":"07c_DEA_visualization.html#plotting-significant-de-genes","title":"Plotting significant DE genes","text":"<p>One way to visualize results would be to simply plot the expression data for a handful of genes. We could do that by picking out specific genes of interest or selecting a range of genes.</p> <p>Using DESeq2 <code>plotCounts()</code> to plot expression of a single gene</p> <p>To pick out a specific gene of interest to plot, for example TSPAN7 (ID ENSG00000156298), we can use the <code>plotCounts()</code> from DESeq2. <code>plotCounts()</code> requires that the gene specified matches the original input to DESeq2.</p> <pre><code># Plot expression for single gene\nplotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\") \n</code></pre> <p></p> <p>Info</p> <p>This DESeq2 function only allows for plotting the counts of a single gene at a time, and is not flexible regarding the appearance.</p> <p>Using ggplot2 to plot expression of a single gene</p> <p>If you wish to change the appearance of this plot, we can save the output of <code>plotCounts()</code> to a variable specifying the <code>returnData=TRUE</code> argument, then use <code>ggplot()</code>:</p> <pre><code># Save plotcounts to a data frame object\nd &lt;- plotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\", returnData=TRUE)\n\n# What is the data output of plotCounts()?\nd %&gt;% head()\n</code></pre> <pre><code># Plot the MOV10 normalized counts, using the samples (rownames(d) as labels)\nggplot(d, aes(x = condition, y = count, color = condition)) + \ngeom_point(position=position_jitter(w = 0.1,h = 0)) +\ngeom_text_repel(aes(label = rownames(d))) + \ntheme_bw() +\nggtitle(\"TSPAN7\") +\ntheme(plot.title = element_text(hjust = 0.5))\n</code></pre> <p>Note</p> <p>Note that in the plot below (code above), we are using <code>geom_text_repel()</code> from the <code>ggrepel</code> package to label our individual points on the plot.</p> <p></p> <p>Create a translator from gene names to gene IDs</p> <p>While gene IDs are unique and traceable, it is hard for us humans to memorize a bunch of numbers. Let's try to make a translator function that will give you possible gene IDs for a gene name. Then you can use this table to select one of the possible gene_IDs.</p> <p>The function will take as input a vector of gene names of interest, the tx2gene dataframe and the dds object that you analyzed:</p> <pre><code>lookup &lt;- function(gene_name, tx2gene, dds){\n  hits &lt;- tx2gene %&gt;% select(gene_symbol, gene_ID) %&gt;% distinct() %&gt;% \n    filter(gene_symbol %in% gene_name &amp; gene_ID %in% rownames(dds))\n  return(hits)\n}\n\nlookup(gene_name = \"TSPAN7\", tx2gene = tx2gene, dds = dds)\n</code></pre> <p>On the other hand, we can add the information from our tx2gene table, since it has the gene name!</p> <pre><code>tx2gene\n</code></pre> <p>However, we see that the table has many duplicates per gene, due to the fact that a gene may have several transcripts IDs associated to it. Since our results table has gene IDs, it is important to remove transcript information and remove duplicated rows before merging the information.</p> <p>We remove the transcript ID column and duplicated rows from the tx2gene table using tidyverse syntax. We merge the tables using the <code>merge</code> function, which has many options for merging. Since our tables have different column names for the gene ID variable, we provide them with the <code>by.x</code> and <code>by.y</code> arguments. We also want to keep all of our results, so we use the argument <code>all.x</code> as well.</p> <pre><code>res_tableCont_tb &lt;- merge(res_tableCont_tb, tx2gene %&gt;% select(-transcript_ID) %&gt;% distinct(),\n                        by.x = \"gene\", by.y = \"gene_ID\", all.x = T)\n\nres_tableCont_tb\n</code></pre>"},{"location":"07c_DEA_visualization.html#heatmap","title":"Heatmap","text":"<p>In addition to plotting subsets, we could also extract the normalized values of all the significant genes and plot a heatmap of their expression using <code>pheatmap()</code>.</p> <pre><code># Extract normalized expression for significant genes from the vampirium and control samples\n# also get gene name\nnorm_Contsig &lt;- normalized_counts %&gt;% select(gene, starts_with(\"control\"), starts_with(\"vampirium\")) \n  dplyr::filter(gene %in% sigCont$gene)  \n</code></pre> <p>Now let's draw the heatmap using <code>pheatmap</code>:</p> <pre><code># Run pheatmap using the metadata data frame for the annotation\npheatmap(norm_Contsig %&gt;% column_to_rownames(\"gene\"), \n         cluster_rows = T, \n         show_rownames = F,\n         annotation = meta %&gt;% column_to_rownames(var = \"sample\") %&gt;% select(\"condition\"), \n         border_color = NA, \n         fontsize = 10, \n         scale = \"row\", \n         fontsize_row = 10, \n         height = 20)\n</code></pre> <p></p> <p>Note</p> <p>There are several additional arguments we have included in the function for aesthetics. One important one is <code>scale=\"row\"</code>, in which Z-scores are plotted, rather than the actual normalized count value. </p> <p>Z-scores are computed on a gene-by-gene basis by subtracting the mean and then dividing by the standard deviation. The Z-scores are computed after the clustering, so that it only affects the graphical aesthetics and the color visualization is improved.</p>"},{"location":"07c_DEA_visualization.html#volcano-plot","title":"Volcano plot","text":"<p>The above plot would be great to look at the expression levels of a good number of genes, but for more of a global view there are other plots we can draw. A commonly used one is a volcano plot; in which you have the log transformed adjusted p-values plotted on the y-axis and log2 fold change values on the x-axis.</p> <p>To generate a volcano plot, we first need to have a column in our results data indicating whether or not the gene is considered differentially expressed based on p-adjusted values and we will include a log2fold change here.</p> <p>To generate a volcano plot, we first need to have a column in our results data indicating whether or not the gene is considered differentially expressed based on p-adjusted values and we will include a log2fold change here.</p> <pre><code>## Obtain logical vector where TRUE values denote padj values &lt; 0.05 and fold change &gt; 1.5 in either direction\n\nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% \nmutate(threshold_Cont = padj &lt; 0.05 &amp; abs(log2FoldChange) &gt;= 0.58)\n</code></pre> <p>Now we can start plotting. The <code>geom_point</code> object is most applicable, as this is essentially a scatter plot:</p> <pre><code>## Volcano plot\nggplot(res_tableCont_tb) + \n  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_Cont)) +\n  ggtitle(\"Control vs Vampirium\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  #scale_y_continuous(limits = c(0,50)) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25)))  \n</code></pre> <p></p> <p>Checking the top DE genes</p> <p>This is a great way to get an overall picture of what is going on, but what if we also wanted to know where the top 10 genes (lowest padj) in our DE list are located on this plot? We could label those dots with the gene name on the Volcano plot using <code>geom_text_repel()</code>.</p> <p>First, we need to order the res_tableCont tibble by <code>padj</code>, and add an additional column to it, to include on those gene names we want to use to label the plot.</p> <pre><code>## Create an empty column to indicate which genes to label\nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% mutate(genelabels = \"\")\n\n## Sort by padj values \nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% arrange(padj)\n\n## Populate the gene labels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes\nres_tableCont_tb$genelabels[1:10] &lt;- as.character(res_tableCont_tb$gene_symbol[1:10])\n\nhead(res_tableCont_tb)\n</code></pre> <p>Next, we plot it as before with an additional layer for <code>geom_text_repel()</code> wherein we can specify the column of gene labels we just created.</p> <pre><code>ggplot(res_tableCont_tb, aes(x = log2FoldChange, y = -log10(padj))) +\n  geom_point(aes(colour = threshold_Cont)) +\n  geom_text_repel(aes(label = genelabels)) +\n  ggtitle(\"Control vs Vampirium\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25))) \n</code></pre> <p></p>"},{"location":"07c_DEA_visualization.html#other-visualization-tools","title":"Other visualization tools","text":"<p>If you use the DESeq2 tool for differential expression analysis, the package 'DEGreport' can use the DESeq2 results output to make the top20 genes and the volcano plots generated above by writing a few lines of simple code. While you can customize the plots above, you may be interested in using the easier code. Below are examples of the code to create these plots:*</p> <pre><code>DEGreport::degPlot(dds = dds, res = res, n = 20, xs = \"type\", group = \"condition\") # dds object is output from DESeq2\n\nDEGreport::degVolcano(\n    data.frame(res[,c(\"log2fold change\",\"padj\")]), # table - 2 columns\n    plot_text = data.frame(res[1:10,c(\"log2fold change\",\"padj\",\"id\")])) # table to add names\n\n# Available in the newer version for R 3.4\nDEGreport::degPlotWide(dds = dds, genes = row.names(res)[1:5], group = \"condition\")\n</code></pre> <p>Exercise 2</p> <p>Create visualizations of the results from your DEA between Garlicum samples and Vampirium samples.</p> Solution to Exercise 2 <p>Our Garlicum results are saved in this table. However, we will want to use the LFC shrunken values</p> <pre><code># Normal results\nres_tableGar_unshrunken &lt;- res_tableGar\n\n# Shrunken values\nres_tableGar &lt;- lfcShrink(dds, coef=\"condition_garlicum_vs_vampirium\", type=\"apeglm\")\n</code></pre> <p>We can plot a MAplot:</p> <pre><code>plotMA(res_tableGar, ylim=c(-2,2))\n</code></pre> <p>And continue with a volcano plot and a heatmap. But first, let's merge our results with with our tx2gene table:</p> <pre><code>res_tableGar_tb &lt;- merge(res_tableGar_tb, tx2gene %&gt;% select(-transcript_ID) %&gt;% distinct(),\n                        by.x = \"gene\", by.y = \"gene_ID\", all.x = T)\n\nres_tableGar_tb\n</code></pre> <p>Volcano plot with top 10 genes:</p> <pre><code>## Create an empty column to indicate which genes to label\nres_tableGar_tb &lt;- res_tableGar_tb %&gt;% mutate(genelabels = \"\")\n\n## Sort by padj values \nres_tableGar_tb &lt;- res_tableGar_tb %&gt;% arrange(padj)\n\n## Populate the gene labels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes\nres_tableGar_tb$genelabels[1:10] &lt;- as.character(res_tableGar_tb$gene_symbol[1:10])\n\nhead(res_tableGar_tb)\n</code></pre> <pre><code>ggplot(res_tableGar_tb, aes(x = log2FoldChange, y = -log10(padj))) +\n  geom_point(aes(colour = threshold_Cont)) +\n  geom_text_repel(aes(label = genelabels)) +\n  ggtitle(\"Garlicum vs Vampirium\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25))) \n</code></pre> <p>Heatmap of DE genes for Vampirium vs Garlicum:</p> <pre><code># Extract normalized expression for significant genes from the vampirium and garlicum samples\n# also get gene name\nnorm_Garsig &lt;- normalized_counts %&gt;% select(gene, starts_with(\"garlicum\"), starts_with(\"vampirium\")) \n  dplyr::filter(gene %in% sigGar$gene)  \n</code></pre> <p>Now let's draw the heatmap using <code>pheatmap</code>:</p> <pre><code># Run pheatmap using the metadata data frame for the annotation\npheatmap(norm_Garsig %&gt;% column_to_rownames(\"gene\"), \n         cluster_rows = T, \n         show_rownames = F,\n         annotation = meta %&gt;% column_to_rownames(var = \"sample\") %&gt;% select(\"condition\"), \n         border_color = NA, \n         fontsize = 10, \n         scale = \"row\", \n         fontsize_row = 10, \n         height = 20)\n</code></pre> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p> <p>Materials and hands-on activities were adapted from RNA-seq workflow on the Bioconductor website</p>"},{"location":"08a_FA_genomic_annotation.html","title":"Genomic annotations for functional analyses","text":""},{"location":"08a_FA_genomic_annotation.html#genomic-annotations","title":"Genomic annotations","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 30 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Discuss the available genomic annotation databases and the different types of information stored</li> <li>Compare and contrast the tools available for accessing genomic annotation databases</li> <li>Apply various R packages for retrieval of genomic annotations</li> </ol> <p>The analysis of next-generation sequencing results requires associating genes, transcripts, proteins, etc. with functional or regulatory information. To perform functional analysis on gene lists, we often need to obtain gene identifiers that are compatible with the tools we wish to use and this is not always trivial. Here, we discuss ways in which you can obtain gene annotation information and some of the advantages and disadvantages of each method.</p>"},{"location":"08a_FA_genomic_annotation.html#databases","title":"Databases","text":"<p>We retrieve information on the processes, pathways, etc. (for which a gene is involved in) from the necessary database where the information is stored. The database you choose will be dependent on what type of information you are trying to obtain. Examples of databases that are often queried, include:</p> <p>General databases</p> <p>Offer comprehensive information on genome features, feature coordinates, homology, variant information, phenotypes, protein domain/family information, associated biological processes/pathways, associated microRNAs, etc.:</p> <ul> <li>Ensembl (use Ensembl gene IDs)</li> <li>NCBI (use Entrez gene IDs)</li> <li>UCSC</li> <li>EMBL-EBI</li> </ul> <p>Annotation-specific databases</p> <p>Provide annotations related to a specific topic:</p> <ul> <li>Gene Ontology (GO): database of gene ontology biological processes, cellular components and molecular functions - based on Ensembl or Entrez gene IDs or official gene symbols</li> <li>KEGG: database of biological pathways - based on Entrez gene IDs</li> <li>MSigDB: database of gene sets</li> <li>Reactome: database of biological pathways</li> <li>Human Phenotype Ontology: database of genes associated with human disease</li> <li>CORUM: database of protein complexes for human, mouse, rat</li> <li>\u2026</li> </ul> <p>This is by no means an exhaustive list, there are many other databases available that are not listed here.</p>"},{"location":"08a_FA_genomic_annotation.html#genome-builds","title":"Genome builds","text":"<p>Before you begin your search through any of these databases, you should know which build of the genome was used to generate your gene list and make sure you use the same build for the annotations during functional analysis. When a new genome build is acquired, the names and/or coordinate location of genomic features (gene, transcript, exon, etc.) may change. Therefore, the annotations regarding genome features (gene, transcript, exon, etc.) is genome-build specific and we need to make sure that our annotations are obtained from the appropriate resource.</p> <p>For example, we have used the GRCh38 build of the human genome to quantify gene expression for differential expression analysis, so we should use the same GRCh38 build of the genome to convert between gene IDs and to identify annotations for each of the genes.</p>"},{"location":"08a_FA_genomic_annotation.html#tools-for-accessing-databases","title":"Tools for accessing databases","text":"<p>Within R, there are many popular packages used for gene/transcript-level annotation. These packages provide tools that take the list of genes you provide and retrieve information for each gene using one or more of the databases listed above.</p>"},{"location":"08a_FA_genomic_annotation.html#annotation-tools-for-accessingquerying-annotations-from-a-specific-databases","title":"Annotation tools: for accessing/querying annotations from a specific databases","text":"Tool Description Pros Cons org.Xx.eg.db Query gene feature information for the organism of interest gene ID conversion, biotype and coordinate information only latest genome build available EnsDb.Xx.vxx Transcript and gene-level information directly fetched from Ensembl API (similar to TxDb, but with filtering ability and versioned by Ensembl release) easy functions to extract features, direct filtering Not the most up-to-date annotations, more difficult to use than some packages TxDb.Xx.UCSC.hgxx.knownGene UCSC database for transcript and gene-level information or can create own TxDb from an SQLite database file using the GenomicFeatures package feature information, easy functions to extract features only available current and recent genome builds - can create your own, less up-to-date with annotations than Ensembl annotables Gene-level feature information immediately available for the human and model organisms super quick and easy gene ID conversion, biotype and coordinate information static resource, not updated regularly biomaRt An R package version of the Ensembl BioMart online tool all Ensembl database information available, all organisms on Ensembl, wealth of information nan"},{"location":"08a_FA_genomic_annotation.html#interface-tools","title":"Interface tools","text":"<p>Other packages are design for accessing/querying annotations from multiple different annotation sources</p> <ul> <li>AnnotationDbi: queries the OrgDb, TxDb, Go.db, EnsDb, and BioMart annotations.  </li> <li>AnnotationHub: queries large collection of whole genome resources, including ENSEMBL, UCSC, ENCODE, Broad Institute, KEGG, NIH Pathway Interaction Database, etc.</li> </ul> <p>Tip</p> <p>These are both packages that can be used to create the <code>tx2gene</code> files that salmon gave us in case you did not have them.</p>"},{"location":"08a_FA_genomic_annotation.html#annotationdbi","title":"AnnotationDbi","text":"<p>AnnotationDbi is an R package that provides an interface for connecting and querying various annotation databases using SQLite data storage. The AnnotationDbi packages can query the OrgDb, TxDb, EnsDb, Go.db, and BioMart annotations. There is helpful documentation available to reference when extracting data from any of these databases.</p>"},{"location":"08a_FA_genomic_annotation.html#annotationhub","title":"AnnotationHub","text":"<p>AnnotationHub is a wonderful resource for accessing genomic data or querying large collection of whole genome resources, including ENSEMBL, UCSC, ENCODE, Broad Institute, KEGG, NIH Pathway Interaction Database, etc. All of this information is stored and easily accessible by directly connecting to the database.</p> <p>To get started with AnnotationHub, we first load the library and connect to the database:</p> <pre><code># Load libraries\nlibrary(AnnotationHub)\nlibrary(ensembldb)\n\n# Connect to AnnotationHub\nah &lt;- AnnotationHub()\n</code></pre> <p>Warning</p> <p>The script will ask you to create a cache directory, type yes!</p> <p>What is a cache?</p> <p>A cache is used in R to store data or a copy of the data so that future requests can be served faster without having to re-run a lengthy computation.</p> <p>The <code>AnnotationHub()</code> command creates a client that manages a local cache of the database, helping with quick and reproducible access. When encountering question <code>AnnotationHub does not exist, create directory?</code>, you can anwser either <code>yes</code> (create a permanent location to store cache) or <code>no</code> (create a temporary location to store cache). <code>hubCache(ah)</code> gets the file system location of the local AnnotationHub cache. <code>hubUrl(ah)</code> gets the URL for the online hub. </p> <p>To see the types of information stored inside our database, we can just type the name of the object:</p> <p>Note</p> <p>Results here will differ from yours</p> <pre><code># Explore the AnnotationHub object\nah\n</code></pre> <p>Using the output, you can get an idea of the information that you can query within the AnnotationHub object. (Note that the output below will be different than yours!)</p> <pre><code>AnnotationHub with 47240 records\n# snapshotDate(): 2019-10-29 \n# $dataprovider: BroadInstitute, Ensembl, UCSC, ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/, H...\n# $species: Homo sapiens, Mus musculus, Drosophila melanogaster, Bos taurus, Pan troglod...\n# $rdataclass: GRanges, BigWigFile, TwoBitFile, Rle, OrgDb, EnsDb, ChainFile, TxDb, Inpa...\n# additional mcols(): taxonomyid, genome, description, coordinate_1_based,\n#   maintainer, rdatadateadded, preparerclass, tags, rdatapath, sourceurl,\n#   sourcetype \n# retrieve records with, e.g., 'object[[\"AH5012\"]]'\n\n            title                                                                   \n  AH5012  | Chromosome Band                                                         \n  AH5013  | STS Markers                                                             \n  AH5014  | FISH Clones                                                             \n  AH5015  | Recomb Rate                                                             \n  AH5016  | ENCODE Pilot                                                            \n  ...       ...                                                                     \n  AH78364 | Xiphophorus_maculatus.X_maculatus-5.0-male.ncrna.2bit                   \n  AH78365 | Zonotrichia_albicollis.Zonotrichia_albicollis-1.0.1.cdna.all.2bit       \n  AH78366 | Zonotrichia_albicollis.Zonotrichia_albicollis-1.0.1.dna_rm.toplevel.2bit\n  AH78367 | Zonotrichia_albicollis.Zonotrichia_albicollis-1.0.1.dna_sm.toplevel.2bit\n  AH78368 | Zonotrichia_albicollis.Zonotrichia_albicollis-1.0.1.ncrna.2bit\n</code></pre> <p>Notice the note on retrieving records with <code>object[[\"AH5012\"]]</code> - this will be how we can extract a single record from the AnnotationHub object.</p> <p>If you would like to see more information about any of the classes of data you can extract that information as well. For example, if you wanted to determine all species information available, you could explore that within the AnnotationHub object:</p> <pre><code># Explore all species information available\nunique(ah$species) %&gt;% head()\n</code></pre> <p>In addition to species information, there is also additional information about the type of Data Objects and the Data Providers:</p> <pre><code># Explore the types of Data Objects available\nunique(ah$rdataclass) %&gt;% head()\n\n# Explore the Data Providers\nunique(ah$dataprovider) %&gt;% head()\n</code></pre> <p>Now that we know the types of information available from AnnotationHub we can query it for the information we want using the <code>query()</code> function. Let's say we would like to return the Ensembl <code>EnsDb</code> information for Human. To return the records available, we need to use the terms as they are output from the <code>ah</code> object to extract the desired data.</p> <pre><code># Query AnnotationHub\nhuman_ens &lt;- query(ah, c(\"Homo sapiens\", \"EnsDb\"))\n</code></pre> <p>The query retrieves all hits for the <code>EnsDb</code> objects, and you will see that they are listed by the release number. The most current release for GRCh38 is Ensembl98 and AnnotationHub offers that as an option to use. However, if you look at options for older releases, for Homo sapiens it only go back as far as Ensembl 87. This is fine if you are using GRCh38, however if you were using an older genome build like hg19/GRCh37, you would need to load the <code>EnsDb</code> package if available for that release or you might need to build your own with <code>ensembldb</code>.</p> <p>Note</p> <p>Results here will differ from yours</p> <pre><code>human_ens\n</code></pre> <pre><code>AnnotationHub with 13 records\n# snapshotDate(): 2019-10-29 \n# $dataprovider: Ensembl\n# $species: Homo sapiens\n# $rdataclass: EnsDb\n# additional mcols(): taxonomyid, genome, description, coordinate_1_based,\n#   maintainer, rdatadateadded, preparerclass, tags, rdatapath, sourceurl,\n#   sourcetype \n# retrieve records with, e.g., 'object[[\"AH53211\"]]'\n\n            title                            \n  AH53211 | Ensembl 87 EnsDb for Homo Sapiens\n  AH53715 | Ensembl 88 EnsDb for Homo Sapiens\n  AH56681 | Ensembl 89 EnsDb for Homo Sapiens\n  AH57757 | Ensembl 90 EnsDb for Homo Sapiens\n  AH60773 | Ensembl 91 EnsDb for Homo Sapiens\n  ...       ...                              \n  AH67950 | Ensembl 95 EnsDb for Homo sapiens\n  AH69187 | Ensembl 96 EnsDb for Homo sapiens\n  AH73881 | Ensembl 97 EnsDb for Homo sapiens\n  AH73986 | Ensembl 79 EnsDb for Homo sapiens\n  AH75011 | Ensembl 98 EnsDb for Homo sapiens\n</code></pre> <p>In our case, we are looking for the latest Ensembl release so that the annotations are the most up-to-date. To extract this information from AnnotationHub, we can use the AnnotationHub ID to subset the object:</p> <pre><code># Extract annotations of interest\nhuman_ens &lt;- human_ens[[length(human_ens)]] # We extract latest\n</code></pre> <p>Now we can use <code>ensembldb</code> functions to extract the information at the gene, transcript, or exon levels. We are interested in the gene-level annotations, so we can extract that information as follows:</p> <pre><code># Extract gene-level information\ngenes(human_ens, return.type = \"data.frame\") %&gt;% head()\n</code></pre> <p>But note that it is just as easy to get the transcript- or exon-level information:</p> <pre><code># Extract transcript-level information\ntranscripts(human_ens, return.type = \"data.frame\") %&gt;% head()\n\n# Extract exon-level information\nexons(human_ens, return.type = \"data.frame\") %&gt;% head()\n</code></pre> <p>To obtain an annotation data frame using AnnotationHub, we'll use the <code>genes()</code> function, but only keep selected columns and filter out rows to keep those corresponding to our gene identifiers in our results file:</p> <pre><code># Create a gene-level dataframe \nannotations_ahb &lt;- genes(human_ens, return.type = \"data.frame\")  %&gt;%\n  dplyr::select(gene_id, gene_name, entrezid, gene_biotype, description) %&gt;% \n  dplyr::filter(gene_id %in% res_tableCont_tb$gene)\n</code></pre> <p>This dataframe looks like it should be fine as it is, but we look a little closer we will notice that the column containing Entrez identifiers is a list, and in fact there are many Ensembl identifiers that map to more than one Entrez identifier!</p> <pre><code># Wait a second, we don't have one-to-one mappings!\nclass(annotations_ahb$entrezid)\nwhich(map(annotations_ahb$entrezid, length) &gt; 1)\n</code></pre> <p>So what do we do here? And why do we have this problem? An answer from the Ensembl Help Desk is that this occurs when we cannot choose a perfect match; ie when we have two good matches, but one does not appear to match with a better percentage than the other. In that case, we assign both matches. What we will do is choose to keep the first identifier for these multiple mapping cases.</p> <pre><code>annotations_ahb$entrezid &lt;- map(annotations_ahb$entrezid,1) %&gt;%  unlist()\n</code></pre> <p>Info</p> <p>Not all databases handle multiple mappings in the same way. For example, if we used the OrgDb instead of the EnsDb:</p> <pre><code>human_orgdb &lt;- query(ah, c(\"Homo sapiens\", \"OrgDb\"))\nhuman_orgdb &lt;- human_ens[[length(human_ens)]]\nannotations_orgdb &lt;- select(human_orgdb, res_tableCont_tb$gene, c(\"SYMBOL\", \"GENENAME\", \"ENTREZID\"), \"ENSEMBL\")\n</code></pre> <p>We would find that multiple mapping entries would be automatically reduced to one-to-one. We would also find that more than half of the input genes do not return any annotations. This is because the OrgDb family of database are primarily based on mapping using Entrez Gene identifiers. Since our data is based on Ensembl mappings, using the OrgDb would result in a loss of information.</p> <p>Let's take a look and see how many of our Ensembl identifiers have an associated gene symbol, and how many of them are unique:</p> <pre><code>which(is.na(annotations_ahb$gene_name)) %&gt;% length()\n\nwhich(duplicated(annotations_ahb$gene_name)) %&gt;% length()\n</code></pre> <p>Let's identify the non-duplicated genes and only keep the ones that are not duplicated:</p> <pre><code># Determine the indices for the non-duplicated genes\nnon_duplicates_idx &lt;- which(duplicated(annotations_ahb$gene_name) == FALSE)\n\n# How many rows does annotations_ahb have?\nannotations_ahb %&gt;% nrow()\n\n# Return only the non-duplicated genes using indices\nannotations_ahb &lt;- annotations_ahb[non_duplicates_idx, ]\n\n# How many rows are we left with after removing?\nannotations_ahb %&gt;% nrow()\n</code></pre> <p>Finally, it would be good to know what proportion of the Ensembl identifiers map to an Entrez identifier:</p> <pre><code># Determine how many of the Entrez column entries are NA\nwhich(is.na(annotations_ahb$entrezid)) %&gt;%  length()\n</code></pre> <p>That's more than half of our genes! If we plan on using Entrez ID results for downstream analysis, we should definitely keep this in mind. If you look at some of the Ensembl IDs from our query that returned NA, these map to pseudogenes (i.e ENSG00000265439) or non-coding RNAs (i.e. ENSG00000265425). The discrepancy (which we can expect to observe) between databases is due to the fact that each implements its own different computational approaches for generating the gene builds.</p>"},{"location":"08a_FA_genomic_annotation.html#using-annotationhub-to-create-our-tx2gene-file","title":"Using AnnotationHub to create our tx2gene file","text":"<p>To create our <code>tx2gene</code> file, we would need to use a combination of the methods above and merge two dataframes together. For example:</p> <pre><code>## DO NOT RUN THIS CODE\n\n# Create a transcript dataframe\n txdb &lt;- transcripts(human_ens, return.type = \"data.frame\") %&gt;%\n   dplyr::select(tx_id, gene_id)\n txdb &lt;- txdb[grep(\"ENST\", txdb$tx_id),]\n\n # Create a gene-level dataframe\n genedb &lt;- genes(human_ens, return.type = \"data.frame\")  %&gt;%\n   dplyr::select(gene_id, gene_name)\n\n # Merge the two dataframes together\n annotations &lt;- inner_join(txdb, genedb)\n</code></pre> <p>In this lesson our focus has been using annotation packages to extract information mainly just for gene ID conversion for the different tools that we use downstream. Many of the annotation packages we have presented have much more information than what we need for functional analysis and we have only just scratched the surface here. It's good to know the capabilities of the tools we use, so we encourage you to spend some time exploring these packages to become more familiar with them.</p>"},{"location":"08a_FA_genomic_annotation.html#annotables-package","title":"Annotables package","text":"<p>The annotables package is a super easy annotation package to use. It is not updated frequently, so it's not great for getting the most up-to-date information for the current builds and does not have information for other organisms than human and mouse, but is a quick way to get annotation information.</p> <pre><code># Install package\nBiocManager::install(\"annotables\")\n\n# Load library\nlibrary(annotables)\n\n# Access previous build of annotations\ngrch38\n</code></pre> <p>We can see that the <code>grch38</code> object already contains all the information we want in a super easy way. Let's annotate the results of our shrunken DEA for Control vs Vampirium:</p> <pre><code>## Re-run this code if you are unsure that you have the right table\nres_tableCont &lt;- lfcShrink(dds, coef = \"condition_control_vs_vampirium\")\nres_tableCont_tb &lt;- res_tableCont %&gt;%\n    data.frame() %&gt;%\n    rownames_to_column(var=\"gene\") %&gt;% \n    as_tibble()\n</code></pre> <pre><code>## Return the IDs for the gene symbols in the DE results\nids &lt;- grch38 %&gt;% dplyr::filter(ensgene %in% rownames(res_tableCont))\n\n## Merge the IDs with the results \nres_ids &lt;- inner_join(res_tableCont_tb, ids, by=c(\"gene\"=\"ensgene\"))\n\nhead(res_ids)\n</code></pre> <p>Our data is now ready to use for functional analysis! We have all the ids necessary to proceed.</p> <p>Exercise 1</p> <ul> <li>Create a new <code>res_ids</code> object using the <code>annotables</code> package with the human build grch37. NOTE call it <code>res_ids_grch37</code>!</li> <li>What are the differences between the <code>res_id_ahb</code>object and the <code>res_ids_grch37</code>?</li> </ul> Solution to Exercise 1 <pre><code>ids_grch37 &lt;- grch37 %&gt;% dplyr::filter(ensgene %in% rownames(res_tableCont))\n\nres_ids_grch37 &lt;- inner_join(res_tableCont_tb, ids_grch38, by=c(\"gene\"=\"ensgene\"))\n\nhead(res_ids_grch37)\n</code></pre> <p>Let's compare it to the <code>res_ids_ahb</code> object</p> <pre><code>head(res_ids_ahb)\n</code></pre> <p>We can see that <code>res_id_ahb</code> contains less columns, but this is because we selected fewer columns in our previous steps. What about the the sizes of these tables?</p> <pre><code>nrow(res_ids_ahb)\nnrow(res_ids_grch37)\nnrow(res_tableCont_tb)\n</code></pre> <p>We see that there is a difference in the number of genes. So what is happening? The gene IDs that we have in our count data are from the genome version grch37, and we are trying to match it to annotations from the more updated version grch38. There will be genes that are missing just because of the version. Then we have also removed duplicated gene names in our <code>annotation_ahb</code> object, which may contain different gene IDs. So we may have deleted some gene IDs that are not matching anymore with our results table. In any case, we should always annotate our genes with the version of the reference genome we used for alignment and quantification!</p> <p>Exercise 2</p> <p>Annotate the results of your DEA for Garlicum vs Vampirium with grch38.</p> Solution to Exercise 2 <pre><code>## Return the IDs for the gene symbols in the DE results\nids &lt;- grch38 %&gt;% dplyr::filter(ensgene %in% rownames(res_tableGar))\n\n## Merge the IDs with the results \nres_ids_Gar &lt;- inner_join(res_tableGar_tb, ids, by=c(\"gene\"=\"ensgene\"))\n\nhead(res_ids_Gar)\n</code></pre> <p>This lesson was originally developed by members of the teaching team (Mary Piper) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"08b_FA_overrepresentation.html","title":"Functional Analysis for RNA-seq","text":""},{"location":"08b_FA_overrepresentation.html#functional-analysis","title":"Functional analysis","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 120 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Determine how functions are attributed to genes using Gene Ontology terms</li> <li>Describe the theory of how functional enrichment tools yield statistically enriched functions or interactions</li> <li>Discuss functional analysis using over-representation analysis, functional class scoring, and pathway topology methods</li> <li>Identify popular functional analysis tools for over-representation analysis</li> </ol> <p>The output of RNA-seq differential expression analysis is a list of significant differentially expressed genes (DEGs). To gain greater biological insight on the differentially expressed genes there are various analyses that can be done:</p> <ul> <li>determine whether there is enrichment of known biological functions, interactions, or pathways</li> <li>identify genes' involvement in novel pathways or networks by grouping genes together based on similar trends</li> <li>use global changes in gene expression by visualizing all genes being significantly up- or down-regulated in the context of external interaction data</li> </ul> <p>Generally for any differential expression analysis, it is useful to interpret the resulting gene lists using freely available web- and R-based tools. While tools for functional analysis span a wide variety of techniques, they can loosely be categorized into three main types: over-representation analysis, functional class scoring, and pathway topology. See more here.</p> <p></p> <p>The goal of functional analysis is to provide biological insight, so it's necessary to analyze our results in the context of our experimental hypothesis: What is the function of the genes dysregulated by Vampirium?. Therefore, based on the authors' hypothesis and observations, we may expect the enrichment of processes/pathways related to blood production and behaviour control, which we would need to validate experimentally.</p> <p>Note</p> <p>All tools described below are great tools to validate experimental results and to make hypotheses. These tools suggest genes/pathways that may be involved with your condition of interest; however, you should NOT use these tools to make conclusions about the pathways involved in your experimental process. You will need to perform experimental validation of any suggested pathways.</p>"},{"location":"08b_FA_overrepresentation.html#over-representation-analysis","title":"Over-representation analysis","text":"<p>There are a plethora of functional enrichment tools that perform some type of \"over-representation\" analysis by querying databases containing information about gene function and interactions.</p> <p>These databases typically categorize genes into groups (gene sets) based on shared function, or involvement in a pathway, or presence in a specific cellular location, or other categorizations, e.g. functional pathways, etc. Essentially, known genes are binned into categories that have been consistently named (controlled vocabulary) based on how the gene has been annotated functionally. These categories are independent of any organism, however each organism has distinct categorizations available.</p> <p>To determine whether any categories are over-represented, you can determine the probability of having the observed proportion of genes associated with a specific category in your gene list based on the proportion of genes associated with the same category in the background set (gene categorizations for the appropriate organism).</p> <p></p> <p></p> <p>The statistical test that will determine whether something is actually over-represented is the Hypergeometric test.</p>"},{"location":"08b_FA_overrepresentation.html#hypergeometric-testing","title":"Hypergeometric testing","text":"<p>Using the example of the first functional category above, hypergeometric distribution is a probability distribution that describes the probability of 25 genes (k) being associated with \"Functional category 1\", for all genes in our gene list (n=1000), from a population of all of the genes in entire genome (N=23,000) which contains 35 genes (K) associated with \"Functional category 1\" [4].</p> <p></p> <p>The calculation of probability of k successes follows the formula:</p> <p>\\(\\(Pr(X = k) = \\frac{\\binom{K}{k} \\binom{N - K}{n-k}}{\\binom{N}{n}}\\)\\) </p> <p>This test will result in an adjusted p-value (after multiple test correction) for each category tested.</p>"},{"location":"08b_FA_overrepresentation.html#gene-ontology-project","title":"Gene Ontology project","text":"<p>One of the most widely-used categorizations is the Gene Ontology (GO) established by the Gene Ontology project.</p> <p>Quote</p> <p>\"The Gene Ontology project is a collaborative effort to address the need for consistent descriptions of gene products across databases\". </p> <p>The Gene Ontology Consortium maintains the GO terms, and these GO terms are incorporated into gene annotations in many of the popular repositories for animal, plant, and microbial genomes.</p> <p>Tools that investigate enrichment of biological functions or interactions often use the Gene Ontology (GO) categorizations, i.e. the GO terms to determine whether any have significantly modified representation in a given list of genes. Therefore, to best use and interpret the results from these functional analysis tools, it is helpful to have a good understanding of the GO terms themselves and their organization.</p>"},{"location":"08b_FA_overrepresentation.html#go-ontologies","title":"GO Ontologies","text":"<p>To describe the roles of genes and gene products, GO terms are organized into three independent controlled vocabularies (ontologies) in a species-independent manner:</p> <ul> <li>Biological process: refers to the biological role involving the gene or gene product, and could include \"transcription\", \"signal transduction\", and \"apoptosis\". A biological process generally involves a chemical or physical change of the starting material or input.</li> <li>Molecular function: represents the biochemical activity of the gene product, such activities could include \"ligand\", \"GTPase\", and \"transporter\".</li> <li>Cellular component: refers to the location in the cell of the gene product. Cellular components could include \"nucleus\", \"lysosome\", and \"plasma membrane\".</li> </ul> <p>Each GO term has a term name (e.g. DNA repair) and a unique term accession number (), and a single gene product can be associated with many GO terms, since a single gene product \"may function in several processes, contain domains that carry out diverse molecular functions, and participate in multiple alternative interactions with other proteins, organelles or locations in the cell\". See more here.</p>"},{"location":"08b_FA_overrepresentation.html#go-term-hierarchy","title":"GO term hierarchy","text":"<p>Some gene products are well-researched, with vast quantities of data available regarding their biological processes and functions. However, other gene products have very little data available about their roles in the cell.</p> <p>For example, the protein, \"p53\", would contain a wealth of information on it's roles in the cell, whereas another protein might only be known as a \"membrane-bound protein\" with no other information available.</p> <p>The GO ontologies were developed to describe and query biological knowledge with differing levels of information available. To do this, GO ontologies are loosely hierarchical, ranging from general, 'parent', terms to more specific, 'child' terms. The GO ontologies are \"loosely\" hierarchical since 'child' terms can have multiple 'parent' terms.</p> <p>Some genes with less information may only be associated with general 'parent' terms or no terms at all, while other genes with a lot of information be associated with many terms.</p> <p></p> <p>From Nature Reviews Cancer 7, 23-34 (January 2007)</p> <p>Tip</p> <p>More tips for working with GO can be found here</p>"},{"location":"08b_FA_overrepresentation.html#clusterprofiler","title":"clusterProfiler","text":"<p>We will be using clusterProfiler to perform over-representation analysis on GO terms associated with our list of significant genes. The tool takes as input a significant gene list and a background gene list and performs statistical enrichment analysis using hypergeometric testing. The basic arguments allow the user to select the appropriate organism and GO ontology (BP, CC, MF) to test.</p>"},{"location":"08b_FA_overrepresentation.html#running-clusterprofiler","title":"Running clusterProfiler","text":"<p>To run clusterProfiler GO over-representation analysis, we will change our gene names into Ensembl IDs, since the tool works a bit easier with the Ensembl IDs. Then load the following libraries:</p> <pre><code># Load libraries\nlibrary(DOSE)\nlibrary(pathview)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\n</code></pre> <p>To perform the over-representation analysis, we need a list of background genes and a list of significant genes. For our background dataset we will use all genes tested for differential expression (all genes in our results table). For our significant gene list we will use genes with p-adjusted values less than 0.05 (we could include a fold change threshold too if we have many DE genes).</p> <pre><code>## Create background dataset for hypergeometric testing using all genes tested for significance in the results\nallCont_genes &lt;- dplyr::filter(res_ids, !is.na(gene)) %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n## Extract significant results\nsigCont &lt;- dplyr::filter(res_ids, padj &lt; 0.05 &amp; !is.na(gene))\n\nsigCont_genes &lt;- sigCont %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n</code></pre> <p>Now we can perform the GO enrichment analysis and save the results:</p> <pre><code>## Run GO enrichment analysis \nego &lt;- enrichGO(gene = sigCont_genes, \n                universe = allCont_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\n</code></pre> <p>Note</p> <p>The different organisms with annotation databases available to use with for the <code>OrgDb</code> argument can be found here.</p> <p>Also, the <code>keyType</code> argument may be coded as <code>keytype</code> in different versions of clusterProfiler.</p> <p>Finally, the <code>ont</code> argument can accept either \"BP\" (Biological Process), \"MF\" (Molecular Function), and \"CC\" (Cellular Component) subontologies, or \"ALL\" for all three.</p> <pre><code>## Output results from GO analysis to a table\ncluster_summary &lt;- data.frame(ego)\ncluster_summary\n\nwrite.csv(cluster_summary, \"../Results/clusterProfiler_Cont-Vamp.csv\")\n</code></pre> ID Description GeneRatio BgRatio pvalue p.adjust qvalue geneID Count GO:0002449 lymphocyte mediated immunity 259/3662 436/15509 3.55473e-59 2.20322e-55 1.32498e-55 BTK/HFE/CD74/SLAMF7/TNFRSF1B/PARP3/FOXP3/FCGR2B/TBX21/MLH1/IL4R/PTPRC/P2RX7/ICAM1/MSH2/IL12RB1/GZMB/CD40/SMAD7/TLR8/CD40LG/IL21R/NBN/FCER2/LILRB1/IL27RA/CLC/TGFB1/AHR/EXOSC3/GATA3/PPP3CB/C1QBP/NSD2/CTSC/HPX/CD81/AICDA/IL12B/IL4/BCL6/CD160/PRDX1/ARG1/CLU/SHLD2/IL1B/CD70/C3/FOXJ1/NECTIN2/ULBP2/NDFIP1/ARL8B/IL6/IL10/IL21/SLC15A4/ARRB2/LYST/IL18/MR1/CD96/CD8A/CD1A/CD1C/CD1B/TNFSF13/PRKCD/MBL2/NOD2/KIR3DL1/FADD/INPP5D/LGALS9/SERPINB9/KIF5B/STAT5B/LIG4/LEP/CD19/CD28/HLA-DQB1/PRF1/MICA/BTN3A2/LILRB4/CARD9/ZP3/KIR2DL4/HMGB1/TUBB/CD55/HLA-DQA1/CR1/HLA-DOA/TAP2/TNF/HLA-E/HLA-G/TAP2/HLA-DQB1/TAP2/HLA-DQA1/HLA-DQB1/HLA-DQA1/HLA-DRA/TNF/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/HLA-DPB1/TAP2/HLA-B/HLA-DQA1/NCR3/HLA-DPB1/LTA/TNF/HLA-A/HLA-A/HLA-B/HLA-DQA1/HLA-E/NCR3/HLA-DQB1/HLA-DQA1/TAP2/LTA/HLA-DPB1/HLA-A/HLA-DRA/HLA-DQA1/TNF/TAP2/TNF/HLA-B/TNF/HLA-DRA/HLA-A/HLA-E/HLA-DPB1/TNF/HLA-E/LTA/HLA-G/HLA-DPB1/HLA-DPB1/HLA-DRB4/MICA/HLA-DQB1/HLA-DPA1/LTA/HLA-DQA1/HLA-A/HLA-DQB1/HLA-DQA1/HLA-B/TAP2/TNF/MICA/HLA-G/HLA-DQA1/HLA-DQB1/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-DQA1/HLA-E/HLA-DPB1/NCR3/NCR3/HLA-G/HLA-DQA1/TAP2/HLA-DPB1/NCR3/LTA/HLA-DQA1/PTPRC/KIR2DL4/B2M/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/LILRB4/KIR2DL4/HLA-G/KIR3DL1/KIR3DL1/KIR3DL1/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/LILRB4/KIR3DL1/KIR2DL4/LILRB4/KIR2DL4/KIR3DL1/INPP5D/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1 259 GO:0001906 cell killing 180/3662 281/15509 6.369e-48 1.97375e-44 1.18698e-44 TYROBP/LTF/SLAMF7/SPI1/FCGR2B/STXBP2/PTPRC/CD59/P2RX7/ICAM1/LYZ/HSP90AB1/IL12RB1/CTSG/GZMB/FCER2/LILRB1/HAMP/MAPK8/PPP3CB/CTSC/IFNG/IL12B/IL4/GNLY/CD160/PRDX1/ARG1/SEMG1/H2BC11/C3/NECTIN2/ULBP2/ARL8B/IL21/ARRB2/LYST/IL18/MR1/CD1A/CD1C/CD1B/SYK/KIR3DL1/FADD/CX3CR1/LGALS9/ITGAM/SERPINB9/KIF5B/BCL2L1/STAT5B/LEP/F2/PRF1/MICA/KIR2DL4/TUBB/CD55/ELANE/HMGN2/TAP2/HLA-E/HLA-G/TAP2/TAP2/HLA-DRA/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/HLA-A/HLA-DRA/TAP2/HLA-B/HLA-DRA/HLA-A/HLA-E/HLA-E/HLA-G/MICA/HLA-A/HLA-B/TAP2/MICA/HLA-G/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/PTPRC/KIR2DL4/B2M/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/HLA-G/KIR3DL1/KIR3DL1/KIR3DL1/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/ELANE/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1 180 GO:1903039 positive regulation of leukocyte cell-cell adhesion 196/3662 320/15509 1.02609e-47 2.1199e-44 1.27487e-44 BAD/SELE/CD4/IGF1/CD74/RUNX3/CD44/ARID1B/FOXP3/AP3D1/RHOA/CBFB/GLI2/ACTB/IL4R/PTPRC/IL12RB1/ABL1/SMARCB1/XBP1/CD40LG/NFAT5/PYCARD/CSK/IL7/LILRB1/IL27RA/JAK3/GATA3/MAP3K8/ZMIZ1/SMARCD2/CCL2/EFNB3/ZBTB16/CD5/MDK/CD81/IFNG/IL12B/IL4/BCL6/CD86/HES1/IL1A/ZAP70/ITGA4/IGFBP2/CD160/ARID1A/MYB/FOXO3/NR4A3/GPAM/CD80/SOX4/IL1B/TNFSF9/CD70/CCR7/EPO/RARA/FLOT2/AP3B1/PTPN22/IL2RA/IL6/HLX/CCL21/IL21/SLC7A1/ABL2/DUSP10/IL2RG/IL18/RUNX1/TNFRSF13C/ICOSLG/ITGB2/VCAM1/TGFBR2/SPTA1/SHH/SYK/BRD7/RAG1/NOD2/FADD/RHOH/LGALS9/PTAFR/CCL19/KAT5/RELA/STAT5B/SELP/LEP/CD28/PTPN11/HLA-DQB1/KLHL25/IRAK1/SOCS1/LILRB4/ZP3/ARID2/HMGB1/CD55/FUT4/HLA-DQA1/CD47/SRC/ELANE/DPP4/PDCD1LG2/PNP/CR1/HLA-DOA/TNF/HLA-E/HLA-G/HLA-DQB1/HLA-DQA1/HLA-DQB1/HLA-DQA1/HLA-DRA/TNF/HLA-E/HLA-A/HLA-A/HLA-G/HLA-DPB1/HLA-DQA1/HLA-DPB1/TNF/HLA-A/HLA-A/HLA-DQA1/HLA-E/HLA-DQB1/HLA-DQA1/HLA-DPB1/HLA-A/HLA-DRA/HLA-DQA1/TNF/TNF/TNF/HLA-DRA/HLA-A/HLA-E/HLA-DPB1/TNF/HLA-E/HLA-G/HLA-DPB1/HLA-DPB1/HLA-DRB4/HLA-DQB1/HLA-DPA1/HLA-DQA1/HLA-A/HLA-DQB1/HLA-DQA1/TNF/HLA-G/HLA-DQA1/HLA-DQB1/HLA-E/HLA-DRA/HLA-G/HLA-A/HLA-G/HLA-DQA1/HLA-E/HLA-DPB1/HLA-G/HLA-DQA1/HLA-DPB1/HLA-DQA1/PTPRC/CCL5/CD24/B2M/CCL5/LILRB1/SMARCB1/LILRB4/HLA-G/LILRB1/LILRB1/HLA-DRA/ELANE/LILRB1/LILRB4/LILRB4 196 GO:0001909 leukocyte mediated cytotoxicity 163/3662 243/15509 1.80678e-47 2.79961e-44 1.68363e-44 TYROBP/SLAMF7/SPI1/FCGR2B/STXBP2/PTPRC/P2RX7/ICAM1/IL12RB1/CTSG/GZMB/LILRB1/PPP3CB/CTSC/IL12B/CD160/PRDX1/ARG1/NECTIN2/ULBP2/ARL8B/IL21/ARRB2/LYST/IL18/MR1/CD1A/CD1C/CD1B/KIR3DL1/FADD/CX3CR1/LGALS9/ITGAM/SERPINB9/KIF5B/STAT5B/LEP/F2/PRF1/MICA/KIR2DL4/TUBB/ELANE/TAP2/HLA-E/HLA-G/TAP2/TAP2/HLA-DRA/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/HLA-A/HLA-DRA/TAP2/HLA-B/HLA-DRA/HLA-A/HLA-E/HLA-E/HLA-G/MICA/HLA-A/HLA-B/TAP2/MICA/HLA-G/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/PTPRC/KIR2DL4/B2M/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/HLA-G/KIR3DL1/KIR3DL1/KIR3DL1/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/ELANE/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1 163 GO:0022409 positive regulation of cell-cell adhesion 214/3662 367/15509 4.54498e-47 5.63396e-44 3.38816e-44 BAD/SELE/CD4/IGF1/CD74/RUNX3/CD44/ARID1B/FOXP3/PTPRU/AP3D1/RHOA/CBFB/GLI2/ACTB/IL4R/PTPRC/CEACAM6/IL12RB1/ABL1/SMARCB1/XBP1/CTSG/BMP7/SMAD7/CD40LG/NFAT5/PIEZO1/PYCARD/CSK/TJP1/IL7/LILRB1/IL27RA/JAK3/GATA3/MAP3K8/ZMIZ1/SMARCD2/CCL2/EFNB3/ZBTB16/CD5/MDK/CD81/IFNG/IL12B/IL4/BCL6/CD86/WNT5A/HES1/IL1A/ZAP70/ITGA4/IGFBP2/CD160/ARID1A/MYB/FOXO3/NR4A3/GPAM/CD80/SOX4/IL1B/TNFSF9/CD70/CCR7/PODXL/EPO/RARA/FLOT2/AP3B1/PTPN22/IL2RA/ADAM19/IL6/HLX/IL10/CCL21/IL21/SLC7A1/ABL2/DUSP10/IL2RG/IL18/CXCL13/NODAL/DMTN/RUNX1/TNFRSF13C/ICOSLG/ITGB2/JAK1/VCAM1/TGFBR2/SPTA1/SHH/SYK/BRD7/RAG1/NOD2/FADD/RHOH/LGALS9/PTAFR/FGG/FGA/CCL19/KAT5/RELA/STAT5B/SELP/LEP/CD28/PTPN11/HLA-DQB1/KLHL25/IRAK1/SOCS1/LILRB4/ZP3/ARID2/HMGB1/CD55/FUT4/HLA-DQA1/CD47/SRC/ELANE/DPP4/PDCD1LG2/PNP/CR1/HLA-DOA/TNF/HLA-E/HLA-G/HLA-DQB1/HLA-DQA1/HLA-DQB1/HLA-DQA1/HLA-DRA/TNF/HLA-E/HLA-A/HLA-A/HLA-G/HLA-DPB1/HLA-DQA1/HLA-DPB1/TNF/HLA-A/HLA-A/HLA-DQA1/HLA-E/HLA-DQB1/HLA-DQA1/HLA-DPB1/HLA-A/HLA-DRA/HLA-DQA1/TNF/TNF/TNF/HLA-DRA/HLA-A/HLA-E/HLA-DPB1/TNF/HLA-E/HLA-G/HLA-DPB1/HLA-DPB1/HLA-DRB4/HLA-DQB1/HLA-DPA1/HLA-DQA1/HLA-A/HLA-DQB1/HLA-DQA1/TNF/HLA-G/HLA-DQA1/HLA-DQB1/HLA-E/HLA-DRA/HLA-G/HLA-A/HLA-G/HLA-DQA1/HLA-E/HLA-DPB1/HLA-G/HLA-DQA1/HLA-DPB1/HLA-DQA1/PTPRC/CCL5/CD24/B2M/CCL5/LILRB1/SMARCB1/LILRB4/HLA-G/LILRB1/LILRB1/HLA-DRA/TJP1/ELANE/LILRB1/LILRB4/LILRB4 214 GO:0002706 regulation of lymphocyte mediated immunity 172/3662 268/15509 5.39997e-46 5.57817e-43 3.35461e-43 BTK/HFE/TNFRSF1B/PARP3/FOXP3/FCGR2B/TBX21/MLH1/PTPRC/P2RX7/MSH2/IL12RB1/CD40/SMAD7/FCER2/LILRB1/IL27RA/CLC/TGFB1/AHR/EXOSC3/GATA3/PPP3CB/NSD2/HPX/CD81/IL12B/IL4/BCL6/CD160/ARG1/SHLD2/IL1B/C3/FOXJ1/NECTIN2/NDFIP1/IL6/IL10/IL21/SLC15A4/ARRB2/IL18/MR1/CD96/CD1A/CD1C/CD1B/TNFSF13/NOD2/FADD/LGALS9/SERPINB9/STAT5B/LEP/CD28/MICA/LILRB4/ZP3/KIR2DL4/HMGB1/CD55/CR1/TAP2/TNF/HLA-E/HLA-G/TAP2/TAP2/HLA-DRA/TNF/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/LTA/TNF/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/LTA/HLA-A/HLA-DRA/TNF/TAP2/TNF/HLA-B/TNF/HLA-DRA/HLA-A/HLA-E/TNF/HLA-E/LTA/HLA-G/MICA/LTA/HLA-A/HLA-B/TAP2/TNF/MICA/HLA-G/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/LTA/PTPRC/KIR2DL4/B2M/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/HLA-G/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/LILRB4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4 172 GO:0002703 regulation of leukocyte mediated immunity 196/3662 327/15509 1.12955e-45 1.00014e-42 6.01465e-43 BTK/HFE/TYROBP/TNFRSF1B/GAB2/PARP3/C12orf4/FOXP3/SPI1/FCGR2B/TBX21/MLH1/STXBP2/IL4R/DDX1/PTPRC/MAVS/P2RX7/ICAM1/MSH2/IL12RB1/CD40/SMAD7/GATA1/FCER2/LILRB1/IL27RA/CLC/TGFB1/JAK3/AHR/EXOSC3/GATA3/PPP3CB/NSD2/HPX/CD81/IL12B/IL4/BCL6/SNX4/CD160/ARG1/VAMP8/SHLD2/IL1B/C3/RAC2/FOXJ1/NECTIN2/NDFIP1/IL6/IL10/STXBP1/TLR4/IL21/SLC15A4/ARRB2/IL18/MR1/CD96/KIT/CD1A/CD1C/CD1B/ITGB2/TNFSF13/TLR3/SYK/NOD2/FADD/CX3CR1/LGALS9/PTAFR/ITGAM/SERPINB9/STAT5B/LEP/CD28/MICA/LILRB4/ZP3/KIR2DL4/HMGB1/CD55/CR1/TAP2/TNF/HLA-E/HLA-G/CD177/TAP2/TAP2/HLA-DRA/TNF/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/LTA/TNF/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/LTA/HLA-A/HLA-DRA/TNF/TAP2/TNF/HLA-B/TNF/HLA-DRA/HLA-A/HLA-E/TNF/HLA-E/LTA/HLA-G/MICA/LTA/HLA-A/HLA-B/TAP2/TNF/MICA/HLA-G/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/LTA/PTPRC/KIR2DL4/B2M/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/HLA-G/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/LILRB4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4 196 GO:0002440 production of molecular mediator of immune response 198/3662 336/15509 1.49188e-44 1.04211e-41 6.26706e-42 BTK/HFE/CD22/CD74/TNFRSF1B/PARP3/FOXP3/TCF3/FCGR2B/TBX21/MLH1/IL4R/DDX1/PTPRC/MAVS/P2RX7/MSH2/XBP1/CD40/SMAD7/CD40LG/ACP5/PYCARD/NBN/LILRB1/IL27RA/CLC/GPI/TGFB1/JAK3/NOD1/EXOSC3/GATA3/NSD2/HPX/CD81/AICDA/IL17A/IL4/IL5/BCL6/CD86/WNT5A/CD160/ARG1/NR4A3/CD244/SHLD2/PKN1/IL1B/NDFIP1/EPHB2/PTPN22/CD36/IL6/IL10/TLR4/IL21/SLC15A4/TMBIM6/IL18/CD96/KIT/NLRX1/TNFSF13/MAPKAPK2/TLR3/SYK/NOD2/LIG4/CD28/HLA-DQB1/LACC1/PRG2/LILRB4/CARD9/KIR2DL4/CD55/TLR7/HLA-DQA1/ELANE/UBE2J1/CR1/HLA-DOA/TNF/HLA-E/HLA-G/HLA-DQB1/HLA-DQA1/HLA-DQB1/HLA-DQA1/HLA-DRA/TNF/HLA-E/HLA-A/HLA-A/HLA-G/HLA-DPB1/HLA-DQA1/HLA-DPB1/TNF/HLA-A/HLA-A/HLA-DQA1/HLA-E/HLA-DQB1/HLA-DQA1/HLA-DPB1/HLA-A/HLA-DRA/HLA-DQA1/TNF/TNF/TNF/HLA-DRA/HLA-A/HLA-E/HLA-DPB1/TNF/HLA-E/HLA-G/HLA-DPB1/HLA-DPB1/HLA-DRB4/HLA-DQB1/HLA-DPA1/HLA-DQA1/HLA-A/HLA-DQB1/HLA-DQA1/TNF/HLA-G/HLA-DQA1/HLA-DQB1/HLA-E/HLA-DRA/HLA-G/HLA-A/HLA-G/HLA-DQA1/HLA-E/HLA-DPB1/HLA-G/HLA-DQA1/HLA-DPB1/PRKDC/HLA-DQA1/PTPRC/KIR2DL4/B2M/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/HLA-G/LILRB1/MIF/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/ELANE/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/LILRB4/KIR2DL4/GPI/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4 198 GO:0002697 regulation of immune effector process 240/3662 445/15509 1.51323e-44 1.04211e-41 6.26706e-42 BTK/HFE/TYROBP/CD22/CD74/TNFRSF1B/GRN/GAB2/PARP3/C12orf4/FOXP3/SPI1/FCGR2B/TBX21/MLH1/STXBP2/IL4R/DDX1/PTPRC/CD59/MAVS/P2RX7/ICAM1/MSH2/IL12RB1/XBP1/CD40/SMAD7/GATA1/CD40LG/ACP5/PYCARD/FCER2/LILRB1/IL27RA/CLC/GPI/TGFB1/JAK3/NOD1/AHR/EXOSC3/GATA3/PPP3CB/C1QBP/NSD2/HPX/CD81/IFNG/IL17A/IL12B/IL4/IL5/BCL6/CD86/WNT5A/SNX4/CD160/MYB/ARG1/VAMP8/NR4A3/CD80/CD244/SHLD2/PKN1/IL1B/C3/RAC2/FOXJ1/NECTIN2/NDFIP1/RARA/EPHB2/PTPN22/CD36/IL6/HLX/IL10/STXBP1/TLR4/IRF4/DDX60/IL21/SLC15A4/TMBIM6/ARRB2/DUSP10/IL18/MR1/CD96/KIT/APPL1/CD1A/CD1C/CD1B/ITGB2/NLRX1/TNFSF13/MAPKAPK2/TLR3/SYK/MBL2/NOD2/FADD/CX3CR1/LGALS9/PTAFR/ITGAM/SERPINB9/CCL19/STAT5B/LEP/A2M/CD28/LACC1/MICA/PRG2/LILRB4/CARD9/ZP3/KIR2DL4/HMGB1/CD55/TLR7/CD47/UBE2J1/CR1/TAP2/TNF/HLA-E/HLA-G/CD177/TAP2/TAP2/HLA-DRA/TNF/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/LTA/TNF/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/LTA/HLA-A/HLA-DRA/TNF/TAP2/TNF/HLA-B/TNF/HLA-DRA/HLA-A/HLA-E/TNF/HLA-E/LTA/HLA-G/MICA/LTA/HLA-A/HLA-B/TAP2/TNF/MICA/HLA-G/HLA-E/HLA-DRA/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/LTA/PTPRC/KIR2DL4/B2M/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/HLA-G/LILRB1/MIF/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB4/KIR2DL4/LILRB4/KIR2DL4/GPI/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4 240 GO:0002699 positive regulation of immune effector process 195/3662 332/15509 1.37064e-43 8.49521e-41 5.10887e-41 BTK/TYROBP/CD74/GAB2/C12orf4/FOXP3/SPI1/TBX21/MLH1/STXBP2/IL4R/DDX1/PTPRC/MAVS/P2RX7/MSH2/IL12RB1/XBP1/CD40/GATA1/PYCARD/FCER2/LILRB1/GPI/TGFB1/NOD1/EXOSC3/GATA3/NSD2/HPX/CD81/IFNG/IL17A/IL12B/IL4/IL5/CD86/WNT5A/SNX4/CD160/MYB/ARG1/VAMP8/NR4A3/CD80/CD244/SHLD2/IL1B/C3/RAC2/NECTIN2/RARA/EPHB2/PTPN22/CD36/IL6/HLX/IL10/STXBP1/TLR4/DDX60/IL21/IL18/MR1/KIT/CD1A/CD1C/CD1B/ITGB2/TNFSF13/MAPKAPK2/TLR3/SYK/MBL2/NOD2/FADD/LGALS9/PTAFR/ITGAM/CCL19/STAT5B/CD28/LACC1/CARD9/ZP3/KIR2DL4/CD55/TLR7/CR1/TAP2/TNF/HLA-E/HLA-G/CD177/TAP2/TAP2/HLA-DRA/TNF/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/TAP2/HLA-B/NCR3/LTA/TNF/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/TAP2/LTA/HLA-A/HLA-DRA/TNF/TAP2/TNF/HLA-B/TNF/HLA-DRA/HLA-A/HLA-E/TNF/HLA-E/LTA/HLA-G/LTA/HLA-A/HLA-B/TAP2/TNF/HLA-G/HLA-E/HLA-DRA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/TAP2/NCR3/LTA/PTPRC/KIR2DL4/B2M/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/HLA-G/LILRB1/MIF/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/HLA-DRA/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/GPI/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4 195 GO:0002696 positive regulation of leukocyte activation 228/3662 418/15509 2.03813e-43 1.14839e-40 6.90622e-41 BAD/CD38/CD4/BTK/TYROBP/IGF1/CD74/RUNX3/GAB2/ARID1B/FOXP3/AP3D1/KARS1/RHOA/CBFB/TBX21/GLI2/ACTB/MLH1/IL4R/PTPRC/MSH2/IL12RB1/ABL1/SMARCB1/XBP1/CD40/NFATC2/GATA1/CD40LG/PYCARD/CSK/IL7/LILRB1/IL27RA/TGFB1/JAK3/HAMP/EXOSC3/GATA3/MAP3K8/ZMIZ1/SMARCD2/CCL2/EFNB3/NSD2/CTSC/ZBTB16/CD5/MDK/CD81/IFNG/IL12B/IL4/IL5/BCL6/CD86/WNT5A/HES1/SNX4/IL1A/ZAP70/IGFBP2/CD160/MPL/ARID1A/MYB/VAMP8/FOXO3/NR4A3/GPAM/CD80/SHLD2/CDKN1A/SOX4/IL1B/TNFSF9/CD70/CCR7/NECTIN2/EPO/RARA/FLOT2/AP3B1/EPHB2/PTPN22/IL2RA/AKIRIN2/IL6/HLX/IL10/STXBP1/TLR4/CCL21/THBS1/IL21/SLC7A1/ABL2/DUSP10/IL2RG/IL18/MMP14/RUNX1/TNFRSF13C/ICOSLG/ITGB2/TNFSF13/VCAM1/TGFBR2/SPTA1/SHH/SYK/BRD7/RAG1/NOD2/FADD/RHOH/TNIP2/INPP5D/LGALS9/PTAFR/ITGAM/CCL19/KAT5/STAT5B/LEP/CD28/PTPN11/HLA-DQB1/KLHL25/SOCS1/LILRB4/ZP3/ARID2/BLOC1S3/HMGB1/CD55/HLA-DQA1/CD47/SRC/DPP4/PDCD1LG2/PNP/CR1/HLA-DOA/TNF/HLA-E/HLA-G/CD177/CRLF2/HLA-DQB1/HLA-DQA1/HLA-DQB1/HLA-DQA1/HLA-DRA/TNF/HLA-E/HLA-A/HLA-A/HLA-G/HLA-DPB1/HLA-DQA1/HLA-DPB1/TNF/HLA-A/HLA-A/HLA-DQA1/HLA-E/HLA-DQB1/HLA-DQA1/HLA-DPB1/HLA-A/HLA-DRA/HLA-DQA1/TNF/TNF/TNF/HLA-DRA/HLA-A/HLA-E/HLA-DPB1/TNF/HLA-E/HLA-G/HLA-DPB1/HLA-DPB1/HLA-DRB4/HLA-DQB1/HLA-DPA1/HLA-DQA1/HLA-A/HLA-DQB1/HLA-DQA1/TNF/HLA-G/HLA-DQA1/HLA-DQB1/HLA-E/HLA-DRA/HLA-G/HLA-A/HLA-G/HLA-DQA1/HLA-E/HLA-DPB1/HLA-G/HLA-DQA1/HLA-DPB1/CEBPA/PRKDC/HLA-DQA1/PTPRC/CCL5/CD24/B2M/CCL5/LILRB1/SMARCB1/LILRB4/HLA-G/LILRB1/MIF/LILRB1/HLA-DRA/LILRB1/LILRB4/LILRB4/INPP5D 228 GO:0002228 natural killer cell mediated immunity 126/3662 173/15509 6.04231e-43 3.12085e-40 1.87683e-40 SLAMF7/GZMB/LILRB1/IL12B/CD160/PRDX1/NECTIN2/ULBP2/ARL8B/IL21/ARRB2/LYST/IL18/CD96/KIR3DL1/LGALS9/SERPINB9/KIF5B/STAT5B/LEP/MICA/KIR2DL4/TUBB/HLA-E/HLA-G/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/HLA-B/NCR3/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/HLA-A/HLA-B/HLA-A/HLA-E/HLA-E/HLA-G/MICA/HLA-A/HLA-B/MICA/HLA-G/HLA-E/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/NCR3/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/HLA-G/KIR3DL1/KIR3DL1/KIR3DL1/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1 126 GO:0042267 natural killer cell mediated cytotoxicity 125/3662 171/15509 6.76603e-43 3.22584e-40 1.93996e-40 SLAMF7/GZMB/LILRB1/IL12B/CD160/PRDX1/NECTIN2/ULBP2/ARL8B/IL21/ARRB2/LYST/IL18/KIR3DL1/LGALS9/SERPINB9/KIF5B/STAT5B/LEP/MICA/KIR2DL4/TUBB/HLA-E/HLA-G/HLA-B/HLA-E/HLA-A/HLA-A/HLA-G/HLA-B/NCR3/HLA-A/HLA-A/HLA-B/HLA-E/NCR3/HLA-A/HLA-B/HLA-A/HLA-E/HLA-E/HLA-G/MICA/HLA-A/HLA-B/MICA/HLA-G/HLA-E/MICA/HLA-G/HLA-A/HLA-G/NCR3/HLA-E/NCR3/NCR3/HLA-G/NCR3/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/HLA-G/KIR3DL1/KIR3DL1/KIR3DL1/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/LILRB1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR3DL1/KIR3DL1/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1/KIR3DL1/KIR2DL4/KIR2DL4/KIR3DL1/KIR2DL4/KIR2DL4/KIR2DL4/KIR2DL4/KIR3DL1 125 <p>Tip</p> <p>Instead of saving just the results summary from the <code>ego</code> object, it might also be beneficial to save the object itself. The <code>save()</code> function enables you to save it as a <code>.rda</code> file, e.g. <code>save(ego, file=\"results/ego.rda\")</code>.  The complementary function to <code>save()</code> is the function <code>load()</code>, e.g. </p> <p><code>ego &lt;- load(file=\"results/ego.rda\")</code>.</p> <p>This is a useful set of functions to know, since it enables one to preserve analyses at specific stages and reload them when needed. More information about these functions can be found here &amp; here.</p> <p>Tip</p> <p>You can also perform GO enrichment analysis with only the up or down regulated genes** in addition to performing it for the full list of significant genes. This can be useful to identify GO terms impacted in one direction and not the other. If very few genes are in any of these lists (&lt; 50, roughly) it may not be possible to get any significant GO terms.</p> <p>Exercise 1</p> <p>Create two new GO enrichment analyses one with UP and another for DOWN regulated genes for Control vs Vampirium.</p> Solution to Exercise 1 <ol> <li>Separate results into UP and DOWN regulated:</li> </ol> <pre><code>sigCont_UP &lt;- sigCont %&gt;% filter(log2FoldChange &gt; 0)\nsigCont_DOWN &lt;- sigCont %&gt;% filter(log2FoldChange &lt; 0)\n</code></pre> <ol> <li>Run overrepresentation:</li> </ol> <p>UP regulated genes</p> <pre><code>ego_UP &lt;- enrichGO(gene = sigCont_UP$gene, \n                universe = allCont_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\n</code></pre> <p>DOWN regulated genes</p> <pre><code>ego_DOWN &lt;- enrichGO(gene = sigCont_DOWN$gene, \n                universe = allCont_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\n</code></pre> <ol> <li>Check results:</li> </ol> <pre><code>head(ego_UP)\n</code></pre> <pre><code>head(ego_DOWN)\n</code></pre>"},{"location":"08b_FA_overrepresentation.html#visualizing-clusterprofiler-results","title":"Visualizing clusterProfiler results","text":"<p>clusterProfiler has a variety of options for viewing the over-represented GO terms. We will explore the dotplot, enrichment plot, and the category netplot.</p> <p>The dotplot shows the number of genes associated with the first terms (size) and the p-adjusted values for these terms (color). This plot displays the top 20 GO terms by gene ratio (# genes related to GO term / total number of sig genes), not p-adjusted value.</p> <pre><code>## Dotplot \ndotplot(ego, showCategory=20)\n</code></pre> <p></p> <p>The next plot is the enrichment GO plot, which shows the relationship between the top 50 most significantly enriched GO terms (padj.), by grouping similar terms together. Before creating the plot, we will need to obtain the similarity between terms using the <code>pairwise_termsim()</code> function instructions for emapplot. In the enrichment plot, the color represents the p-values relative to the other displayed terms (brighter red is more significant), and the size of the terms represents the number of genes that are significant from our list.</p> <pre><code># Add similarity matrix to the termsim slot of enrichment result\nego &lt;- enrichplot::pairwise_termsim(ego)\n</code></pre> <pre><code># Enrichmap clusters the 50 most significant (by padj) GO terms to visualize relationships between terms\nemapplot(ego, showCategory = 50)\n</code></pre> <p></p> <p>Finally, the category netplot shows the relationships between the genes associated with the top five most significant GO terms and the fold changes of the significant genes associated with these terms (color). The size of the GO terms reflects the pvalues of the terms, with the more significant terms being larger. This plot is particularly useful for hypothesis generation in identifying genes that may be important to several of the most affected processes.</p> <p>Warning</p> <p>You may need to install the <code>ggnewscale</code> package using <code>install.packages(\"ggnewscale\")</code> for the <code>cnetplot()</code> function to work.</p> <pre><code># To color genes by log2 fold changes, we need to extract the log2 fold changes from our results table creating a named vector\nCont_foldchanges &lt;- sigCont$log2FoldChange\n\nnames(Cont_foldchanges) &lt;- sigCont$gene\n</code></pre> <pre><code># Cnetplot details the genes associated with one or more terms - by default gives the top 5 significant terms (by padj)\ncnetplot(ego, \n         categorySize=\"pvalue\", \n         showCategory = 5, \n         foldChange=Cont_foldchanges, \n         vertex.label.font=6)\n</code></pre> <p>Tip</p> <p>If some of the high fold changes are getting drowned out due to a large range, you could set a maximum fold change value</p> <pre><code>Cont_foldchanges &lt;- ifelse(Cont_foldchanges &gt; 2, 2, Cont_foldchanges)\nCont_foldchanges &lt;- ifelse(Cont_foldchanges &lt; -2, -2, Cont_foldchanges)\n</code></pre> <pre><code>cnetplot(ego, \n     categorySize=\"pvalue\", \n     showCategory = 5, \n     foldChange=Cont_foldchanges, \n     vertex.label.font=6)\n</code></pre> <p></p> <p>Tip</p> <p>If you are interested in significant processes that are not among the top five, you can subset your <code>ego</code> dataset to only display these processes:</p> <pre><code># Subsetting the ego results without overwriting original `ego` variable\nego2 &lt;- ego\n\nego2@result &lt;- ego@result[c(1,3,4,8,9),]\n\n# Plotting terms of interest\ncnetplot(ego2, \n     categorySize=\"pvalue\", \n     foldChange=Cont_foldchanges, \n     showCategory = 5, \n     vertex.label.font=6)\n</code></pre> <p></p> <p>Exercise 2</p> <p>Run a Disease Ontology (DO) overrepresentation analysis using the <code>enrichDO()</code> function. NOTE the arguments are very similar to the previous examples. </p> <ul> <li>Do you find anything interesting?</li> </ul> Solution to Exercise 2 <p>For the DO, we need to use entrez IDs, instead of gene IDs</p> <p>All significantly regulated genes.</p> <pre><code>edo &lt;- enrichDO(sigCont$entrez, qvalueCutoff = 1)\nhead(edo)\n</code></pre> <p>UP significantly regulated genes</p> <pre><code>edo_UP &lt;- enrichDO(sigCont_UP$entrez)\nhead(edo_UP)\n</code></pre> <p>DOWN significantly regulated genes</p> <pre><code>edo_DOWN &lt;- enrichDO(sigCont_DOWN$entrez)\nhead(edo_DOWN)\n</code></pre> <p>Exercise 3</p> <p>Run an enrichment analysis on the results of the DEA for Garlicum vs Vampirium samples. Remember to use the annotated results!</p> Solution to Exercise 3 <p>Let's do a simple analysis as an example:</p> <pre><code>## Create background dataset for hypergeometric testing using all genes tested for significance in the results\nallGar_genes &lt;- dplyr::filter(res_ids_Gar, !is.na(gene)) %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n## Extract significant results\nsigGar &lt;- dplyr::filter(res_ids_Gar, padj &lt; 0.05 &amp; !is.na(gene))\n\nsigGar_genes &lt;- sigGar %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n</code></pre> <p>Now we can perform the GO enrichment analysis and save the results:</p> <pre><code>## Run GO enrichment analysis \nego &lt;- enrichGO(gene = sigGar_genes, \n                universe = allGar_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\n</code></pre> <pre><code>## Output results from GO analysis to a table\ncluster_summary &lt;- data.frame(ego)\ncluster_summary\n\nwrite.csv(cluster_summary, \"../Results/clusterProfiler_Gar-Vamp.csv\")\n</code></pre> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"08c_FA_GSEA.html","title":"Functional class scoring","text":""},{"location":"08c_FA_GSEA.html#functional-class-scoring","title":"Functional class scoring","text":"<p>Last updated: May 21, 2024</p> <p>Section Overview</p> <p>\ud83d\udd70 Time Estimation: 40 minutes  </p> <p>\ud83d\udcac Learning Objectives: </p> <ol> <li>Discuss functional class scoring, and pathway topology methods</li> <li>Construct a GSEA analysis using GO and KEGG gene sets</li> <li>Examine results of a GSEA using pathview package</li> <li>List other tools and resources for identifying genes of novel pathways or networks</li> </ol> <p>Over-representation analysis is only a single type of functional analysis method that is available for teasing apart the biological processes important to your condition of interest. Other types of analyses can be equally important or informative, including functional class scoring methods.</p> <p></p> <p>Functional class scoring (FCS) tools, such as GSEA, most often use the gene-level statistics or log2 fold changes for all genes from the differential expression results, then look to see whether gene sets for particular biological pathways are enriched among the large positive or negative fold changes.</p> <p></p> <p>The hypothesis of FCS methods is that although large changes in individual genes can have significant effects on pathways (and will be detected via ORA methods), weaker but coordinated changes in sets of functionally related genes (i.e., pathways) can also have significant effects. Thus, rather than setting an arbitrary threshold to identify 'significant genes', all genes are considered in the analysis. The gene-level statistics from the dataset are aggregated to generate a single pathway-level statistic and statistical significance of each pathway is reported. This type of analysis can be particularly helpful if the differential expression analysis only outputs a small list of significant DE genes.</p>"},{"location":"08c_FA_GSEA.html#gene-set-enrichment-analysis-using-clusterprofiler-and-pathview","title":"Gene set enrichment analysis using clusterProfiler and Pathview","text":"<p>Using the log2 fold changes obtained from the differential expression analysis for every gene, gene set enrichment analysis and pathway analysis can be performed using clusterProfiler and Pathview tools.</p> <p>For a gene set or pathway analysis using clusterProfiler, coordinated differential expression over gene sets is tested instead of changes of individual genes.</p> <p>Info</p> <p>Gene sets are pre-defined groups of genes, which are functionally related. Commonly used gene sets include those derived from KEGG pathways, Gene Ontology terms, MSigDB, Reactome, or gene groups that share some other functional annotations, etc. Consistent perturbations over such gene sets frequently suggest mechanistic changes.</p>"},{"location":"08c_FA_GSEA.html#preparation-for-gsea","title":"Preparation for GSEA","text":"<p>clusterProfiler offers several functions to perform GSEA using different genes sets, including but not limited to GO, KEGG, and MSigDb. We will use the KEGG gene sets, which identify genes using their Entrez IDs. Therefore, to perform the analysis, we will need to acquire the Entrez IDs. We will also need to remove the Entrez ID NA values and duplicates (due to gene ID conversion) prior to the analysis:</p> <pre><code># Remove any NA values (reduces the data by quite a bit) and duplicates\nres_entrez &lt;- dplyr::filter(res_ids, entrez != \"NA\" &amp; duplicated(entrez)==F)\n</code></pre> <p>Finally, extract and name the fold changes:</p> <pre><code># Extract the foldchanges\nfoldchanges &lt;- res_entrez$log2FoldChange\n\n# Name each fold change with the corresponding Entrez ID\nnames(foldchanges) &lt;- res_entrez$entrez\n</code></pre> <p>Next we need to order the fold changes in decreasing order. To do this we'll use the <code>sort()</code> function, which takes a vector as input. This is in contrast to Tidyverse's <code>arrange()</code>, which requires a data frame.</p> <pre><code>## Sort fold changes in decreasing order\nfoldchanges &lt;- sort(foldchanges, decreasing = TRUE)\n\nhead(foldchanges)\n</code></pre>"},{"location":"08c_FA_GSEA.html#theory-of-gsea","title":"Theory of GSEA","text":"<p>Now we are ready to perform GSEA. The details regarding GSEA can be found in the PNAS paper by Subramanian et al. We will describe briefly the steps outlined in the paper below:</p> <p></p> <p>Image credit: Subramanian et al. Proceedings of the National Academy of Sciences Oct 2005, 102 (43) 15545-15550; DOI: 10.1073/pnas.0506580102</p> <p>This image describes the theory of GSEA, with the 'gene set S' showing the metric used (in our case, ranked log2 fold changes) to determine enrichment of genes in the gene set. The left-most image is representing this metric used for the GSEA analysis. The log2 fold changes for each gene in the 'gene set S' is shown as a line in the middle image. The large positive log2 fold changes are at the top of the gene set image, while the largest negative log2 fold changes are at the bottom of the gene set image. In the right-most image, the gene set is turned horizontally, underneath which is an image depicting the calculations involved in determining enrichment, as described below.</p>"},{"location":"08c_FA_GSEA.html#step-1-calculation-of-enrichment-score","title":"Step 1: Calculation of enrichment score:","text":"<p>An enrichment score for a particular gene set is calculated by walking down the list of log2 fold changes and increasing the running-sum statistic every time a gene in the gene set is encountered and decreasing it when genes are not part of the gene set. The size of the increase/decrease is determined by magnitude of the log2 fold change. Larger (positive or negative) log2 fold changes will result in larger increases or decreases. The final enrichment score is where the running-sum statistic is the largest deviation from zero.</p>"},{"location":"08c_FA_GSEA.html#step-2-estimation-of-significance","title":"Step 2: Estimation of significance:","text":"<p>The significance of the enrichment score is determined using permutation testing, which performs rearrangements of the data points to determine the likelihood of generating an enrichment score as large as the enrichment score calculated from the observed data. Essentially, for this step, the first permutation would reorder the log2 fold changes and randomly assign them to different genes, reorder the gene ranks based on these new log2 fold changes, and recalculate the enrichment score. The second permutation would reorder the log2 fold changes again and recalculate the enrichment score again, and this would continue for the total number of permutations run. Therefore, the number of permutations run will increase the confidence in the signficance estimates.</p>"},{"location":"08c_FA_GSEA.html#step-3-adjust-for-multiple-test-correction","title":"Step 3: Adjust for multiple test correction","text":"<p>After all gene sets are tested, the enrichment scores are normalized for the size of the gene set, then the p-values are corrected for multiple testing.</p> <p>The GSEA output will yield the core genes in the gene sets that most highly contribute to the enrichment score. The genes output are generally the genes at or before the running sum reaches its maximum value (e.g. the most influential genes driving the differences between conditions for that gene set).</p>"},{"location":"08c_FA_GSEA.html#performing-gsea","title":"Performing GSEA","text":"<p>To perform the GSEA using KEGG gene sets with clusterProfiler, we can use the <code>gseKEGG()</code> function:</p> <pre><code>## GSEA using gene sets from KEGG pathways\ngseaKEGG &lt;- gseKEGG(geneList = foldchanges, # ordered named vector of fold changes (Entrez IDs are the associated names)\n              organism = \"hsa\", # supported organisms listed below\n              pvalueCutoff = 0.05, # padj cutoff value\n              verbose = FALSE)\n\n## Extract the GSEA results\ngseaKEGG_results &lt;- gseaKEGG@result\nhead(gseaKEGG_results)\n</code></pre> <p>Other organisms for KEGG pathways</p> <p>The organisms with KEGG pathway information are listed here.</p> <p>How many pathways are enriched? Let's view the enriched pathways:</p> <pre><code>## Write GSEA results to file\nView(gseaKEGG_results)\n\nwrite.csv(gseaKEGG_results, \"../Results/gseaCont-Vamp_kegg.csv\", quote=F)\n</code></pre> <p>Warning</p> <p>We will can all get different results for the GSEA because the permutations performed use random reordering. If we would like to use the same permutations every time we run a function (i.e. we would like the same results every time we run the function), then we could use the <code>set.seed(123456)</code> function prior to running. The input to <code>set.seed()</code> could be any number, but if you would want the same results, then you would need to use the same number as input.</p> <p>Explore the GSEA plot of enrichment of one of the pathways in the ranked list:</p> <pre><code>## Plot the GSEA plot for a single enriched pathway:\ngseaplot(gseaKEGG, geneSetID = gseaKEGG_results$ID[1], title = gseaKEGG_results$Description[1])\n</code></pre> <p></p> <p>In this plot, the lines in plot represent the genes in the gene set, and where they occur among the log2 fold changes. The largest positive log2 fold changes are on the left-hand side of the plot, while the largest negative log2 fold changes are on the right. The top plot shows the magnitude of the log2 fold changes for each gene, while the bottom plot shows the running sum, with the enrichment score peaking at the red dotted line (which is among the negative log2 fold changes).</p> <p>Use the Pathview R package to integrate the KEGG pathway data from clusterProfiler into pathway images:</p> <pre><code>## Output images for a single significant KEGG pathway\npathview(gene.data = foldchanges,\n              pathway.id = gseaKEGG_results$ID[1],\n              species = \"hsa\",\n              limit = list(gene = 2, # value gives the max/min limit for foldchanges\n              cpd = 1))\n</code></pre> <p></p> <p>Printing out Pathview images for all significant pathways</p> <p>Printing out Pathview images for all significant pathways can be easily performed as follows:</p> <pre><code># Output images for all significant KEGG pathways\nget_kegg_plots &lt;- function(x) {\n  pathview(gene.data = foldchanges, \n        pathway.id = gseaKEGG_results$ID[x], \n        species = \"hsa\",\n        limit = list(gene = 2, cpd = 1))\n  }\n\npurrr::map(1:length(gseaKEGG_results$ID), \n       get_kegg_plots)\n</code></pre> <p>Instead of exploring enrichment of KEGG gene sets, we can also explore the enrichment of BP Gene Ontology terms using gene set enrichment analysis:</p> <pre><code># GSEA using gene sets associated with BP Gene Ontology terms\ngseaGO &lt;- gseGO(geneList = foldchanges, \n              OrgDb = org.Hs.eg.db, \n              ont = 'BP', \n              minGSSize = 20, \n              pvalueCutoff = 0.05,\n              verbose = FALSE) \n\ngseaGO_results &lt;- gseaGO@result\nhead(gseaGO_results)\n</code></pre> <pre><code>gseaplot(gseaGO, geneSetID = gseaGO_results$ID[1], title = gseaGO_results$Description[1])\n</code></pre> <p>There are other gene sets available for GSEA analysis in clusterProfiler (Disease Ontology, Reactome pathways, etc.). You can check out this link for more!</p> <p>Exercise 1</p> <p>Run a Disease Ontology (DO) GSE analysis using the <code>gseDO()</code> function. The arguments are very similar to the previous examples!</p> <ul> <li>Do you find anything interesting?</li> </ul> Solution to Exercise 1 <pre><code>gseaDO &lt;- gseDO(foldchanges, pvalueCutoff = 1)\n\nhead(gseaDO)\n</code></pre> <p>We see now very similar results to our overrepresentation analysis. This is due to the fact that we have quite big lists of differentially expressed genes. GSEA analysis are most useful when your gene lists are low and normal overrepresentation analysis will perform very poorly.</p> <p>Exercise 2</p> <p>Run an GSE on the results of the DEA for Garlicum vs Vampirium samples. Remember to use the annotated results!</p> Solution to Exercise 2 <p>We need to prepare our values for GSEA:</p> <pre><code># Remove any NA values (reduces the data by quite a bit) and duplicates\nres_entrez_Gar &lt;- dplyr::filter(res_ids_Gar, entrez != \"NA\" &amp; duplicated(entrez)==F)\n</code></pre> <p>Finally, extract and name the fold changes:</p> <pre><code># Extract the foldchanges\nfoldchanges_Gar &lt;- res_entrez_Gar$log2FoldChange\n\n# Name each fold change with the corresponding Entrez ID\nnames(foldchanges_Gar) &lt;- res_entrez_Gar$entrez\n</code></pre> <p>Next we need to order the fold changes in decreasing order. To do this we'll use the <code>sort()</code> function, which takes a vector as input. This is in contrast to Tidyverse's <code>arrange()</code>, which requires a data frame.</p> <pre><code>## Sort fold changes in decreasing order\nfoldchanges_Gar &lt;- sort(foldchanges_Gar, decreasing = TRUE)\n\nhead(foldchanges_Gar)\n</code></pre> <p>Ne we can perform GSEA. This is an example for GO term analysis</p> <pre><code>gseaGO &lt;- gseGO(geneList = foldchanges_Gar, \n              OrgDb = org.Hs.eg.db, \n              ont = 'BP', \n              minGSSize = 20, \n              pvalueCutoff = 0.05,\n              verbose = FALSE) \n\ngseaGO_results &lt;- gseaGO@result\nhead(gseaGO_results)\n</code></pre> <pre><code>gseaplot(gseaGO, geneSetID = gseaGO_results$ID[1], title = gseaGO_results$Description[1])\n</code></pre>"},{"location":"08c_FA_GSEA.html#other-tools","title":"Other Tools","text":""},{"location":"08c_FA_GSEA.html#create-your-own-gene-set-and-run-gsea","title":"Create your own Gene Set and run GSEA","text":"<p>It is possible to supply your own gene set GMT file, such as a GMT for MSigDB using special clusterProfiler functions as shown below:</p> <pre><code># DO NOT RUN\nBiocManager::install(\"GSEABase\")\nlibrary(GSEABase)\n\n# Load in GMT file of gene sets (we downloaded from the Broad Institute for MSigDB)\n\nc2 &lt;- read.gmt(\"/data/c2.cp.v6.0.entrez.gmt.txt\")\n\nmsig &lt;- GSEA(foldchanges, TERM2GENE=c2, verbose=FALSE)\n\nmsig_df &lt;- data.frame(msig)\n</code></pre>"},{"location":"08c_FA_GSEA.html#pathway-topology-tools","title":"Pathway topology tools","text":"<p>Pathway topology analysis often takes into account gene interaction information along with the fold changes and adjusted p-values from differential expression analysis to identify dysregulated pathways. Depending on the tool, pathway topology tools explore how genes interact with each other (e.g. activation, inhibition, phosphorylation, ubiquitination, etc.) to determine the pathway-level statistics. Pathway topology-based methods utilize the number and type of interactions between gene product (our DE genes) and other gene products to infer gene function or pathway association.</p> <p>For instance, the SPIA (Signaling Pathway Impact Analysis) tool can be used to integrate the lists of differentially expressed genes, their fold changes, and pathway topology to identify affected pathways.</p>"},{"location":"08c_FA_GSEA.html#co-expression-clustering","title":"Co-expression clustering","text":"<p>Co-expression clustering is often used to identify genes of novel pathways or networks by grouping genes together based on similar trends in expression. These tools are useful in identifying genes in a pathway, when their participation in a pathway and/or the pathway itself is unknown. These tools cluster genes with similar expression patterns to create 'modules' of co-expressed genes which often reflect functionally similar groups of genes. These 'modules' can then be compared across conditions or in a time-course experiment to identify any biologically relevant pathway or network information.</p> <p>You can visualize co-expression clustering using heatmaps, which should be viewed as suggestive only; serious classification of genes needs better methods.</p> <p>The way the tools perform clustering is by taking the entire expression matrix and computing pair-wise co-expression values. A network is then generated from which we explore the topology to make inferences on gene co-regulation. The WGCNA package (in R) is one example of a more sophisticated method for co-expression clustering.</p>"},{"location":"08c_FA_GSEA.html#extra-resources-for-functional-analysis","title":"Extra resources for functional analysis","text":"<ul> <li>g:Profiler - http://biit.cs.ut.ee/gprofiler/index.cgi</li> <li>DAVID - http://david.abcc.ncifcrf.gov/tools.jsp</li> <li>clusterProfiler - http://bioconductor.org/packages/release/bioc/html/clusterProfiler.html</li> <li>GeneMANIA - http://www.genemania.org/</li> <li>GenePattern - http://www.broadinstitute.org/cancer/software/genepattern/ (need to register)</li> <li>WebGestalt - http://bioinfo.vanderbilt.edu/webgestalt/ (need to register)</li> <li>AmiGO - http://amigo.geneontology.org/amigo</li> <li>ReviGO (visualizing GO analysis, input is GO terms) - http://revigo.irb.hr/</li> <li>WGCNA - https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/</li> <li>GSEA - http://software.broadinstitute.org/gsea/index.jsp</li> <li>SPIA - https://www.bioconductor.org/packages/release/bioc/html/SPIA.html</li> <li>GAGE/Pathview - http://www.bioconductor.org/packages/release/bioc/html/gage.html</li> </ul> <p>This lesson was originally developed by members of the teaching team (Mary Piper, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).</p>"},{"location":"09_summarized_workflow.html","title":"Summary of DGE workflow","text":""},{"location":"09_summarized_workflow.html#summarised-workflow","title":"Summarised workflow","text":"<p>Last updated: May 21, 2024</p> <p>We have detailed the various steps in a differential expression analysis workflow, providing theory with example code. To provide a more succinct reference for the code needed to run a DGE analysis, we have summarized the steps in an analysis below:</p>"},{"location":"09_summarized_workflow.html#libraries","title":"Libraries","text":"<pre><code>library(tidyverse)\nlibrary(DESeq2)\nlibrary(ggrepel)\nlibrary(pheatmap)\nlibrary(annotables)\nlibrary(clusterProfiler)\nlibrary(DOSE)\nlibrary(pathview)\nlibrary(org.Hs.eg.db)\nlibrary(tximport)\nlibrary(RColorBrewer)\n</code></pre>"},{"location":"09_summarized_workflow.html#obtaining-gene-level-counts-from-your-preprocessing-and-create-deseq-object","title":"Obtaining gene-level counts from your preprocessing and create DESeq object","text":""},{"location":"09_summarized_workflow.html#if-you-have-a-traditional-raw-count-matrix","title":"If you have a traditional raw count matrix","text":"<p>Load data and metadata</p> <pre><code>data &lt;- read_table(\"../Data/Vampirium_counts_traditional.tsv\") \n\nmeta &lt;- read_table(\"../Data/samplesheet.csv\")\nmeta$condition &lt;- factor(meta$condition, levels = c(\"vampirium\", \"control\", \"garlicum\"))\n</code></pre> <p>Check that the row names of the metadata equal the column names of the raw counts data</p> <pre><code>all(colnames(data)[-1] == meta$sample)\n</code></pre> <p>Create DESeq2Dataset object</p> <pre><code>dds &lt;- DESeqDataSetFromMatrix(countData = data %&gt;% column_to_rownames(\"GeneSymbol\"), \n                              colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n</code></pre>"},{"location":"09_summarized_workflow.html#if-you-have-pseudocounts","title":"If you have pseudocounts","text":"<p>Load samplesheet with all our metadata from our pipeline</p> <pre><code># Load data, metadata and tx2gene and create a txi object\nmeta &lt;- read_csv(\"/work/Intro_bulkRNAseq/Data/samplesheet.csv\")\nmeta$condition &lt;- factor(meta$condition, levels = c(\"vampirium\", \"control\", \"garlicum\"))\n</code></pre> <p>Create a list of salmon results</p> <pre><code>dir &lt;- \"/work/Intro_bulkRNAseq/Data/salmon\"\ntx2gene &lt;- read_table(file.path(dir,\"salmon_tx2gene.tsv\"), col_names = c(\"transcript_ID\",\"gene_ID\",\"gene_symbol\"))\n\n# Get all salmon results files\nfiles &lt;- file.path(dir, meta$sample, \"quant.sf\")\nnames(files) &lt;- meta$sample\n</code></pre> <p>Create txi object</p> <pre><code>txi &lt;- tximport(files, type=\"salmon\", tx2gene=tx2gene, countsFromAbundance = \"lengthScaledTPM\", ignoreTxVersion = TRUE)\n</code></pre> <p>Create dds object</p> <pre><code>dds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n</code></pre>"},{"location":"09_summarized_workflow.html#exploratory-data-analysis","title":"Exploratory data analysis","text":"<p>Prefiltering low count genes + PCA &amp; hierarchical clustering - identifying outliers and sources of variation in the data:</p>"},{"location":"09_summarized_workflow.html#prefiltering-low-count-genes","title":"Prefiltering low count genes","text":"<pre><code>keep &lt;- rowSums(counts(dds)) &gt; 0\ndds &lt;- dds[keep,]\n</code></pre>"},{"location":"09_summarized_workflow.html#rlog-transformation","title":"Rlog transformation","text":"<pre><code># Transform counts for data visualization\nrld &lt;- rlog(dds, \n            blind=TRUE)\n</code></pre>"},{"location":"09_summarized_workflow.html#pca","title":"PCA","text":"<p>Plot PCA</p> <pre><code>plotPCA(rld, \n        intgroup=\"condition\")\n</code></pre>"},{"location":"09_summarized_workflow.html#heatmaps","title":"Heatmaps","text":"<p>Extract the rlog matrix from the object</p> <pre><code>rld_mat &lt;- assay(rld)\nrld_cor &lt;- cor(rld_mat) # Pearson correlation betweeen samples\nrld_dist &lt;- as.matrix(dist(t(assay(rld)))) #distances are computed by rows, so we need to transponse the matrix\n</code></pre> <p>Plot heatmap of correlations</p> <pre><code>pheatmap(rld_cor, \n         annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% select(\"condition\"))\n</code></pre> <p>Plot heatmap of distances with a new color range</p> <pre><code>heat.colors &lt;- brewer.pal(6, \"Blues\") # Colors from the RColorBrewer package (only 6)\nheat.colors &lt;- colorRampPalette(heat.colors)(100) # Interpolate 100 colors\n\npheatmap(rld_dist, \n         annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% select(\"condition\"),\n         color = heat.colors)\n</code></pre>"},{"location":"09_summarized_workflow.html#run-deseq2","title":"Run DESeq2:","text":"<p>Optional step - Re-create DESeq2 dataset if the design formula has changed after QC analysis in include other sources of variation using</p> <pre><code># dds &lt;- DESeqDataSetFromMatrix(data, colData = meta, design = ~ covariate + condition)\n</code></pre> <p>Run DEseq2</p> <pre><code># Run DESeq2 differential expression analysis\ndds &lt;- DESeq(dds)\n</code></pre> <p>Optional step - Output normalized counts to save as a file to access outside RStudio using</p> <pre><code>normalized_counts &lt;- counts(dds, normalized=TRUE)\n</code></pre>"},{"location":"09_summarized_workflow.html#check-the-fit-of-the-dispersion-estimates","title":"Check the fit of the dispersion estimates","text":"<p>Plot dispersion estimates</p> <pre><code>plotDispEsts(dds)\n</code></pre>"},{"location":"09_summarized_workflow.html#create-contrasts-to-perform-wald-testing-or-the-shrunken-log2-fold-changes-between-specific-conditions","title":"Create contrasts to perform Wald testing or the shrunken log2 fold changes between specific conditions","text":"<p>Formal LFC calculation</p> <pre><code># Specify contrast for comparison of interest\ncontrast &lt;- c(\"condition\", \"control\", \"vampirium\")\n\n# Output results of Wald test for contrast\nres &lt;- results(dds, \n               contrast = contrast, \n               alpha = 0.05)\n</code></pre> <p>Shrinkage</p> <pre><code># Get name of the contrast you would like to use\nresultsNames(dds)\n\n# Shrink the log2 fold changes to be more accurate\nres &lt;- lfcShrink(dds, \n                 coef = \"condition_control_vs_vampirium\", \n                 type = \"apeglm\")\n</code></pre>"},{"location":"09_summarized_workflow.html#output-significant-results","title":"Output significant results:","text":"<pre><code># Set thresholds\npadj.cutoff &lt;- 0.05\n\n# Turn the results object into a tibble for use with tidyverse functions\nres_tbl &lt;- res %&gt;%\n  data.frame() %&gt;%\n  rownames_to_column(var=\"gene\") %&gt;% \n  as_tibble()\n\n# Subset the significant results\nsig_res &lt;- filter(res_tbl, \n                  padj &lt; padj.cutoff)\n</code></pre>"},{"location":"09_summarized_workflow.html#visualize-results-volcano-plots-heatmaps-normalized-counts-plots-of-top-genes-etc","title":"Visualize results: volcano plots, heatmaps, normalized counts plots of top genes, etc.","text":"<p>Function to get gene_IDs based on gene names. The function will take as input a vector of gene names of interest, the tx2gene dataframe and the dds object that you analyzed.</p> <pre><code>lookup &lt;- function(gene_name, tx2gene, dds){\n  hits &lt;- tx2gene %&gt;% select(gene_symbol, gene_ID) %&gt;% distinct() %&gt;% \n    filter(gene_symbol %in% gene_name &amp; gene_ID %in% rownames(dds))\n  return(hits)\n}\n\nlookup(gene_name = \"TSPAN7\", tx2gene = tx2gene, dds = dds)\n</code></pre> <p>Plot expression for single gene</p> <pre><code>plotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\")\n</code></pre>"},{"location":"09_summarized_workflow.html#maplot","title":"MAplot","text":"<pre><code>plotMA(res)\n</code></pre>"},{"location":"09_summarized_workflow.html#volcano-plot-with-labels-top-n-genes","title":"Volcano plot with labels (top N genes)","text":"<pre><code>## Obtain logical vector where TRUE values denote padj values &lt; 0.05 and fold change &gt; 1.5 in either direction\nres_tbl &lt;- res_tbl %&gt;% \nmutate(threshold = padj &lt; 0.05 &amp; abs(log2FoldChange) &gt;= 0.58)\n</code></pre> <pre><code>## Create an empty column to indicate which genes to label\nres_tbl &lt;- res_tbl %&gt;% mutate(genelabels = \"\")\n\n## Sort by padj values \nres_tbl &lt;- res_tbl %&gt;% arrange(padj)\n\n## Populate the genelabels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes\nres_tbl$genelabels[1:10] &lt;- as.character(res_tbl$gene[1:10])\n\nhead(res_tbl)\n</code></pre> <pre><code>ggplot(res_tbl, aes(x = log2FoldChange, y = -log10(padj))) +\n  geom_point(aes(colour = threshold)) +\n  geom_text_repel(aes(label = genelabels)) +\n  ggtitle(\"Mov10 overexpression\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25))) \n</code></pre>"},{"location":"09_summarized_workflow.html#heatmap-of-differentially-expressed-genes","title":"Heatmap of differentially expressed genes","text":"<pre><code># filter significant results from normalized counts\nnorm_sig &lt;- normalized_counts %&gt;% as_tibble(rownames = \"gene\") %&gt;%\n  dplyr::filter(gene %in% sig_res$gene) %&gt;% column_to_rownames(var=\"gene\")\n</code></pre> <pre><code>pheatmap(norm_sig, \n         cluster_rows = T, #cluster by expression pattern\n         scale = \"row\", # scale by gene so expression pattern is visible\n         treeheight_row = 0, # dont show the row dendogram\n         show_rownames = F, # remove rownames so it is more clear\n         annotation = meta %&gt;% column_to_rownames(var = \"sample\") %&gt;% dplyr::select(\"condition\")\n         )\n</code></pre>"},{"location":"09_summarized_workflow.html#perform-analysis-to-extract-functional-significance-of-results-go-or-kegg-enrichment-gsea-etc","title":"Perform analysis to extract functional significance of results: GO or KEGG enrichment, GSEA, etc.","text":""},{"location":"09_summarized_workflow.html#annotate-with-annotables","title":"Annotate with <code>annotables</code>","text":"<pre><code>ids &lt;- grch38 %&gt;% dplyr::filter(ensgene %in% res_tbl$gene) \nres_ids &lt;- inner_join(res_tbl, ids, by=c(\"gene\"=\"ensgene\"))\n</code></pre>"},{"location":"09_summarized_workflow.html#perform-enrichment-analysis-of-go-terms-can-be-done-as-well-with-kegg-pathways","title":"Perform enrichment analysis of GO terms (can be done as well with KEGG pathways)","text":"<pre><code># Create background dataset for hypergeometric testing using all genes tested for significance in the results\nall_genes &lt;- dplyr::filter(res_ids, !is.na(gene)) %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n# Extract significant results\nsig &lt;- dplyr::filter(res_ids, padj &lt; 0.05 &amp; !is.na(gene))\n\nsig_genes &lt;- sig %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n</code></pre> <pre><code># Perform enrichment analysis\nego &lt;- enrichGO(gene = sig_genes, \n                universe = all_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\nego &lt;- enrichplot::pairwise_termsim(ego)\n</code></pre>"},{"location":"09_summarized_workflow.html#visualize-result","title":"Visualize result","text":"<pre><code>dotplot(ego, showCategory=50)\n</code></pre> <pre><code>emapplot(ego, showCategory = 50)\n</code></pre>"},{"location":"09_summarized_workflow.html#cnetplot","title":"Cnetplot","text":"<pre><code>## To color genes by log2 fold changes, we need to extract the log2 fold changes from our results table creating a named vector\nsig_foldchanges &lt;- sig$log2FoldChange\n\nnames(sig_foldchanges) &lt;- sig$gene\n</code></pre> <pre><code>## Cnetplot details the genes associated with one or more terms - by default gives the top 5 significant terms (by padj)\ncnetplot(ego, \n         categorySize=\"pvalue\", \n         showCategory = 5, \n         foldChange=sig_foldchanges, \n         vertex.label.font=6)\n</code></pre>"},{"location":"09_summarized_workflow.html#perform-gsea-analysis-of-kegg-pathways-can-be-done-as-well-with-go-terms","title":"Perform GSEA analysis of KEGG pathways (can be done as well with GO terms)","text":"<pre><code># Extract entrez IDs. IDs should not be duplicated or NA\nres_entrez &lt;- dplyr::filter(res_ids, entrez != \"NA\" &amp; entrez != \"NULL\" &amp; duplicated(entrez)==F)\n\n## Extract the foldchanges\nfoldchanges &lt;- res_entrez$log2FoldChange\n\n## Name each fold change with the corresponding Entrez ID\nnames(foldchanges) &lt;- res_entrez$entrez\n\n## Sort fold changes in decreasing order\nfoldchanges &lt;- sort(foldchanges, decreasing = TRUE)\n</code></pre> <pre><code># Run GSEA of KEGG\ngseaKEGG &lt;- gseKEGG(geneList = foldchanges, # ordered named vector of fold changes (Entrez IDs are the associated names)\n              organism = \"hsa\", # supported organisms listed below\n              pvalueCutoff = 0.05, # padj cutoff value\n              verbose = FALSE)\n\ngseaKEGG_results &lt;- gseaKEGG@result\nhead(gseaKEGG_results)\n</code></pre> <pre><code>## Plot the GSEA plot for a single enriched pathway:\ngseaplot(gseaKEGG, geneSetID = gseaKEGG_results$ID[1])\n</code></pre> <pre><code>## Output images for a single significant KEGG pathway\npathview(gene.data = foldchanges,\n              pathway.id = gseaKEGG_results$ID[1],\n              species = \"hsa\",\n              limit = list(gene = 2, # value gives the max/min limit for foldchanges\n              cpd = 1))\n</code></pre> <pre><code>knitr::include_graphics(paste0(\"./\",gseaKEGG_results$ID[1],\".png\"))\n</code></pre>"},{"location":"09_summarized_workflow.html#make-sure-to-output-the-versions-of-all-tools-used-in-the-de-analysis","title":"Make sure to output the versions of all tools used in the DE analysis:","text":"<pre><code>sessionInfo()\n</code></pre>"},{"location":"contributors.html","title":"Contributors","text":"<p>Jose Alejandro Romero Herrera  </p>","tags":["authors","contributors"]},{"location":"contributors.html#credit-table","title":"CRediT table","text":"CRediT role Initials Conceptualization Data curation Formal Analysis Funding acquisition Investigation Methodology Project administration Resources Software Supervision Validation Visualization Writing - original draft Writing - review &amp; editing","tags":["authors","contributors"]},{"location":"summary.html","title":"Workshop summary","text":""},{"location":"summary.html#workshop-summary","title":"Workshop summary","text":"<p>Below you will find a summary of all the steps used in the workshop, as well as annotations for each of the steps.</p>"},{"location":"summary.html#rnaseq-experiment","title":"RNAseq experiment","text":"<ul> <li>The goal of a bulk RNAseq analysis is to compare gene expression between two or more conditions.</li> <li>A bulk RNAseq experiment requires isolation of mRNA from samples with different conditions.</li> <li>mRNA molecules are sequenced (reads), so we know their nucleotide sequence.</li> <li>We still cannot do any sort of comparison between genes.<ul> <li>Sequences lack gene information, cannot perform any statistical analysis.</li> </ul> </li> <li>Reads need to be preprocessed to obtain a matrix of counts per gene and sample (\u201ccount matrix\u201d).</li> <li>To preprocess fastq files we use a plethora of programs for each step.<ul> <li>QC, trimming, alignment and quantification.</li> </ul> </li> <li>All these steps are compiled into a pipeline: nf-core rnaseq.<ul> <li>Read more about how to use the nf-core rnaseq pipeline here.</li> </ul> </li> <li>Then, we can proceed with data analysis and finding differences in expression.<ul> <li>After the count matrix is created, we use R to analyse our data.</li> <li>Bulk RNAseq analysis in R uses also several R packages.</li> </ul> </li> <li>So our workflow can be divided in two: preprocessing and data analysis.</li> </ul>"},{"location":"summary.html#ucloud","title":"UCloud","text":"<ul> <li>UCloud is a danish High Performance Computing environment.<ul> <li>Lots of storage, lots of CPUs and RAM (computing power).</li> </ul> </li> <li>Danish institutions have access to it.<ul> <li>You personally have 1000 DKK in computing resources.</li> </ul> </li> <li>UCloud works in apps, giving you access to different programs.<ul> <li>All apps have documentation on how to use them!</li> </ul> </li> <li>This means everyone is using the same versions of software.<ul> <li>Makes teaching much much easier, results are reproducible.</li> </ul> </li> </ul>"},{"location":"summary.html#step-1-preprocessing","title":"Step 1 Preprocessing","text":""},{"location":"summary.html#traditional-preprocessing","title":"Traditional preprocessing","text":"<ol> <li>Experimental design.    Before you start a bulk RNAseq experiment, take into account:<ol> <li>Proper controls.</li> <li>Replicates.</li> <li>Confounding factors.</li> <li>Batch effects.</li> <li>Talk to a bioinformatician! </li> </ol> </li> <li> <p>Wet lab protocol    The RNAseq lab protocol ends in the sequencer</p> </li> <li> <p>Sequencer    Sequencer returns images of the sequence-by-synthesis process in bcl format</p> </li> <li> <p>Bcl to fastq files translation    Software bcl2fastq transforms sequencer images into fastq format.    This is formally known as \"reads\". Depending on your RNAseq protocol, you will have either single end or paired end reads.</p> </li> <li> <p>Raw fastq files    They contain read information, such as the nucleotide sequence and the quality of each of the nucleotides.    They are called \"raw\" cause they are unfiltered and may contain primers and adaptors.    We need to check read quality and probably clean them</p> </li> <li> <p>Reads Quality Control    Using the software fastQC we can check the quality of our reads before and after cleaning. fastQC will calculate metrics such as: GC-content, overall read quality, per base quality, overrepresented sequences, etc.</p> </li> <li> <p>Raw fastQC report    We check the report in html, which can be visualized in an internet browser. We check the fastQC metrics mentioned in 6.</p> </li> <li> <p>Trimming and cleaning    Raw fastq files may contain bad quality reads and adaptors which will pose a problem when trying to align the reads.     TrimGalore! is a tool that will clean, filter and trim reads. It will also create a fastQC report of the clean reads.</p> <ul> <li>Remove adapters</li> <li>Trim bad quality bases from either end</li> <li>Filter out bad quality reads </li> </ul> </li> <li> <p>Clean fastq files    These are reads that have been cleaned and ready to aligned.</p> </li> <li> <p>Clean fastQC report     We check again that we have solved the issues we saw in 7.</p> </li> <li> <p>Alignment     Alignment is the process of mapping the origin of our reads to the reference genome<sup>12</sup>.     There are many aligners tools, such as STAR, BWA, or HISAT2.      They will use the indexed genome<sup>13</sup> to map the reads.</p> </li> <li> <p>Reference genome     In order to know from which genes our reads are coming from, we need to align them to a reference genome.     Make sure you are using the latest stable version of the genome for your organism of interest! Depending on the aligner you are using, you will have to index your genome<sup>15</sup> using that same aligner</p> </li> <li> <p>fasta file     A fasta file is a text file that contains a nucleotide or amino acid sequence.     It always starts with \"&gt;\" as a header. The header contains information about the sequence, such as \"Chromosome 1 of the mouse genome\".</p> </li> <li> <p>Annotations in gtf or gff file     While the fasta file contains the actual sequence, the annotation file provides information about regions of the sequence, such as genes, promoters, enhancers, etc.     The annotation file will have coordinates of where this region falls in the fasta sequence, as well as what type of region it is.     Thus it is important that the coordinates of the file matches the version of the reference genome you are using.</p> </li> <li> <p>Reference indexing     In order to align reads to a reference in an efficient way, the fasta file must be structured. This process is called \"indexing\", which allows fast search and mapping of reads to the reference. Indexing is performed by the same aligner that you will be using. It will return files with different formats, depending on the aligner you used.</p> </li> <li> <p>Aligned reads     Reads that have been mapped to the reference genome. They are in BAM format<sup>17</sup>.</p> </li> <li> <p>BAM files     BAM files are binary files containing information about the read alignment, such as:         - Where in the reference do they fall.         - Quality of the mapping.         - Quality of the read. </p> </li> <li> <p>Check duplicates     Due to the nature of mRNAs and the protocol to sequence them, duplications will occur (blue reads in 16). They can be artifacts of PCR amplification or natural duplicates of highly expressed genes. The tool dupRadar will create these plots for you to check them out<sup>19</sup>.</p> </li> <li> <p>dupRadar results     dupRadar will plot the ratio of duplications (y axis) as a function of the gene expression (x axis).</p> <p>As long as you find a low ratio of duplicates for lowly expressed genes and high duplication rates of highly expressed genes, there is nothing to worry about (left image).</p> <p>If your ratio of duplicates is proportional (right plot) you probably have artificial duplicates. You may consider removing them in 20.</p> </li> <li> <p>Remove duplicates     This is an optional step if your duplicate ratios are not what you expected from the dupRadar results<sup>19</sup>. This can be done with the tool MarkDuplicates and will return you BAM files<sup>17</sup> without duplicated reads.</p> </li> <li> <p>Quantification     Using the annotations from the gtf or gff file<sup>14</sup>, we can finally count how many reads belong to each gene from each sample and create a count matrix.</p> <p>There are several tools that can do this, such as STAR, HISAT2, bedtools, Rsubread.</p> </li> <li> <p>Count matrix     Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.</p> </li> <li> <p>MultiQC report     All metrics and QC checks can be compiled into a single html report that summarizes the entire preprocessing workflow:</p> <ul> <li>Raw reads fastQC</li> <li>Clean and trimmed reads QC</li> <li>Alignment metrics</li> <li>Duplication rates</li> <li>dupRadar results</li> <li>Quantification results </li> </ul> </li> <li>All these steps are compiled into a pipeline: nf-core rnaseq</li> </ol>"},{"location":"summary.html#pseudo-preprocessing","title":"Pseudo preprocessing","text":"<p>Pseudoalignment and quantification preprocessing differs from traditional mapping. With pseudoalignment we do not know the exact coordinates of our reads, but it makes the alignment and quantification process much faster. However, we will lose many QC steps on the way. Other than that, the workflow starts very similar.</p> <p>NOTE: you can do traditional alignment and also pseudoquantification. This way you can still get all your QC metrics.</p> <ol> <li>Experimental design.    Before you start a bulk RNAseq experiment, take into account:<ol> <li>Proper controls.</li> <li>Replicates.</li> <li>Confounding factors.</li> <li>Batch effects.</li> <li>Talk to a bioinformatician! </li> </ol> </li> <li> <p>Wet lab protocol    The RNAseq lab protocol ends in the sequencer</p> </li> <li> <p>Sequencer    Sequencer returns images of the sequence-by-synthesis process in bcl format</p> </li> <li> <p>Bcl to fastq files translation    Software bcl2fastq transforms sequencer images into fastq format.    This is formally known as \"reads\". Depending on your RNAseq protocol, you will have either single end or paired end reads.</p> </li> <li> <p>Raw fastq files    They contain read information, such as the nucleotide sequence and the quality of each of the nucleotides.    They are called \"raw\" cause they are unfiltered and may contain primers and adaptors.    We need to check read quality and probably clean them</p> </li> <li> <p>Reads Quality Control    Using the software fastQC we can check the quality of our reads before and after cleaning. fastQC will calculate metrics such as: GC-content, overall read quality, per base quality, overrepresented sequences, etc.</p> </li> <li> <p>Raw fastQC report    We check the report in html, which can be visualized in an internet browser. We check the fastQC metrics mentioned in 6.</p> </li> <li> <p>Trimming and cleaning    Raw fastq files may contain bad quality reads and adaptors which will pose a problem when trying to align the reads.     TrimGalore! is a tool that will clean, filter and trim reads. It will also create a fastQC report of the clean reads.</p> <ul> <li>Remove adapters</li> <li>Trim bad quality bases from either end</li> <li>Filter out bad quality reads </li> </ul> </li> <li> <p>Clean fastq files    These are reads that have been cleaned and ready to aligned.</p> </li> <li> <p>Clean fastQC report     We check again that we have solved the issues we saw in 7.</p> </li> <li> <p>Pseudoalignment     Alignment is the process of mapping the origin of our reads to the reference genome<sup>12</sup>. There are several pseudoaligners tools, such as salmon or kallisto. They will use the genome graph/index<sup>15</sup> to align the reads. </p> <p>NOTE: Pseudoalignment and quantification can be done in one step/calculation, there are no aligned files.</p> </li> <li> <p>Reference genome     In order to know from which genes our reads are coming from, we need to align them to a reference genome.     Make sure you are using the latest stable version of the genome for your organism of interest!     Depending on the aligner you are using, you will have to index your genome14 using that same aligner</p> </li> <li> <p>fasta file     A fasta file is a text file that contains a nucleotide or amino acid sequence.     It always starts with \"&gt;\" as a header. The header contains information about the sequence, such as \"Chromosome 1 of the mouse genome\".</p> </li> <li> <p>Annotations in gtf or gff file     While the fasta file contains the actual sequence, the annotation file provides information about regions of the sequence, such as genes, promoters, enhancers, etc.     The annotation file will have coordinates of where this region falls in the fasta sequence, as well as what type of region it is.     Thus it is important that the coordinates of the file matches the version of the reference genome you are using.</p> </li> <li> <p>Reference indexing     In order to pseudoalign reads to a reference in an efficient way, the fasta file must be structured:         1. First the reference, which includes different trasncripts, will be transfomed into a graph.          2. Each node is a k-mer consisting of \u201ck\u201d nucleotides.         3. Each noche is compatible with X transcripts         4. The nodes and their compatibilities are indexed         5. Redundant nodes are removed</p> <p>Indexing is performed by the same pseudoaligner that you will be using. It will return files with different formats, depending on the pseudoaligner you used.</p> </li> <li> <p>Pseudoquantification     Using the annotations from the gtf or gff file14, we can estimate count how many reads belong to each gene from each sample. Salmon and kallisto will create a quantification file for each of your samples.</p> <p>NOTE: Pseudoalignment and quantification can be done in one step/calculation, there are no aligned files.</p> </li> <li> <p>Quantification results     Pseudoaligners will create individual results for each of the samples, called \u201cquant.sf\u201d files. The quant.sf file is matrix where each row is a transcript. There are several columns:</p> <ul> <li>Name: This is the name of the target transcript provided in the input transcript database (FASTA file).</li> <li>Length: This is the length of the target transcript in nucleotides.</li> <li>EffectiveLength: This is the computed effective length of the target transcript.</li> <li>TPM: This is salmon\u2019s estimate of the relative abundance of this transcript in units of Transcripts Per Million (TPM). </li> <li>NumReads: This is salmon\u2019s estimate of the number of reads mapping to each transcript that was quantified.</li> </ul> <p>The pseudoaligner will also create a tx2gene.txt file that contains translations between transcripts IDs, gene IDs and gene names.</p> </li> <li> <p>Import and merge quant.sf files     Using the tximport R package, we can import all our quant.sf files and txt2gene.txt file into a proper count matrix that will be fed into the DESeq2 package for differential expression analysis.</p> </li> <li> <p>Count matrix     Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.</p> </li> <li> <p>MultiQC report     All metrics and QC checks can be compiled into a single html report that summarizes the entire preprocessing workflow:</p> <ul> <li>Raw reads fastQC</li> <li>Clean and trimmed reads QC</li> <li>Alignment metrics</li> <li>Duplication rates</li> <li>dupRadar results</li> <li>Quantification results </li> </ul> </li> <li>All these steps are compiled into a pipeline: nf-core rnaseq</li> </ol>"},{"location":"summary.html#2-data-analysis","title":"2. Data analysis","text":"<p>We have now our count matrix, either from the salmon results or from our traditional count matrix. It is time to get into Rstudio and do our data analysis!</p> <ol> <li> <p>Count matrix    Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.</p> </li> <li> <p>Metadata    Matrix of rows and columns that contain information about your samples. This could be your samplesheet.csv used for the nf-core pipeline. Each row is a sample and each column is information about that sample, including our variables of interest (condition) and possible confounding variables.</p> </li> <li> <p>Create DESeq object    Create a DESeq object with the count matrix and metadata, either from the salmon results (from tximport) or a traditional count matrix (traditional aligner and quantification, like STAR). We need to already specify our formula for statistical testing. This can be changed later after checking for sources of variation.</p> <p>NOTE: make sure that the order of the samples in columns in the count matrix is the same as the order of the samples in the rows of your metadata!    - <code>DESeqDataSetFromTximport(counts, colData = metadata, design = ~ condition)</code> -&gt; For salmon results    - <code>DESeqDataSetFromMatrix(counts, colData = metadata, design = ~ condition)</code> -&gt; For traditional count matrix</p> </li> <li> <p>DESeq object    DESeq object will contain all the info necessary to run a differential expression analysis, including the design, size factors, dispersions and statistical tests.</p> </li> <li> <p>Design    Formula used for modeling and statistical testing. In here you should also put your variables that contribute to differences between samples (variance).</p> <ul> <li>A basic experiment, e.g., treated vs untreated cells will have this information in the metadata variable \"condition\". Thus the design formula should be: <code>~ condition</code>.</li> <li>A experiment containing two variables, such as \"treatment\" (treated and control) vs sex (males and females) would have a design formula like this: <code>~ sex + condition</code>. Your variable of interest should be the last one!</li> <li>If you expect a combined effect between sex and treatment, add the combined factor to the design: <code>~ sex + condition + sex:condition</code>.</li> </ul> </li> <li> <p>Model counts    Running the DESeq() function, you will automatically model your counts for differential expression analysis. The DESeq() function will run three steps in a row:</p> <ul> <li><code>estimateSizeFactors(dds)</code>: calculate size factors for each sample and normalize count matrix by the median of rations method</li> <li><code>estimateDispersions(dds)</code>: estimate gene dispersions, that is, how is the variance of a gene compared to its mean across all samples.</li> <li><code>nbinomWaldTest(dds)</code>: model your counts using the size factors and dispersions as well as running Wald tests for statistical significance. </li> </ul> </li> <li> <p>Modeled DESeq object    DESeq object that has run the <code>DESeq()</code> function on it. It contains all the information calculated in 6.</p> </li> <li> <p>Normalized counts    You can extract your normalized counts using the median of ratios methods with the function: <code>counts(dds, normalized = T)</code>.    This normalized counts can be useful for downstream analysis using other types of tools as well as visualizations.</p> </li> <li> <p>Exploratory analysis Now we are able to check if our sampels are behaving the way we expect, that is, if our replicates are grouped together, our genes have the dispersion we expect and check for sources of variation.</p> <ul> <li>Dispersion plot   After calculating gene dispersions, we can check if our dispersions match what we expect from a negative binomial distribution typical of bulk RNAseq. If the fitted line is not in the middle of the cloud of dots, or the is a big \"rainfall\" of dots coming from the clouds it might indicate problems with your data, like an outlier, contamination or you are not using a raw count matrix.</li> <li>Heatmaps and clustering   You can use sample distances or Pearson correlations to group or clusters your samples together. Replicates of the same type should cluster together and be apart from other types of replicates.</li> <li>PCA plot   The PCA can be used also to check that your replicates are group together. It can also be used to check for different variables that are driving the clustering<sup>11</sup>. Ideally you will find that PC1 and PC2 separate your samples by the variable of interest. Otherwise, you might want to adjust your design formula<sup>11</sup>. </li> </ul> </li> <li> <p>Check sources of variation     If variables (confounding variables) other than your variables of interest are separating your samples in your PCA plot, you should probably go back to create a DESeqObject<sup>3</sup> step and include your confounding variables into the design formula.</p> </li> <li> <p>DEA    We can extract now our results of Differential Expression analysis, that is, our log<sub>2</sub> Fold Changes and statistical significance (p-value). Remember that there are different statistical filters (genes with 0 counts, outliers, etc) which will return NA as a p-value. In order to get your results you will have to provide a comparison, a.k.a., a \"contrast\". There are different ways of specifying this contrast. You can use either:</p> <ul> <li>Normal results<sup>12</sup>: <code>results(dds, contrast = &lt;comparison&gt;)</code></li> <li>Log2FC shrunken results<sup>13</sup>: <code>lfcShrink(dds, coef = &lt;comparison&gt;)</code> </li> </ul> </li> <li> <p>Results table    Normal, unshrunken results for DEA of the specified comparison (contrast). You can obtain this table using the function: <code>results(dds, contrast = comparison)</code>. The table will contain several columns. The most important ones are:</p> <ul> <li>baseMean: mean of your normalized counts</li> <li>log2FoldChange: ratio of expression between two conditions in log<sub>2</sub> scale</li> <li>p-value: wald statistical test pvalue</li> <li>padj: adjusted pvalues for multiple testing</li> </ul> <p>You can further filter this table using a cutoff for your adjusted pvalue and thresholds for your LFCs (up regulated genes or down regulated genes).</p> </li> <li> <p>LogFoldShrink results table    Normal results will have very noise LFC for low counts, as well as having very low statistical significance. Using this technique, you can reduce the noisy LFC from insignificant genes. These are very useful for visualization<sup>15</sup> or ranking of genes based on their LFC in a GSEA<sup>18</sup>. This function returns the same columns as before<sup>13</sup>.</p> </li> <li> <p>Visualize results     Instead of looking at tables, you can check your differentially expressed genes using different visualizations.</p> <ul> <li>MAplot: each dot is a gene; x axis is the mean of the normalized counts; y axis is the shrunken LFC<sup>14</sup>. Colored dots are significant genes. Use the <code>plotMA(res)</code> function.</li> <li>Volcano plot: each dot is a gene; x axis is the shrunken LFC<sup>14</sup>; y axis is the adjusted p-value in -log<sub>10</sub> scale. Colored dots are significant genes. You need to create custom <code>ggplot()</code>.</li> <li>Heatmap plots. Each row is a gene and each column is a sample. You can plot here differentially expressed genes using the normalized counts<sup>8</sup> or LFC between different comparisons. </li> </ul> </li> <li> <p>Annotate genes     We will annotate our genes with different information so that we can perform functional analysis using different databases. We do this using the R package annotationHub.     We extract information regarding our genes of interest, such as entrez ID, gene names, genomic regions, etc.</p> <p>NOTE: make sure we use the same genome version as the one we used to align our reads. Different versions of the genome will have gene Ids for the same gene.</p> </li> <li> <p>Annotated results table    Results table annotated with more information15, such as database IDs, ready for functional analysis<sup>17</sup>.</p> </li> <li> <p>Functional analysis    We can annotate the results of our DEA to reveal the function or biological relevance of our genes of interest. We use the R package clusterProfiler to do functional analysis.    We can consult different databases, such as Gene Ontologies (GO), KEGG pathways or Disease Ontologies (DO), using different methods:</p> <ul> <li>Overrepresentation analysis: <code>enrichXXX()</code>. Performs a statistical test on a contingency table for enrichment on GO or DO terms, as well as KEGG pathways. <code>XXX</code> depends on the enrichment you want to perform.</li> <li>GSEA: <code>gseXXX()</code>. Performs Gene Set Enrichment Analysis (GSA) on a ranked list of genes (by p-value or shrunken LFC<sup>13</sup>). <code>XXX</code>depends on the enrichment you want to perform.</li> <li>Pathway perturbance: <code>pathway()</code>. You visualize how genes in a path are being up or down regulated based on LFC. You should select a path that was a significant hit.</li> <li>Networks: you can compile information of similar enriched terms into a network for easier understanding of your functional analysis results.</li> </ul> </li> </ol>"},{"location":"rmd/modify_md.html","title":"Modify md","text":"In\u00a0[1]: Copied! <pre>import os\nimport shutil\nimport re\n</pre> import os import shutil import re In\u00a0[2]: Copied! <pre>source_folder = \"./develop/\"\nimages_folder = \"./img/\"\ndestination_folder = \"../\"\nfiles = os.listdir(source_folder)\n\nprint(files)\n</pre> source_folder = \"./develop/\" images_folder = \"./img/\" destination_folder = \"../\" files = os.listdir(source_folder)  print(files) <pre>['08b_FA_overrepresentation.md']\n</pre> In\u00a0[3]: Copied! <pre>for i in files:\n    if i.endswith(\".md\"):\n        with open(source_folder + i) as f:\n            print(\"Processing:\", i, \"\\n\")\n            text = f.read()\n            text = re.sub(\"\\nknit((.|\\n)*)\\n=+\\n\", \"\\n---\\n\" ,text)\n            text = re.sub(\"(\u201d|\u201c)\",\"\\\"\",text)\n            text = re.sub(\"(\u2018|\u2019)\",\"\\'\",text)\n            text = re.sub(\"(\u2018|\u2019)\",\"\\'\",text)\n            text = re.sub(\"\u00a0\",\" \",text)\n            text = re.sub(\"\\\\&gt;\",\"&gt;\",text)\n            text = re.sub(\"\\\\&lt;\",\"&lt;\",text)\n        with open(source_folder + i, \"w\") as f:\n            f.write(text)\n</pre> for i in files:     if i.endswith(\".md\"):         with open(source_folder + i) as f:             print(\"Processing:\", i, \"\\n\")             text = f.read()             text = re.sub(\"\\nknit((.|\\n)*)\\n=+\\n\", \"\\n---\\n\" ,text)             text = re.sub(\"(\u201d|\u201c)\",\"\\\"\",text)             text = re.sub(\"(\u2018|\u2019)\",\"\\'\",text)             text = re.sub(\"(\u2018|\u2019)\",\"\\'\",text)             text = re.sub(\"\u00a0\",\" \",text)             text = re.sub(\"\\\\&gt;\",\"&gt;\",text)             text = re.sub(\"\\\\&lt;\",\"&lt;\",text)         with open(source_folder + i, \"w\") as f:             f.write(text) <pre>Processing: 08b_FA_overrepresentation.md \n\n</pre> In\u00a0[4]: Copied! <pre>for file_name in os.listdir(source_folder):\n    # construct full file path\n    source = source_folder + file_name\n    destination = destination_folder + file_name\n    shutil.move(source, destination)\n    print('Moved:', file_name)\n</pre> for file_name in os.listdir(source_folder):     # construct full file path     source = source_folder + file_name     destination = destination_folder + file_name     shutil.move(source, destination)     print('Moved:', file_name) <pre>Moved: 08b_FA_overrepresentation.md\n</pre> In\u00a0[5]: Copied! <pre>def copy_directory(src_dir, dest_dir):\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    for item in os.listdir(src_dir):\n        src_path = os.path.join(src_dir, item)\n        dest_path = os.path.join(dest_dir, item)\n        if os.path.isdir(src_path):\n            copy_directory(src_path, dest_path)\n        else:\n            shutil.copy2(src_path, dest_path)\n\ncopy_directory(images_folder, destination_folder+\"img/\")\n</pre>  def copy_directory(src_dir, dest_dir):     if not os.path.exists(dest_dir):         os.makedirs(dest_dir)     for item in os.listdir(src_dir):         src_path = os.path.join(src_dir, item)         dest_path = os.path.join(dest_dir, item)         if os.path.isdir(src_path):             copy_directory(src_path, dest_path)         else:             shutil.copy2(src_path, dest_path)  copy_directory(images_folder, destination_folder+\"img/\")"},{"location":"keywords.html","title":"Keywords","text":"<p>Here's a lit of used keywords:</p>"},{"location":"keywords.html#authors","title":"authors","text":"<ul> <li>Contributors</li> </ul>"},{"location":"keywords.html#contributors","title":"contributors","text":"<ul> <li>Contributors</li> </ul>"}]}